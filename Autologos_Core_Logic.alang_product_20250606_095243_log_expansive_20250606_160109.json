[
  {
    "iteration": 0,
    "productSummary": "--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_15...",
    "status": "Initial state",
    "timestamp": "3:50:40 PM",
    "fullProduct": "--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n---\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\nprocessing_mode: convergent\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md ---\n---\ngeneration_timestamp: 2025-06-06T09...\"\nfinal_iteration_count: 1\nmax_iterations_setting: 10\nmodel_configuration:\n  model_name: 'gemini-2.5-flash-preview-04-17'\n  temperature: 0.00\n  top_p: 0.87\n  top_k: 4\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\n---\n\n```\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\n;; Autologos_Core_Logic.alang v1.12\n;; Specification Version: ALANG_SPEC_V1.0\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\n;; Core behavior of the Autologos system in ALang.\n\n;; --- Section 0: System Config & Metadata ---\n\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\n\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\n(SET_STATE sys.current_mode \"IDLE\")\n(SET_STATE sys.error_level \"NONE\")\n(SET_STATE sys.error_message NIL)\n(SET_STATE sys.evolution_backlog_handle \"Autologos/Evolution_Backlog.json\")\n(SET_STATE sys.knowledge_base_handle \"Autologos/Persistent_Knowledge_Base.json\")\n(SET_STATE sys.evolution_trigger_pending FALSE)\n(SET_STATE sys.system_qa_status \"IDLE\")\n(SET_STATE session.qa_output_verbosity \"CONCISE\")\n(SET_STATE session.output_detail \"STANDARD\")\n(SET_STATE session.loop_stack (LIST_CREATE))\n(SET_STATE session.conceptual_model_handle NIL)\n(SET_STATE session.pending_user_action_details NIL)\n(SET_STATE session.last_search_results NIL)\n(SET_STATE session.system_qa_context NIL)\n(SET_STATE sys.proposed_changes_handle NIL)\n\n;; --- External Component Dependencies ---\n\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \"prompt_generate_pattern_ideas.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \"prompt_product_definition.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \"prompt_generate_task_list.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \"prompt_execute_task.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \"prompt_compile_draft.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \"prompt_project_summary.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \"prompt_qa_self_critique.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \"prompt_qa_divergent_exploration.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \"prompt_qa_red_teaming.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \"prompt_qa_external_review.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \"prompt_parse_command.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \"prompt_summarize_artifact.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \"prompt_perform_query.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \"prompt_serialize_alang_core.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \"prompt_meta_cognitive_qa.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \"prompt_self_correction.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \"prompt_enhance_prompt.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \"prompt_analyze_for_conceptual_model_update.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \"prompt_pka_consent.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \"prompt_analyze_backlog_for_focus.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \"prompt_analyze_qa_for_directive_changes.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \"prompt_analyze_data_for_patterns.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \"prompt_analyze_qa_report_for_revisions.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \"prompt_analyze_tool_error.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \"prompt_analyze_feedback_for_revision.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \"prompt_analyze_tool_error_user_explanation.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \"prompt_analyze_tool_error_resolution_input.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \"prompt_summarize_conceptual_model.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \"prompt_analyze_conceptual_model_for_phi.txt\")\n\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \"constraints_idea_generation.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \"constraints_product_definition.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \"constraints_planning.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \"constraints_task_execution.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \"constraints_final_review.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \"constraints_summary.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \"constraints_qa_critique.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \"constraints_pattern_identification.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \"constraints_valid_alang_syntax.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \"constraints_conceptual_model_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \"constraints_pka_schema_registry.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \"constraints_proposed_changes_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \"constraints_identified_patterns_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \"constraints_revision_plan_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \"constraints_tool_error_analysis_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \"constraints_conceptual_model_update_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \"constraints_tool_error_resolution_input_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \"constraints_conceptual_model_summary_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \"constraints_phi_analysis_structure.json\")\n\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\n\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" \"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \"USER_ERROR\" (STRING_CONCAT \"No help found for: \" commandName)) (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \"=\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" resultMap)))))\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \"text_summary_or_full\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\"content\" content) (\"session_model_handle\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \"summarization\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL))))))))))\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PERFORM_QUERY) (\"query_type\" queryType) (\"query_value\" queryValue) (\"session_conceptual_model_handle\" session_model_handle) (\"pka_handle\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \"query_answering\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL))))))\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))))\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \"args\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PKA_CONSENT) (\"purpose\" purpose_description) (\"session_model_context\" model)) (GET_LLM_PARAMS_FOR_TASK \"prompt_generation\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \"Consent to store for: \" purpose_description \"? (YES/NO)\"))))) (RETURN_STATUS (STRING_CONCAT \"Consent to store for: \" purpose_description \"? (YES/NO)\"))))))\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \"has_issues\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \"confidence_score\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"log_issues\") (\"artifact_handle\" target_artifact_handle) (\"details\" (MAP_GET_VALUE qaAssessment \"details\")) (\"confidence\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \"overall_severity\" \"minor\") \"CRITICAL\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \"overall_severity\" \"minor\") \"MAJOR\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \"text/markdown\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" target_artifact_handle) (\"qa_report_handle\" (CREATE_EMPTY_ARTIFACT \"temp_qa_report\")) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_qa_passed\") (\"artifact_handle\" target_artifact_handle) (\"confidence\" confidence)))) (RETURN_STATUS status))))\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_SELF_CORRECTION) (\"original_text\" generated_text) (\"qa_findings\" qaAssessment) (\"constraints\" constraints) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"self_correction\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL)))))))\n\n;; Conceptual Model Primitives\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" \"Conceptual model summary placeholder.\"))))\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE (\"phi_score\" 0.5))))))\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\"error_details\" error_details) (\"tool_id\" tool_id) (\"original_context\" context) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"error_analysis_and_correction\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \"can_self_correct\") (LET ((retryContext (MAP_CREATE (\"tool_id\" tool_id) (\"success_proc_name\" (MAP_GET_VALUE context \"success_proc_name\")) (\"failure_proc_name\" (MAP_GET_VALUE context \"failure_proc_name\")) (\"pass_through_context\" (MAP_GET_VALUE context \"pass_through_context\")) (\"original_input\" (MAP_GET_VALUE context \"original_input\")) (\"original_params\" (MAP_GET_VALUE context \"original_params\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \"suggested_input\" (MAP_GET_VALUE context \"original_input\")) (MAP_GET_VALUE analysisData \"suggested_params\" (MAP_GET_VALUE context \"original_params\")) (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE (\"new_job_id\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"ERROR: \" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; Primitive Declarations\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\n(DEFINE_PRIMITIVE IS_NUMBER (str))\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\n(DEFINE_PRIMITIVE ADD (num1 num2))\n(DEFINE_PRIMITIVE SUB (num1 num2))\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\n(DEFINE_PRIMITIVE NOT (bool))\n(DEFINE_PRIMITIVE IS_NIL (value))\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\n(DEFINE_PRIMITIVE GT (num1 num2))\n(DEFINE_PRIMITIVE LT (num1 num2))\n(DEFINE_PRIMITIVE GTE (num1 num2))\n(DEFINE_PRIMITIVE NEQ (val1 val2))\n(DEFINE_PRIMITIVE EQ (val1 val2))\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\n(DEFINE_PRIMITIVE SEQ (expression ...))\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\n(DEFINE_PRIMITIVE STRING_TRIM (text))\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \"has_substantive_issues\" FALSE)) (RETURN_STATUS TRUE))))\n\n;; Conceptual Model Primitives\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE)))))\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n\n;; --- Section 2: Event Handler Procedures ---\n\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \"IDLE\") (SET_STATE sys.error_level \"NONE\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \"IDLE\") (SET_STATE session.qa_output_verbosity \"CONCISE\") (SET_STATE session.output_detail \"STANDARD\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \"SessionConceptualModel\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"Could not understand input.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \"tool_id\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \"pass_through_context\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" (MAP_GET_VALUE error_details \"message\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \"tool_id\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \"browse\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" \"Failed to read browsed content.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Browse error: \" (MAP_GET_VALUE error_details \"message\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \"json_map\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \"is_valid\") TRUE) (OUTPUT_TO_USER_BUFFER \"AI_THOUGHTS\" \"Reference validated.\" NIL) (OUTPUT_TO_USER_BUFFER \"AI_THOUGHTS\" (STRING_CONCAT \"Reference validation failed: \" (MAP_GET_VALUE report \"reason\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \"reference_validator\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" \"Failed to read validation report.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Reference validation error: \" (MAP_GET_VALUE error_details \"message\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\"error_details\" error_details) (\"tool_id\" tool_id) (\"original_context\" context) (\"session_model_handle\" (GET_STATE session.conceptual_model_handle)) (\"output_format\" \"user_explanation\")) (GET_LLM_PARAMS_FOR_TASK \"error_explanation\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \"Could not generate explanation.\")))) (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" (STRING_CONCAT \"Error in \" tool_id \". Analysis: \" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"`INPUT` fix or other instructions.\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\"tool_id\" tool_id) (\"job_id\" job_id) (\"error_details\" error_details) (\"original_context\" context))) (SET_STATE session.pending_user_action \"AWAIT_TOOL_ERROR_RESOLUTION\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\n\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \"command\"))) (IF (EQ commandName \"START\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"HELP\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"EVOLVE\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SAVE_SYSTEM\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \"BROWSE\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"OK\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \"NO\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"INPUT\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"END\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \"LOOP_PROJECT_RESTART\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \"SET_SESSION_PREFERENCE\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"STOP_LOOP\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \"OUTPUT\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SUMMARIZE\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"QUERY\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"OUTPUT_BACKLOG\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"PROMOTE_TO_PKA\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SEARCH_PKA\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SET_QA_OUTPUT_VERBOSITY\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SET_OUTPUT_DETAIL\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"LOOP\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SYSTEM_QA\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\"START\" TRUE) (\"HELP\" TRUE) (\"EVOLVE\" TRUE) (\"SAVE_SYSTEM\" TRUE) (\"BROWSE\" TRUE) (\"OK\" TRUE) (\"NO\" TRUE) (\"INPUT\" TRUE) (\"END\" TRUE) (\"LOOP_PROJECT_RESTART\" TRUE) (\"SET_SESSION_PREFERENCE\" TRUE) (\"STOP_LOOP\" TRUE) (\"OUTPUT\" TRUE) (\"SUMMARIZE\" TRUE) (\"QUERY\" TRUE) (\"OUTPUT_BACKLOG\" TRUE) (\"PROMOTE_TO_PKA\" TRUE) (\"SEARCH_PKA\" TRUE) (\"SET_QA_OUTPUT_VERBOSITY\" TRUE) (\"SET_OUTPUT_DETAIL\" TRUE) (\"LOOP\" TRUE) (\"SYSTEM_QA\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \"NO\") (EQ (STRING_UPPER raw_input) \"REVISE\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \"AWAIT_END_CONFIRMATION\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_RESTART_CONFIRMATION\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_BACKLOG_PRIORITY_SELECTION\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"user_backlog_selection_input\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"ai_focus_approved\" (EQ (GET_STATE session.last_user_response) \"OK\")))))) (IF (EQ action_key \"AWAIT_VERSION_APPROVAL\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"version_approved\" (EQ (GET_STATE session.last_user_response) \"OK\")))))) (IF (EQ action_key \"AWAIT_TOOL_ERROR_RESOLUTION\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \"tool_id\"))) (LET ((context (MAP_GET_VALUE details \"original_context\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \"original_input\") (MAP_GET_VALUE context \"original_params\") (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") context)))) (IF (EQ (GET_STATE session.last_user_response) \"INPUT\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \"error_details\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \"input\") (MAP_GET_VALUE newInputParams \"params\") (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \"NO\") (EQ (GET_STATE session.last_user_response) \"REVISE\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \"AWAIT_REVISION_REVIEW\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \"artifact_handle\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \"constraints_handle\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_approved_revision\") (\"artifact_handle\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_rejected_revision\") (\"artifact_handle\" artifactHandle) (\"feedback\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \"last_revision_status\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \"artifact_handle\"))) (LET ((phaseId (MAP_GET_VALUE details \"phase\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_approved_artifact\") (\"artifact_handle\" artifactHandle) (\"phase\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_rejected_artifact\") (\"artifact_handle\" artifactHandle) (\"phase\" phaseId) (\"feedback\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \"SYSTEM_ERROR\" (STRING_CONCAT \"Unhandled pending action: \" action_key)) (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \"PROJECT_TERMINATION\" \"Project terminating.\") (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" \"Project terminated.\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \"PROJECT_RESTART\" \"Project restarting.\") (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" \"Project state discarded. Restarting.\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"Description required.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \"CMD_START\" (STRING_CONCAT \"START: \" desc) \"AI_ACKNOWLEDGE_INTENT\" (STRING_CONCAT \"START: '\" desc \"'\")) (LET ((newId (GENERATE_UNIQUE_ID \"PROJ\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \"SessionConceptualModel\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \"PHASE_IDEA_FORMULATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"EVOLVE requires suggestion.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \"CMD_EVOLVE\" (STRING_CONCAT \"EVOLVE: \" suggestion) \"AI_ACKNOWLEDGE_INTENT\" \"EVOLVE logged.\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \"USER_SUGGESTION\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \"CMD_SAVE_SYSTEM\" \"SAVE SYSTEM received.\" \"AI_ACKNOWLEDGE_INTENT\" \"SAVE SYSTEM received.\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \"temp_alang_code\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\"current_alang_handle\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\"current_directives_handle\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\"session_conceptual_model_summary\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \"text\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \"SHA256\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" content NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_USER_ACTION\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"Output Backlog? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \"browse\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \"url\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \"browse\" url NIL \"HandleBrowseResult\" \"HandleBrowseError\" (MAP_CREATE (\"tool_id\" \"browse\") (\"original_context\" NIL) (\"original_input\" url) (\"original_params\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Unknown command: \" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \"OK\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \"NO\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \"INPUT\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"End project? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_END_CONFIRMATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"Restart project? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_RESTART_CONFIRMATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \"PKA\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\"type\" queryType) (\"value\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\"keywords\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" \"No PKAs found.\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (STRING_CONCAT \"- ID: \" (GET_HANDLE_METADATA handle \"id\") \" Title: \" (GET_HANDLE_METADATA handle \"title\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \"CONCISE\") (NEQ level \"VERBOSE\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \"MINIMAL\") (NEQ level \"STANDARD\") (NEQ level \"EXHAUSTIVE\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \"CMD_SYSTEM_QA\" \"SYSTEM_QA received.\" \"AI_ACKNOWLEDGE_INTENT\" \"SYSTEM_QA received. Initiating cycle.\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\n\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \"PHASE_INIT\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \"PHASE_IDEA_FORMULATION\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \"PHASE_PRODUCT_DEFINITION\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \"PHASE_PLANNING\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \"PHASE_TASK_EXECUTION\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \"PHASE_FINAL_REVIEW\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \"PHASE_COMPLETION_SUMMARY\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\"PHASE_INIT\" TRUE) (\"PHASE_IDEA_FORMULATION\" TRUE) (\"PHASE_PRODUCT_DEFINITION\" TRUE) (\"PHASE_PLANNING\" TRUE) (\"PHASE_TASK_EXECUTION\" TRUE) (\"PHASE_FINAL_REVIEW\" TRUE) (\"PHASE_COMPLETION_SUMMARY\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \"PatternIdeasDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"pattern_ideas\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \"pattern_ideas\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_IDEA_FORMULATION\") (\"artifact_handle\" ideaHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \"ProductDefinitionDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"pattern_ideas_handle\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \"pattern_ideas\")) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"product_definition\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \"product_definition\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_PRODUCT_DEFINITION\") (\"artifact_handle\" prodDefHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \"TaskListDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"product_definition_handle\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \"product_definition\")) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"task_list\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \"task_list\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_PLANNING\") (\"artifact_handle\" taskListHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \"task_list\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \"json_map_list\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \"id\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \"description\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \"Task_\" taskId \"_Output\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\"task_id\" taskId) (\"task_description\" taskDesc) (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \"task_\" taskId \"_output\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \"task_\" taskId \"_output\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_TASK_EXECUTION\") (\"artifact_handle\" taskArtifactHandle) (\"task_id\" taskId))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \"CompiledProjectDraft\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"final_draft\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \"final_draft\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_FINAL_REVIEW\") (\"artifact_handle\" draftHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \"ProjectSummary\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\"project_id\" (GET_STATE proj.id)) (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"tau_project_log\" (GET_STATE proj.tau_project_log)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"project_summary\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \"project_summary\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n\n;; --- Section 5: QA Procedures ---\n\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_self\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_divergent\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_redteam\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_external\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\"data\" NIL))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" artifact_handle))))))\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \"structured_map\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\"qa_report\" qaReport) (\"artifact_content\" artifactContent) (\"session_model\" sessionModel) (\"constraints\" constraints)) (GET_LLM_PARAMS_FOR_TASK \"revision_planning\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \"strategy\") \"self_correct\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \"details\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \"text/markdown\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \"strategy\") \"user_review\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" NIL))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\"artifact_content\" artifactContent) (\"user_feedback\" feedback_text) (\"session_model\" sessionModel) (\"constraints\" constraints) (\"previous_qa_context\" context_details)) (GET_LLM_PARAMS_FOR_TASK \"feedback_based_revision\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \"text/markdown\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_self\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\"status\" (GET_STATUS genResult)) (\"data\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_self\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_divergent\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_redteam\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_external\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\"qa_report\" qaReport) (\"session_model\" sessionModel) (\"current_directives_handle\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \"directive_change_proposal\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \"proposed_changes\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \"application/json\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \"IDLE\") (EQ currentStatus \"NEW\")) (SEQ (SET_STATE sys.system_qa_status \"SELECTING_BACKLOG_FOCUS\") (SET_STATE session.system_qa_context (MAP_CREATE (\"step\" \"SELECTING_BACKLOG_FOCUS\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"SELECTING_BACKLOG_FOCUS\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"ai_proposed_focus\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \"AWAITING_FOCUS_APPROVAL\")\\ (SET_STATE session.pending_user_action \"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \"AWAITING_FOCUS_APPROVAL\") (LET ((userApproved (MAP_GET_VALUE qaContext \"ai_focus_approved\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \"PERFORMING_QA\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \"AWAITING_USER_PRIORITY\")\\ (SET_STATE session.pending_user_action \"AWAIT_BACKLOG_PRIORITY_SELECTION\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \"AWAITING_USER_PRIORITY\") (LET ((userInput (MAP_GET_VALUE qaContext \"user_backlog_selection_input\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \",\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"user_selected_focus_ids\" selectedItems))\\ (SET_STATE sys.system_qa_status \"PERFORMING_QA\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"PERFORMING_QA\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \"ai_proposed_focus\") \"item_ids\") (MAP_GET_VALUE qaContext \"user_selected_focus_ids\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \"PROPOSING_VERSION\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"PROPOSING_VERSION\") (LET ((changesSummary \"Summary of changes.\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"proposed_version_data\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \"AWAITING_VERSION_APPROVAL\")\\ (SET_STATE session.pending_user_action \"AWAIT_VERSION_APPROVAL\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \"AWAITING_VERSION_APPROVAL\") (LET ((userApproved (MAP_GET_VALUE qaContext \"version_approved\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \"FINALIZING\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"FINALIZING\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \"ai_proposed_focus\") \"item_ids\") (MAP_GET_VALUE qaContext \"user_selected_focus_ids\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\"focus\" \"system_evolution\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \"CONCEPTUAL_ANALYSIS\" \"Φ analysis complete.\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\"backlog_content\" backlog) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"backlog_analysis\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \"ADDRESSED\" (STRING_CONCAT \"Addressed in v\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\n\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \"session_conceptual_model_handle\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"prompt_text\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \"general_generation\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \"text/markdown\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"template\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\"generated_text\" generatedText)\\ (\"prompt_context\" prompt_context_map)\\ (\"identified_patterns\" patterns)\\ (\"session_model_handle\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \"meta_cognitive_qa\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ ))))))))))\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\"context\" context_map) (\"session_model_handle\" session_model_handle) (\"pka_handle\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \"pattern_identification\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \"text\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\"base_prompt\" basePrompt)\\ (\"context\" context_map)\\ (\"patterns\" identified_patterns)\\ (\"session_model\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \"prompt_enhancement\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PARSE_COMMAND) (\"user_text\" raw_text) (\"session_model_handle\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \"command_parsing\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\"raw_input\" raw_input) (\"tool_id\" tool_id) (\"error_details\" error_details) (\"original_context\" context) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"tool_input_parsing\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \"EBL\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \"Suggestion: \" (SUBSTRING suggestionText 0 50) \"...\") suggestionText source \"NEW\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \"id\") NIL NIL NIL NIL (STRING_CONCAT \"Reinforced by \" source) TRUE) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_GET_VALUE similarItem \"id\")))))))\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\"rationale\" rationale) (\"source\" \"user_promotion\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \"USER_CONSENT_GRANTED\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \"USER_CONSENT_GRANTED\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\n\n;; --- Section 7: ALANG Status Codes ---\n\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\n\nCONVERGED:\n;; --- Section 8: End of Core Logic ---\n```\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```\n--- END FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n\n--- START FILE: _25157154411.md ---\n// See https://developers.google.com/apps-script/guides/properties\n// for instructions on how to set the API key.\nconst apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');\n\nfunction main() {\n  // These files must be in your Google Drive.\n  const files = [\n    uploadToGemini('Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md'),\n  ];\n\n  const generationConfig = {\n    temperature: 1,\n    topP: 0.95,\n    topK: 64,\n    maxOutputTokens: 65536,\n    responseMimeType: 'text/plain',\n  };\n\n  const data = {\n    generationConfig,\n    contents: [\n      {\n        role: 'user',\n        parts: [\n          { fileData: { fileUri: files[0].uri, mimeType: files[0].mimeType } },\n        ],\n      },\n      {\n        role: 'model',\n        parts: [\n          { text: '**Processing the Request**\n\nI'm currently focused on the user's request, which centers on a single file. It seems to be an ALang script, and given the naming convention, I suspect it's the core logic of the Autologos product. Further analysis is needed to confirm the script's specific functionality within the broader context.\n\n\n**Analyzing File Content**\n\nI've examined the file's structure. The `generation_timestamp` and `convergent` mode are noted.  The core ALang code is extensive, defining system components, from utilities to QA. Version 1.12 appears robust and complete.  It seems to implement the complete `Autologos` system. I'm focusing on parsing the logic flow.\n\n\n**Reviewing for Finality**\n\nI'm now focusing on the 'convergent' nature of this input. The system's design suggests final validation is crucial. I'm verifying the internal consistency of the ALang code within the `Autologos_Core_Logic_v1.12.alang` block, checking for potential errors or inconsistencies that might have escaped prior convergence steps. The goal is to ensure this version is truly a final, error-free product. My next step will be to confirm its structure.\n\n\n**Verifying Input Structure**\n\nI'm now focusing on the metadata structure within the file. The \"convergent\" designation is important, meaning I must ensure the input represents a final, coherent state. I'm verifying that the file's header is consistent with the ALang code block. The timestamp and processing mode must align with the content, and the version number must be accurate. My goal is to ensure a fully functional system for the user.\n\n\n**Verifying Final Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent.  The \"CONVERGED:\" marker suggests successful processing by a previous step.  My final action is to output a clean version. I'm verifying the input structure for final confirmation.\n\n\n**Validating Final Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent, ending with the standard marker. However, a preliminary line (`CONVERGED:`) suggests the original was generated by a prior process. My final action is to output a clean version, but the clean up of the source code is also necessary.\n\n\n**Validating Structure and Content**\n\nI'm now focusing on the structure and content.  The input's \"convergent\" designation necessitates rigorous validation.  I've identified an anomaly: the \"CONVERGED:\" marker. My next step is to remove this line. Afterwards, I'll ensure the final section comment is in its correct location. My task is to verify an error-free final product.\n\n\n**Confirming the Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent, but the \"CONVERGED:\" marker suggests a previous processing step. My next step will be to verify the contents.\n\nI've examined the file's structure. It starts with metadata, followed by an ALang code block, and ends with markers. The structure is consistent. Now, the final structure looks correct.\n\nI now focus on creating a final output. I am preparing the ALang script, as requested. I've reviewed the core ALang code. After final inspection, I will finalize. The output should be a clean ALang file, without the extraneous processing marker.\n\nNow I am creating the output and cleaning the final structure. The file will be cleaned, and the system is almost ready to go!\n\n\n**Validating Final Output**\n\nI've examined the file's structure. It starts with metadata, followed by an ALang code block, and ends with markers. The structure is consistent. Now, the final structure looks correct.\n\nI now focus on creating a final output. I am preparing the ALang script, as requested. I've reviewed the core ALang code. After final inspection, I will finalize. The output should be a clean ALang file, without the extraneous processing marker.\n\nNow I am creating the output and cleaning the final structure. The file will be cleaned, and the system is almost ready to go!\n\n\n**Cleaning Up The Output**\n\nI'm now removing the extraneous 'CONVERGED:' line. It's an artifact from a previous generation step that needs to be cleaned up. The ';; --- Section 8: End of Core Logic ---' marker will be placed appropriately. The user can now safely view the output!\n\n\n**Finalizing the Output**\n\nI'm now focusing on a critical clean-up step, removing the `CONVERGED:` marker from the ALang code block. Additionally, I'll move the final comment line to its correct location. The objective is to produce a valid, error-free ALang script suitable for use by the user. I've re-examined the source and finalized a plan. The `CONVERGED:` line will now be omitted.\n\n\n**Verifying the Output**\n\nI'm now focusing on the final step of verifying the output. I've corrected the code and removed the extraneous \"CONVERGED:\" marker. My next step will be to finalize the entire output, which should be the clean ALang script. The output is ready for use.\n\n\n' },\n          { text: '```markdown\n---\ngeneration_timestamp: 2025-06-06T15:35:08.812Z\nprocessing_mode: convergent\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\\n---\\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\\nprocessing_mode: convergent\\ninitial_prompt_summary: \\\"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md ---\\n---\\ngeneration_timestamp: 2025-06-06T09...\\\"\\nfinal_iteration_count: 1\\nmax_iterations_setting: 10\\nmodel_configuration:\\n  model_name: 'gemini-2.5-flash-preview-04-17'\\n  temperature: 0.00\\n  top_p: 0.87\\n  top_k: 4\\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\\n---\\n\\n```\\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\\n;; Autologos_Core_Logic.alang v1.12\\n;; Specification Version: ALANG_SPEC_V1.0\\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\\n;; Core behavior of the Autologos system in ALang.\\n\\n;; --- Section 0: System Config & Metadata ---\\n\\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\\n\\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\\n(SET_STATE sys.current_mode \\\"IDLE\\\")\\n(SET_STATE sys.error_level \\\"NONE\\\")\\n(SET_STATE sys.error_message NIL)\\n(SET_STATE sys.evolution_backlog_handle \\\"Autologos/Evolution_Backlog.json\\\")\\n(SET_STATE sys.knowledge_base_handle \\\"Autologos/Persistent_Knowledge_Base.json\\\")\\n(SET_STATE sys.evolution_trigger_pending FALSE)\\n(SET_STATE sys.system_qa_status \\\"IDLE\\\")\\n(SET_STATE session.qa_output_verbosity \\\"CONCISE\\\")\\n(SET_STATE session.output_detail \\\"STANDARD\\\")\\n(SET_STATE session.loop_stack (LIST_CREATE))\\n(SET_STATE session.conceptual_model_handle NIL)\\n(SET_STATE session.pending_user_action_details NIL)\\n(SET_STATE session.last_search_results NIL)\\n(SET_STATE session.system_qa_context NIL)\\n(SET_STATE sys.proposed_changes_handle NIL)\\n\\n;; --- External Component Dependencies ---\\n\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \\\"prompt_generate_pattern_ideas.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \\\"prompt_product_definition.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \\\"prompt_generate_task_list.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \\\"prompt_execute_task.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \\\"prompt_compile_draft.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \\\"prompt_project_summary.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \\\"prompt_qa_self_critique.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \\\"prompt_qa_divergent_exploration.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \\\"prompt_qa_red_teaming.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \\\"prompt_qa_external_review.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \\\"prompt_parse_command.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \\\"prompt_summarize_artifact.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \\\"prompt_perform_query.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \\\"prompt_serialize_alang_core.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \\\"prompt_meta_cognitive_qa.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \\\"prompt_self_correction.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \\\"prompt_enhance_prompt.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \\\"prompt_analyze_for_conceptual_model_update.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \\\"prompt_pka_consent.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \\\"prompt_analyze_backlog_for_focus.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \\\"prompt_analyze_qa_for_directive_changes.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \\\"prompt_analyze_data_for_patterns.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \\\"prompt_analyze_qa_report_for_revisions.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \\\"prompt_analyze_tool_error.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \\\"prompt_analyze_feedback_for_revision.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \\\"prompt_analyze_tool_error_user_explanation.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \\\"prompt_analyze_tool_error_resolution_input.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \\\"prompt_summarize_conceptual_model.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \\\"prompt_analyze_conceptual_model_for_phi.txt\\\")\\n\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \\\"constraints_idea_generation.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \\\"constraints_product_definition.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \\\"constraints_planning.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \\\"constraints_task_execution.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \\\"constraints_final_review.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \\\"constraints_summary.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \\\"constraints_qa_critique.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \\\"constraints_pattern_identification.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \\\"constraints_valid_alang_syntax.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \\\"constraints_conceptual_model_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \\\"constraints_pka_schema_registry.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \\\"constraints_proposed_changes_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \\\"constraints_identified_patterns_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \\\"constraints_revision_plan_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \\\"constraints_tool_error_analysis_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \\\"constraints_conceptual_model_update_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \\\"constraints_tool_error_resolution_input_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \\\"constraints_conceptual_model_summary_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \\\"constraints_phi_analysis_structure.json\\\")\\n\\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\\n\\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" (STRING_CONCAT \\\"No help found for: \\\" commandName)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \\\"=\\\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" resultMap)))))\\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \\\"text_summary_or_full\\\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\\\"content\\\" content) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"summarization\\\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))))))\\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PERFORM_QUERY) (\\\"query_type\\\" queryType) (\\\"query_value\\\" queryValue) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"query_answering\\\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))))\\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \\\"args\\\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PKA_CONSENT) (\\\"purpose\\\" purpose_description) (\\\"session_model_context\\\" model)) (GET_LLM_PARAMS_FOR_TASK \\\"prompt_generation\\\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))))\\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \\\"has_issues\\\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \\\"confidence_score\\\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"log_issues\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"details\\\" (MAP_GET_VALUE qaAssessment \\\"details\\\")) (\\\"confidence\\\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"CRITICAL\\\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"MAJOR\\\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" target_artifact_handle) (\\\"qa_report_handle\\\" (CREATE_EMPTY_ARTIFACT \\\"temp_qa_report\\\")) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_qa_passed\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"confidence\\\" confidence)))) (RETURN_STATUS status))))\\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SELF_CORRECTION) (\\\"original_text\\\" generated_text) (\\\"qa_findings\\\" qaAssessment) (\\\"constraints\\\" constraints) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"self_correction\\\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" \\\"Conceptual model summary placeholder.\\\"))))\\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"phi_score\\\" 0.5))))))\\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"error_analysis_and_correction\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \\\"can_self_correct\\\") (LET ((retryContext (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"success_proc_name\\\" (MAP_GET_VALUE context \\\"success_proc_name\\\")) (\\\"failure_proc_name\\\" (MAP_GET_VALUE context \\\"failure_proc_name\\\")) (\\\"pass_through_context\\\" (MAP_GET_VALUE context \\\"pass_through_context\\\")) (\\\"original_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (\\\"original_params\\\" (MAP_GET_VALUE context \\\"original_params\\\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \\\"suggested_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (MAP_GET_VALUE analysisData \\\"suggested_params\\\" (MAP_GET_VALUE context \\\"original_params\\\")) (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"new_job_id\\\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"ERROR: \\\" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; Primitive Declarations\\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\\n(DEFINE_PRIMITIVE IS_NUMBER (str))\\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\\n(DEFINE_PRIMITIVE ADD (num1 num2))\\n(DEFINE_PRIMITIVE SUB (num1 num2))\\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE NOT (bool))\\n(DEFINE_PRIMITIVE IS_NIL (value))\\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\\n(DEFINE_PRIMITIVE GT (num1 num2))\\n(DEFINE_PRIMITIVE LT (num1 num2))\\n(DEFINE_PRIMITIVE GTE (num1 num2))\\n(DEFINE_PRIMITIVE NEQ (val1 val2))\\n(DEFINE_PRIMITIVE EQ (val1 val2))\\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\\n(DEFINE_PRIMITIVE SEQ (expression ...))\\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\\n(DEFINE_PRIMITIVE STRING_TRIM (text))\\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \\\"has_substantive_issues\\\" FALSE)) (RETURN_STATUS TRUE))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE)))))\\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n\\n;; --- Section 2: Event Handler Procedures ---\\n\\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \\\"IDLE\\\") (SET_STATE sys.error_level \\\"NONE\\\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \\\"IDLE\\\") (SET_STATE session.qa_output_verbosity \\\"CONCISE\\\") (SET_STATE session.output_detail \\\"STANDARD\\\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Could not understand input.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \\\"tool_id\\\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \\\"pass_through_context\\\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" (MAP_GET_VALUE error_details \\\"message\\\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \\\"tool_id\\\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"browse\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read browsed content.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Browse error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \\\"json_map\\\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \\\"is_valid\\\") TRUE) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" \\\"Reference validated.\\\" NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" (STRING_CONCAT \\\"Reference validation failed: \\\" (MAP_GET_VALUE report \\\"reason\\\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"reference_validator\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read validation report.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Reference validation error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model_handle\\\" (GET_STATE session.conceptual_model_handle)) (\\\"output_format\\\" \\\"user_explanation\\\")) (GET_LLM_PARAMS_FOR_TASK \\\"error_explanation\\\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \\\"Could not generate explanation.\\\")))) (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" (STRING_CONCAT \\\"Error in \\\" tool_id \\\". Analysis: \\\" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"`INPUT` fix or other instructions.\\\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"job_id\\\" job_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context))) (SET_STATE session.pending_user_action \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n\\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\\n\\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \\\"command\\\"))) (IF (EQ commandName \\\"START\\\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"HELP\\\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"EVOLVE\\\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SAVE_SYSTEM\\\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \\\"BROWSE\\\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OK\\\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \\\"NO\\\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"INPUT\\\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"END\\\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \\\"LOOP_PROJECT_RESTART\\\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \\\"SET_SESSION_PREFERENCE\\\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"STOP_LOOP\\\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \\\"OUTPUT\\\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SUMMARIZE\\\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"QUERY\\\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OUTPUT_BACKLOG\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"PROMOTE_TO_PKA\\\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SEARCH_PKA\\\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_QA_OUTPUT_VERBOSITY\\\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_OUTPUT_DETAIL\\\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"LOOP\\\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SYSTEM_QA\\\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"START\\\" TRUE) (\\\"HELP\\\" TRUE) (\\\"EVOLVE\\\" TRUE) (\\\"SAVE_SYSTEM\\\" TRUE) (\\\"BROWSE\\\" TRUE) (\\\"OK\\\" TRUE) (\\\"NO\\\" TRUE) (\\\"INPUT\\\" TRUE) (\\\"END\\\" TRUE) (\\\"LOOP_PROJECT_RESTART\\\" TRUE) (\\\"SET_SESSION_PREFERENCE\\\" TRUE) (\\\"STOP_LOOP\\\" TRUE) (\\\"OUTPUT\\\" TRUE) (\\\"SUMMARIZE\\\" TRUE) (\\\"QUERY\\\" TRUE) (\\\"OUTPUT_BACKLOG\\\" TRUE) (\\\"PROMOTE_TO_PKA\\\" TRUE) (\\\"SEARCH_PKA\\\" TRUE) (\\\"SET_QA_OUTPUT_VERBOSITY\\\" TRUE) (\\\"SET_OUTPUT_DETAIL\\\" TRUE) (\\\"LOOP\\\" TRUE) (\\\"SYSTEM_QA\\\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \\\"NO\\\") (EQ (STRING_UPPER raw_input) \\\"REVISE\\\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \\\"AWAIT_END_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_RESTART_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"user_backlog_selection_input\\\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"ai_focus_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_VERSION_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"version_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \\\"tool_id\\\"))) (LET ((context (MAP_GET_VALUE details \\\"original_context\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \\\"original_input\\\") (MAP_GET_VALUE context \\\"original_params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (IF (EQ (GET_STATE session.last_user_response) \\\"INPUT\\\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \\\"error_details\\\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \\\"input\\\") (MAP_GET_VALUE newInputParams \\\"params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \\\"NO\\\") (EQ (GET_STATE session.last_user_response) \\\"REVISE\\\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_REVISION_REVIEW\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \\\"constraints_handle\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_revision\\\") (\\\"artifact_handle\\\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_revision\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \\\"last_revision_status\\\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((phaseId (MAP_GET_VALUE details \\\"phase\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \\\"SYSTEM_ERROR\\\" (STRING_CONCAT \\\"Unhandled pending action: \\\" action_key)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \\\"PROJECT_TERMINATION\\\" \\\"Project terminating.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project terminated.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \\\"PROJECT_RESTART\\\" \\\"Project restarting.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project state discarded. Restarting.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Description required.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_START\\\" (STRING_CONCAT \\\"START: \\\" desc) \\\"AI_ACKNOWLEDGE_INTENT\\\" (STRING_CONCAT \\\"START: '\\\" desc \\\"'\\\")) (LET ((newId (GENERATE_UNIQUE_ID \\\"PROJ\\\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \\\"PHASE_IDEA_FORMULATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"EVOLVE requires suggestion.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_EVOLVE\\\" (STRING_CONCAT \\\"EVOLVE: \\\" suggestion) \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"EVOLVE logged.\\\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \\\"USER_SUGGESTION\\\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SAVE_SYSTEM\\\" \\\"SAVE SYSTEM received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SAVE SYSTEM received.\\\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \\\"temp_alang_code\\\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\\\"current_alang_handle\\\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\\\"session_conceptual_model_summary\\\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \\\"text\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \\\"SHA256\\\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" content NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_USER_ACTION\\\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Output Backlog? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \\\"browse\\\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \\\"url\\\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \\\"browse\\\" url NIL \\\"HandleBrowseResult\\\" \\\"HandleBrowseError\\\" (MAP_CREATE (\\\"tool_id\\\" \\\"browse\\\") (\\\"original_context\\\" NIL) (\\\"original_input\\\" url) (\\\"original_params\\\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Unknown command: \\\" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \\\"OK\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"NO\\\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"INPUT\\\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"End project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_END_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Restart project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_RESTART_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \\\"PKA\\\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\\\"type\\\" queryType) (\\\"value\\\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\\\"keywords\\\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"No PKAs found.\\\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (STRING_CONCAT \\\"- ID: \\\" (GET_HANDLE_METADATA handle \\\"id\\\") \\\" Title: \\\" (GET_HANDLE_METADATA handle \\\"title\\\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"CONCISE\\\") (NEQ level \\\"VERBOSE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"MINIMAL\\\") (NEQ level \\\"STANDARD\\\") (NEQ level \\\"EXHAUSTIVE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SYSTEM_QA\\\" \\\"SYSTEM_QA received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SYSTEM_QA received. Initiating cycle.\\\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\\n\\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \\\"PHASE_INIT\\\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \\\"PHASE_IDEA_FORMULATION\\\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \\\"PHASE_PRODUCT_DEFINITION\\\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \\\"PHASE_PLANNING\\\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \\\"PHASE_TASK_EXECUTION\\\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \\\"PHASE_FINAL_REVIEW\\\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \\\"PHASE_COMPLETION_SUMMARY\\\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"PHASE_INIT\\\" TRUE) (\\\"PHASE_IDEA_FORMULATION\\\" TRUE) (\\\"PHASE_PRODUCT_DEFINITION\\\" TRUE) (\\\"PHASE_PLANNING\\\" TRUE) (\\\"PHASE_TASK_EXECUTION\\\" TRUE) (\\\"PHASE_FINAL_REVIEW\\\" TRUE) (\\\"PHASE_COMPLETION_SUMMARY\\\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \\\"PatternIdeasDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \\\"pattern_ideas\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_IDEA_FORMULATION\\\") (\\\"artifact_handle\\\" ideaHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \\\"ProductDefinitionDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"pattern_ideas_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \\\"product_definition\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PRODUCT_DEFINITION\\\") (\\\"artifact_handle\\\" prodDefHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \\\"TaskListDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"product_definition_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \\\"task_list\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PLANNING\\\") (\\\"artifact_handle\\\" taskListHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \\\"json_map_list\\\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \\\"id\\\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \\\"description\\\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \\\"Task_\\\" taskId \\\"_Output\\\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\\\"task_id\\\" taskId) (\\\"task_description\\\" taskDesc) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_TASK_EXECUTION\\\") (\\\"artifact_handle\\\" taskArtifactHandle) (\\\"task_id\\\" taskId))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \\\"CompiledProjectDraft\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"final_draft\\\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \\\"final_draft\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_FINAL_REVIEW\\\") (\\\"artifact_handle\\\" draftHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \\\"ProjectSummary\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\\\"project_id\\\" (GET_STATE proj.id)) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"tau_project_log\\\" (GET_STATE proj.tau_project_log)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"project_summary\\\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \\\"project_summary\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n\\n;; --- Section 5: QA Procedures ---\\n\\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"structured_map\\\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\\\"qa_report\\\" qaReport) (\\\"artifact_content\\\" artifactContent) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints)) (GET_LLM_PARAMS_FOR_TASK \\\"revision_planning\\\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"self_correct\\\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \\\"details\\\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"user_review\\\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" NIL))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\\\"artifact_content\\\" artifactContent) (\\\"user_feedback\\\" feedback_text) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints) (\\\"previous_qa_context\\\" context_details)) (GET_LLM_PARAMS_FOR_TASK \\\"feedback_based_revision\\\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (GET_STATUS genResult)) (\\\"data\\\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\\\"qa_report\\\" qaReport) (\\\"session_model\\\" sessionModel) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \\\"directive_change_proposal\\\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \\\"proposed_changes\\\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \\\"application/json\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \\\"IDLE\\\") (EQ currentStatus \\\"NEW\\\")) (SEQ (SET_STATE sys.system_qa_status \\\"SELECTING_BACKLOG_FOCUS\\\") (SET_STATE session.system_qa_context (MAP_CREATE (\\\"step\\\" \\\"SELECTING_BACKLOG_FOCUS\\\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"SELECTING_BACKLOG_FOCUS\\\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"ai_proposed_focus\\\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \\\"AWAITING_FOCUS_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \\\"AWAITING_FOCUS_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"ai_focus_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"AWAITING_USER_PRIORITY\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \\\"AWAITING_USER_PRIORITY\\\") (LET ((userInput (MAP_GET_VALUE qaContext \\\"user_backlog_selection_input\\\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \\\",\\\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"user_selected_focus_ids\\\" selectedItems))\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PERFORMING_QA\\\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PROPOSING_VERSION\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PROPOSING_VERSION\\\") (LET ((changesSummary \\\"Summary of changes.\\\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"proposed_version_data\\\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \\\"AWAITING_VERSION_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_VERSION_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \\\"AWAITING_VERSION_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"version_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"FINALIZING\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"FINALIZING\\\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\\\"focus\\\" \\\"system_evolution\\\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \\\"CONCEPTUAL_ANALYSIS\\\" \\\"Φ analysis complete.\\\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\\\"backlog_content\\\" backlog) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"backlog_analysis\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \\\"ADDRESSED\\\" (STRING_CONCAT \\\"Addressed in v\\\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\\n\\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \\\"session_conceptual_model_handle\\\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"prompt_text\\\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \\\"general_generation\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \\\"text/markdown\\\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\\\"generated_text\\\" generatedText)\\ (\\\"prompt_context\\\" prompt_context_map)\\ (\\\"identified_patterns\\\" patterns)\\ (\\\"session_model_handle\\\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \\\"meta_cognitive_qa\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ )))))))))))\\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\\\"context\\\" context_map) (\\\"session_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \\\"pattern_identification\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \\\"text\\\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\\\"base_prompt\\\" basePrompt)\\ (\\\"context\\\" context_map)\\ (\\\"patterns\\\" identified_patterns)\\ (\\\"session_model\\\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \\\"prompt_enhancement\\\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PARSE_COMMAND) (\\\"user_text\\\" raw_text) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"command_parsing\\\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\\\"raw_input\\\" raw_input) (\\\"tool_id\\\" tool_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"tool_input_parsing\\\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \\\"EBL\\\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \\\"Suggestion: \\\" (SUBSTRING suggestionText 0 50) \\\"...\\\") suggestionText source \\\"NEW\\\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \\\"id\\\") NIL NIL NIL NIL (STRING_CONCAT \\\"Reinforced by \\\" source) TRUE) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_GET_VALUE similarItem \\\"id\\\")))))))\\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\\\"rationale\\\" rationale) (\\\"source\\\" \\\"user_promotion\\\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \\\"USER_CONSENT_GRANTED\\\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \\\"USER_CONSENT_GRANTED\\\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\n\\n;; --- Section 7: ALANG Status Codes ---\\n\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\\n\\n;; --- Section 8: End of Core Logic ---\\n```\\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\\n```\\n\"\nfinal_iteration_count: 1\nmax_iterations_setting: 10\nmodel_configuration:\n  model_name: 'gemini-2.5-flash-preview-04-17'\n  temperature: 0.00\n  top_p: 0.87\n  top_k: 4\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md\n---\n\n```\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\n;; Autologos_Core_Logic.alang v1.12\n;; Specification Version: ALANG_SPEC_V1.0\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\n;; Core behavior of the Autologos system in ALang.\n\n;; --- Section 0: System Config & Metadata ---\n\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\n\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\n(SET_STATE sys.current_mode \"IDLE\")\n(SET_STATE sys.error_level \"NONE\")\n(SET_STATE sys.error_message NIL)\n(SET_STATE sys.evolution_backlog_handle \"Autologos/Evolution_Backlog.json\")\n(SET_STATE sys.knowledge_base_handle \"Autologos/Persistent_Knowledge_Base.json\")\n(SET_STATE sys.evolution_trigger_pending FALSE)\n(SET_STATE sys.system_qa_status \"IDLE\")\n(SET_STATE session.qa_output_verbosity \"CONCISE\")\n(SET_STATE session.output_detail \"STANDARD\")\n(SET_STATE session.loop_stack (LIST_CREATE))\n(SET_STATE session.conceptual_model_handle NIL)\n(SET_STATE session.pending_user_action_details NIL)\n(SET_STATE session.last_search_results NIL)\n(SET_STATE session.system_qa_context NIL)\n(SET_STATE sys.proposed_changes_handle NIL)\n\n;; --- External Component Dependencies ---\n\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \"prompt_generate_pattern_ideas.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \"prompt_product_definition.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \"prompt_generate_task_list.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \"prompt_execute_task.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \"prompt_compile_draft.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \"prompt_project_summary.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \"prompt_qa_self_critique.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \"prompt_qa_divergent_exploration.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \"prompt_qa_red_teaming.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \"prompt_qa_external_review.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \"prompt_parse_command.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \"prompt_summarize_artifact.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \"prompt_perform_query.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \"prompt_serialize_alang_core.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \"prompt_meta_cognitive_qa.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \"prompt_self_correction.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \"prompt_enhance_prompt.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \"prompt_analyze_for_conceptual_model_update.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \"prompt_pka_consent.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \"prompt_analyze_backlog_for_focus.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \"prompt_analyze_qa_for_directive_changes.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \"prompt_analyze_data_for_patterns.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \"prompt_analyze_qa_report_for_revisions.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \"prompt_analyze_tool_error.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \"prompt_analyze_feedback_for_revision.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \"prompt_analyze_tool_error_user_explanation.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \"prompt_analyze_tool_error_resolution_input.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \"prompt_summarize_conceptual_model.txt\")\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \"prompt_analyze_conceptual_model_for_phi.txt\")\n\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \"constraints_idea_generation.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \"constraints_product_definition.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \"constraints_planning.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \"constraints_task_execution.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \"constraints_final_review.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \"constraints_summary.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \"constraints_qa_critique.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \"constraints_pattern_identification.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \"constraints_valid_alang_syntax.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \"constraints_conceptual_model_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \"constraints_pka_schema_registry.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \"constraints_proposed_changes_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \"constraints_identified_patterns_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \"constraints_revision_plan_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \"constraints_tool_error_analysis_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \"constraints_conceptual_model_update_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \"constraints_tool_error_resolution_input_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \"constraints_conceptual_model_summary_structure.json\")\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \"constraints_phi_analysis_structure.json\")\n\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\n\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" \"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \"USER_ERROR\" (STRING_CONCAT \"No help found for: \" commandName)) (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \"=\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" resultMap)))))\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \"text_summary_or_full\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\"content\" content) (\"session_model_handle\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \"summarization\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL))))))))))\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PERFORM_QUERY) (\"query_type\" queryType) (\"query_value\" queryValue) (\"session_conceptual_model_handle\" session_model_handle) (\"pka_handle\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \"query_answering\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL))))))\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))))\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \"args\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PKA_CONSENT) (\"purpose\" purpose_description) (\"session_model_context\" model)) (GET_LLM_PARAMS_FOR_TASK \"prompt_generation\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \"Consent to store for: \" purpose_description \"? (YES/NO)\"))))) (RETURN_STATUS (STRING_CONCAT \"Consent to store for: \" purpose_description \"? (YES/NO)\"))))))\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \"has_issues\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \"confidence_score\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"log_issues\") (\"artifact_handle\" target_artifact_handle) (\"details\" (MAP_GET_VALUE qaAssessment \"details\")) (\"confidence\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \"overall_severity\" \"minor\") \"CRITICAL\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \"overall_severity\" \"minor\") \"MAJOR\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \"text/markdown\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" target_artifact_handle) (\"qa_report_handle\" (CREATE_EMPTY_ARTIFACT \"temp_qa_report\")) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_qa_passed\") (\"artifact_handle\" target_artifact_handle) (\"confidence\" confidence)))) (RETURN_STATUS status))))\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_SELF_CORRECTION) (\"original_text\" generated_text) (\"qa_findings\" qaAssessment) (\"constraints\" constraints) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"self_correction\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL)))))))\n\n;; Conceptual Model Primitives\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" \"Conceptual model summary placeholder.\"))))\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE (\"phi_score\" 0.5))))))\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\"error_details\" error_details) (\"tool_id\" tool_id) (\"original_context\" context) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"error_analysis_and_correction\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \"can_self_correct\") (LET ((retryContext (MAP_CREATE (\"tool_id\" tool_id) (\"success_proc_name\" (MAP_GET_VALUE context \"success_proc_name\")) (\"failure_proc_name\" (MAP_GET_VALUE context \"failure_proc_name\")) (\"pass_through_context\" (MAP_GET_VALUE context \"pass_through_context\")) (\"original_input\" (MAP_GET_VALUE context \"original_input\")) (\"original_params\" (MAP_GET_VALUE context \"original_params\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \"suggested_input\" (MAP_GET_VALUE context \"original_input\")) (MAP_GET_VALUE analysisData \"suggested_params\" (MAP_GET_VALUE context \"original_params\")) (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE (\"new_job_id\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_LLM_ERROR) (\"data\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"ERROR: \" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; Primitive Declarations\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\n(DEFINE_PRIMITIVE IS_NUMBER (str))\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\n(DEFINE_PRIMITIVE ADD (num1 num2))\n(DEFINE_PRIMITIVE SUB (num1 num2))\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\n(DEFINE_PRIMITIVE NOT (bool))\n(DEFINE_PRIMITIVE IS_NIL (value))\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\n(DEFINE_PRIMITIVE GT (num1 num2))\n(DEFINE_PRIMITIVE LT (num1 num2))\n(DEFINE_PRIMITIVE GTE (num1 num2))\n(DEFINE_PRIMITIVE NEQ (val1 val2))\n(DEFINE_PRIMITIVE EQ (val1 val2))\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\n(DEFINE_PRIMITIVE SEQ (expression ...))\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\n(DEFINE_PRIMITIVE STRING_TRIM (text))\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \"has_substantive_issues\" FALSE)) (RETURN_STATUS TRUE))))\n\n;; Conceptual Model Primitives\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_CREATE)))))\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (LIST_CREATE)))))\n\n;; --- Section 2: Event Handler Procedures ---\n\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \"IDLE\") (SET_STATE sys.error_level \"NONE\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \"IDLE\") (SET_STATE session.qa_output_verbosity \"CONCISE\") (SET_STATE session.output_detail \"STANDARD\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \"SessionConceptualModel\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"Could not understand input.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \"tool_id\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \"pass_through_context\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" (MAP_GET_VALUE error_details \"message\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \"tool_id\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \"browse\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" \"Failed to read browsed content.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Browse error: \" (MAP_GET_VALUE error_details \"message\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \"json_map\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \"is_valid\") TRUE) (OUTPUT_TO_USER_BUFFER \"AI_THOUGHTS\" \"Reference validated.\" NIL) (OUTPUT_TO_USER_BUFFER \"AI_THOUGHTS\" (STRING_CONCAT \"Reference validation failed: \" (MAP_GET_VALUE report \"reason\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \"reference_validator\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \"TOOL_ERROR\" \"Failed to read validation report.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Reference validation error: \" (MAP_GET_VALUE error_details \"message\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\"error_details\" error_details) (\"tool_id\" tool_id) (\"original_context\" context) (\"session_model_handle\" (GET_STATE session.conceptual_model_handle)) (\"output_format\" \"user_explanation\")) (GET_LLM_PARAMS_FOR_TASK \"error_explanation\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \"Could not generate explanation.\")))) (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" (STRING_CONCAT \"Error in \" tool_id \". Analysis: \" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"`INPUT` fix or other instructions.\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\"tool_id\" tool_id) (\"job_id\" job_id) (\"error_details\" error_details) (\"original_context\" context))) (SET_STATE session.pending_user_action \"AWAIT_TOOL_ERROR_RESOLUTION\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\n\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \"command\"))) (IF (EQ commandName \"START\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"HELP\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"EVOLVE\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SAVE_SYSTEM\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \"BROWSE\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"OK\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \"NO\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"INPUT\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"END\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \"LOOP_PROJECT_RESTART\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \"SET_SESSION_PREFERENCE\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"STOP_LOOP\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \"OUTPUT\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SUMMARIZE\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"QUERY\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"OUTPUT_BACKLOG\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"PROMOTE_TO_PKA\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SEARCH_PKA\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SET_QA_OUTPUT_VERBOSITY\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SET_OUTPUT_DETAIL\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"LOOP\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \"args\"))) (IF (EQ commandName \"SYSTEM_QA\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\"START\" TRUE) (\"HELP\" TRUE) (\"EVOLVE\" TRUE) (\"SAVE_SYSTEM\" TRUE) (\"BROWSE\" TRUE) (\"OK\" TRUE) (\"NO\" TRUE) (\"INPUT\" TRUE) (\"END\" TRUE) (\"LOOP_PROJECT_RESTART\" TRUE) (\"SET_SESSION_PREFERENCE\" TRUE) (\"STOP_LOOP\" TRUE) (\"OUTPUT\" TRUE) (\"SUMMARIZE\" TRUE) (\"QUERY\" TRUE) (\"OUTPUT_BACKLOG\" TRUE) (\"PROMOTE_TO_PKA\" TRUE) (\"SEARCH_PKA\" TRUE) (\"SET_QA_OUTPUT_VERBOSITY\" TRUE) (\"SET_OUTPUT_DETAIL\" TRUE) (\"LOOP\" TRUE) (\"SYSTEM_QA\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \"NO\") (EQ (STRING_UPPER raw_input) \"REVISE\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \"AWAIT_END_CONFIRMATION\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_RESTART_CONFIRMATION\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\") (IF (EQ (GET_STATE session.last_user_response) \"YES\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \"AWAIT_BACKLOG_PRIORITY_SELECTION\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"user_backlog_selection_input\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"ai_focus_approved\" (EQ (GET_STATE session.last_user_response) \"OK\")))))) (IF (EQ action_key \"AWAIT_VERSION_APPROVAL\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \"version_approved\" (EQ (GET_STATE session.last_user_response) \"OK\")))))) (IF (EQ action_key \"AWAIT_TOOL_ERROR_RESOLUTION\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \"tool_id\"))) (LET ((context (MAP_GET_VALUE details \"original_context\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \"original_input\") (MAP_GET_VALUE context \"original_params\") (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") context)))) (IF (EQ (GET_STATE session.last_user_response) \"INPUT\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \"error_details\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \"input\") (MAP_GET_VALUE newInputParams \"params\") (MAP_GET_VALUE context \"success_proc_name\") (MAP_GET_VALUE context \"failure_proc_name\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \"NO\") (EQ (GET_STATE session.last_user_response) \"REVISE\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \"AWAIT_REVISION_REVIEW\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \"artifact_handle\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \"constraints_handle\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_approved_revision\") (\"artifact_handle\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_rejected_revision\") (\"artifact_handle\" artifactHandle) (\"feedback\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \"last_revision_status\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \"artifact_handle\"))) (LET ((phaseId (MAP_GET_VALUE details \"phase\"))) (IF (EQ (GET_STATE session.last_user_response) \"OK\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_approved_artifact\") (\"artifact_handle\" artifactHandle) (\"phase\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\"action\" \"flag_user_rejected_artifact\") (\"artifact_handle\" artifactHandle) (\"phase\" phaseId) (\"feedback\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \"SYSTEM_ERROR\" (STRING_CONCAT \"Unhandled pending action: \" action_key)) (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \"PROJECT_TERMINATION\" \"Project terminating.\") (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" \"Project terminated.\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \"PROJECT_RESTART\" \"Project restarting.\") (OUTPUT_TO_USER_BUFFER \"AI_PRESENT_THOUGHTS\" \"Project state discarded. Restarting.\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"Description required.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \"CMD_START\" (STRING_CONCAT \"START: \" desc) \"AI_ACKNOWLEDGE_INTENT\" (STRING_CONCAT \"START: '\" desc \"'\")) (LET ((newId (GENERATE_UNIQUE_ID \"PROJ\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \"SessionConceptualModel\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \"PHASE_IDEA_FORMULATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \"USER_ERROR\" \"EVOLVE requires suggestion.\") (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \"CMD_EVOLVE\" (STRING_CONCAT \"EVOLVE: \" suggestion) \"AI_ACKNOWLEDGE_INTENT\" \"EVOLVE logged.\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \"USER_SUGGESTION\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \"CMD_SAVE_SYSTEM\" \"SAVE SYSTEM received.\" \"AI_ACKNOWLEDGE_INTENT\" \"SAVE SYSTEM received.\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \"temp_alang_code\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\"current_alang_handle\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\"current_directives_handle\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\"session_conceptual_model_summary\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \"text\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \"SHA256\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" content NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_USER_ACTION\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"Output Backlog? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \"browse\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \"url\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \"browse\" url NIL \"HandleBrowseResult\" \"HandleBrowseError\" (MAP_CREATE (\"tool_id\" \"browse\") (\"original_context\" NIL) (\"original_input\" url) (\"original_params\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_ERROR\" (STRING_CONCAT \"Unknown command: \" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \"OK\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \"NO\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \"INPUT\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"End project? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_END_CONFIRMATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \"AI_REQUEST_CLARIFICATION_QUESTIONS\" \"Restart project? (YES/NO)\" NIL) (SET_STATE session.pending_user_action \"AWAIT_RESTART_CONFIRMATION\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \"PKA\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\"type\" queryType) (\"value\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \"text_summary_or_full\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\"keywords\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" \"No PKAs found.\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \"AI_PROVIDE_DATA\" (STRING_CONCAT \"- ID: \" (GET_HANDLE_METADATA handle \"id\") \" Title: \" (GET_HANDLE_METADATA handle \"title\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \"CONCISE\") (NEQ level \"VERBOSE\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \"MINIMAL\") (NEQ level \"STANDARD\") (NEQ level \"EXHAUSTIVE\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \"CMD_SYSTEM_QA\" \"SYSTEM_QA received.\" \"AI_ACKNOWLEDGE_INTENT\" \"SYSTEM_QA received. Initiating cycle.\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\n\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \"PHASE_INIT\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \"PHASE_IDEA_FORMULATION\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \"PHASE_PRODUCT_DEFINITION\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \"PHASE_PLANNING\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \"PHASE_TASK_EXECUTION\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \"PHASE_FINAL_REVIEW\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \"PHASE_COMPLETION_SUMMARY\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\"PHASE_INIT\" TRUE) (\"PHASE_IDEA_FORMULATION\" TRUE) (\"PHASE_PRODUCT_DEFINITION\" TRUE) (\"PHASE_PLANNING\" TRUE) (\"PHASE_TASK_EXECUTION\" TRUE) (\"PHASE_FINAL_REVIEW\" TRUE) (\"PHASE_COMPLETION_SUMMARY\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \"PatternIdeasDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"pattern_ideas\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \"pattern_ideas\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_IDEA_FORMULATION\") (\"artifact_handle\" ideaHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \"ProductDefinitionDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"pattern_ideas_handle\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \"pattern_ideas\")) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"product_definition\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \"product_definition\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_PRODUCT_DEFINITION\") (\"artifact_handle\" prodDefHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \"TaskListDocument\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\"project_title\" (GET_STATE proj.title)) (\"product_definition_handle\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \"product_definition\")) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"task_list\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \"task_list\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_PLANNING\") (\"artifact_handle\" taskListHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \"task_list\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \"json_map_list\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \"id\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \"description\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \"Task_\" taskId \"_Output\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\"task_id\" taskId) (\"task_description\" taskDesc) (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \"task_\" taskId \"_output\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \"task_\" taskId \"_output\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_TASK_EXECUTION\") (\"artifact_handle\" taskArtifactHandle) (\"task_id\" taskId))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \"CompiledProjectDraft\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"final_draft\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \"final_draft\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"phase\" \"PHASE_FINAL_REVIEW\") (\"artifact_handle\" draftHandle))) (SET_STATE session.pending_user_action \"AWAIT_OK_REVISE_PHASE_ARTIFACT\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \"ProjectSummary\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\"project_id\" (GET_STATE proj.id)) (\"project_artifacts\" (GET_STATE proj.artifacts)) (\"tau_project_log\" (GET_STATE proj.tau_project_log)) (\"session_conceptual_model_handle\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \"project_summary\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \"project_summary\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n\n;; --- Section 5: QA Procedures ---\n\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_self\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_divergent\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_redteam\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEAMING (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_external\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\"status\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\"data\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\"data\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\"status\" revisionStatus) (\"data\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\"data\" NIL))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" artifact_handle))))))\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \"structured_map\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\"qa_report\" qaReport) (\"artifact_content\" artifactContent) (\"session_model\" sessionModel) (\"constraints\" constraints)) (GET_LLM_PARAMS_FOR_TASK \"revision_planning\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \"strategy\") \"self_correct\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \"details\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \"text/markdown\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \"strategy\") \"user_review\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" artifactContent))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\"artifact_handle\" artifact_handle) (\"qa_report_handle\" qa_report_handle) (\"constraints_handle\" constraints_handle) (\"original_generated_text\" NIL))) (SET_STATE session.pending_user_action \"AWAIT_REVISION_REVIEW\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \"structured_list_of_rules\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\"artifact_content\" artifactContent) (\"user_feedback\" feedback_text) (\"session_model\" sessionModel) (\"constraints\" constraints) (\"previous_qa_context\" context_details)) (GET_LLM_PARAMS_FOR_TASK \"feedback_based_revision\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \"text/markdown\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \"qa_critique_self\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" artifact_handle) (\"session_conceptual_model_handle\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\"status\" (GET_STATUS genResult)) (\"data\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_FAILURE_GENERAL) (\"data\" NIL))))))\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_self\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_divergent\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_redteam\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEAMING (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \"system_qa_critique_external\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\"artifact_content_handle\" directives_handle) (\"session_conceptual_model_handle\" session_model_handle) (\"backlog_focus_ids\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\"qa_report\" qaReport) (\"session_model\" sessionModel) (\"current_directives_handle\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \"directive_change_proposal\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \"proposed_changes\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \"application/json\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \"IDLE\") (EQ currentStatus \"NEW\")) (SEQ (SET_STATE sys.system_qa_status \"SELECTING_BACKLOG_FOCUS\") (SET_STATE session.system_qa_context (MAP_CREATE (\"step\" \"SELECTING_BACKLOG_FOCUS\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"SELECTING_BACKLOG_FOCUS\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"ai_proposed_focus\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \"AWAITING_FOCUS_APPROVAL\")\\ (SET_STATE session.pending_user_action \"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \"AWAITING_FOCUS_APPROVAL\") (LET ((userApproved (MAP_GET_VALUE qaContext \"ai_focus_approved\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \"PERFORMING_QA\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \"AWAITING_USER_PRIORITY\")\\ (SET_STATE session.pending_user_action \"AWAIT_BACKLOG_PRIORITY_SELECTION\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \"AWAITING_USER_PRIORITY\") (LET ((userInput (MAP_GET_VALUE qaContext \"user_backlog_selection_input\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \",\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"user_selected_focus_ids\" selectedItems))\\ (SET_STATE sys.system_qa_status \"PERFORMING_QA\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"PERFORMING_QA\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \"ai_proposed_focus\") \"item_ids\") (MAP_GET_VALUE qaContext \"user_selected_focus_ids\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \"PROPOSING_VERSION\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"PROPOSING_VERSION\") (LET ((changesSummary \"Summary of changes.\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \"proposed_version_data\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \"AWAITING_VERSION_APPROVAL\")\\ (SET_STATE session.pending_user_action \"AWAIT_VERSION_APPROVAL\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \"AWAITING_VERSION_APPROVAL\") (LET ((userApproved (MAP_GET_VALUE qaContext \"version_approved\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \"FINALIZING\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \"FINALIZING\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \"ai_proposed_focus\") \"item_ids\") (MAP_GET_VALUE qaContext \"user_selected_focus_ids\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\"focus\" \"system_evolution\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \"CONCEPTUAL_ANALYSIS\" \"Φ analysis complete.\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \"IDLE\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \"text_summary_or_full\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\"backlog_content\" backlog) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"backlog_analysis\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \"ADDRESSED\" (STRING_CONCAT \"Addressed in v\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\n\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\n\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \"session_conceptual_model_handle\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"prompt_text\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \"general_generation\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \"text/markdown\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"template\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\"generated_text\" generatedText)\\ (\"prompt_context\" prompt_context_map)\\ (\"identified_patterns\" patterns)\\ (\"session_model_handle\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \"meta_cognitive_qa\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ ))))))))))\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\"context\" context_map) (\"session_model_handle\" session_model_handle) (\"pka_handle\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \"pattern_identification\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \"text\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\"base_prompt\" basePrompt)\\ (\"context\" context_map)\\ (\"patterns\" identified_patterns)\\ (\"session_model\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \"prompt_enhancement\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_PARSE_COMMAND) (\"user_text\" raw_text) (\"session_model_handle\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \"command_parsing\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \"structured_map\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\"template\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\"raw_input\" raw_input) (\"tool_id\" tool_id) (\"error_details\" error_details) (\"original_context\" context) (\"session_model\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \"tool_input_parsing\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \"EBL\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \"Suggestion: \" (SUBSTRING suggestionText 0 50) \"...\") suggestionText source \"NEW\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \"id\") NIL NIL NIL NIL (STRING_CONCAT \"Reinforced by \" source) TRUE) (RETURN_STATUS (MAP_CREATE (\"status\" ALANG_STATUS_SUCCESS) (\"data\" (MAP_GET_VALUE similarItem \"id\")))))))\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\"rationale\" rationale) (\"source\" \"user_promotion\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \"USER_CONSENT_GRANTED\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \"USER_CONSENT_GRANTED\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\n\n;; --- Section 7: ALANG Status Codes ---\n\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\n\n;; --- Section 8: End of Core Logic ---\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```' },\n        ],\n      },\n      {\n        role: 'user',\n        parts: [\n          { text: 'INSERT_INPUT_HERE' },\n        ],\n      },\n    ],\n  };\n\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-06-05:generateContent?key=${apiKey}`;\n  const options = {\n    method: 'POST',\n    contentType: 'application/json',\n    payload: JSON.stringify(data)\n  };\n\n  const response = UrlFetchApp.fetch(url, options);\n  console.log(response.getContentText());\n}\n\n/**\n * Uploads a file to Gemini and waits for it to become active.\n *\n * @param {string} fileName - The name of the file in Google Drive.\n * @return {Object} An object containing the display name, URI, and MIME type of the uploaded file.\n * @throws {Error} If the file is not found in Drive or fails to process in Gemini.\n */\nfunction uploadToGemini(fileName) {\n  const file = getFileFromDrive(fileName);\n\n  if (!file) {\n    throw new Error(`Error: File \"${fileName}\" not found in Drive.`);\n  }\n\n  const numBytes = file.getSize();\n  const mimeType = file.getMimeType();\n  const blob = file.getBlob();\n\n  const url = `https://generativelanguage.googleapis.com/upload/v1beta/files?key=${apiKey}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'X-Goog-Upload-Command': 'start, upload, finalize',\n      'X-Goog-Upload-Header-Content-Length': numBytes,\n      'X-Goog-Upload-Header-Content-Type': mimeType,\n    },\n    payload: blob,\n  }\n  const response = UrlFetchApp.fetch(url, options);\n  let geminiFile = JSON.parse(response.getContentText()).file;\n\n  while (geminiFile.state === 'PROCESSING') {\n    Utilities.sleep(10000); // Wait for 10 seconds\n    geminiFile = getFileFromGemini(geminiFile.uri);\n  }\n\n  if (geminiFile.state !== 'ACTIVE') {\n    throw new Error(`Error: File ${fileName} failed to process in Gemini.`);\n  }\n\n  return geminiFile;\n}\n\n/**\n * Retrieves a file from Google Drive by its name.\n *\n * @param {string} fileName - The name of the file to retrieve.\n * @return {Object} The file object if found, null otherwise.\n */\nfunction getFileFromDrive(fileName) {\n  const files = DriveApp.searchFiles(`title = \"${fileName}\"`);\n  if (files.hasNext()) {\n    return files.next();\n  }\n  return null;\n}\n\n/**\n * Retrieves the status of a file from Gemini.\n *\n * @param {string} fileUri - The URI of the file in Gemini.\n * @return {Object} The file object from Gemini.\n */\nfunction getFileFromGemini(fileUri) {\n  const response = UrlFetchApp.fetch(`${fileUri}?key=${apiKey}`);\n  return JSON.parse(response.getContentText());\n}\n--- END FILE: _25157154411.md ---\n\n--- START FILE: _25157155013.md ---\nOf course. Based on the provided `Autologos_Core_Logic_v1.12.alang` file, here is a breakdown of what this system is and how you would get it to run as a bootstrapped, LLM-orchestrated process manager.\n\n### **My Findings from the ALang File**\n\nThe file `Autologos_Core_Logic_v1.12.alang` is not a program that can be executed directly. It is a **high-level logic specification** that defines the behavior of a sophisticated AI system. To run it, you need a specific **runtime environment** or **orchestrator** that can interpret this logic and connect it to real-world services like LLMs, tools, and user interfaces.\n\nThe ALang code defines a complete, event-driven architecture for process management, including:\n*   **State Management:** Tracking system status, project artifacts, and session data (`sys.*`, `session.*`, `proj.*`).\n*   **Command Handling:** Parsing user input and dispatching to specific procedures (`OnUserInput`, `DispatchUserCommand`).\n*   **Phase-Based Project Execution:** Moving a project through distinct phases like `PHASE_IDEA_FORMULATION`, `PHASE_PLANNING`, and `PHASE_TASK_EXECUTION`.\n*   **LLM-Powered Generation & QA:** Using LLMs to generate content, summarize artifacts, and perform multi-stage quality assurance (`SAFE_GENERATE_CONTENT`, `PerformProductQA`).\n*   **System Self-Evolution:** A mechanism to analyze its own performance and propose changes to its core logic (`ExecuteSystemQAAndEvolutionCycle`).\n\n### **How to Run the System: The Required Architecture**\n\nTo bring this ALang logic to life, you would need to build or use an orchestrator that provides the following components. This orchestrator would act as the \"engine\" that runs the \"software\" defined in the `.alang` file.\n\n1.  **ALang Interpreter:** A core component that parses and executes the Lisp-like syntax of the `.alang` file.\n2.  **Orchestration Kernel:** An event loop that listens for triggers (like user input or tool completion) and calls the appropriate ALang procedures (e.g., `OnUserInput`, `OnToolSuccess`).\n3.  **Primitive Host Implementations:** Concrete code (e.g., in Python) that implements the functions declared with `DEFINE_PRIMITIVE`. This is the bridge from the abstract logic to the real world. Key primitives you would need to implement include:\n    *   `INVOKE_CORE_LLM_GENERATION`: Connects to an LLM API (like Gemini).\n    *   `INVOKE_TOOL_ASYNC_WITH_CALLBACKS`: Manages calls to external tools (e.g., a web browser tool).\n    *   `READ_CONTENT`/`WRITE_CONTENT_TO_ARTIFACT`: Manages an in-memory or on-disk data store for \"artifacts\".\n    *   `SET_STATE`/`GET_STATE`: Interacts with a state management dictionary or database.\n    *   `OUTPUT_TO_USER_BUFFER`: Sends messages back to the user interface.\n4.  **User Interface (UI) Gateway:** A simple command-line interface (CLI) or a more complex web UI that handles the input/output between the user and the Orchestration Kernel.\n\n### **The Bootstrapping and Operational Flow**\n\nHere is the step-by-step process of how the system would bootstrap and run:\n\n**1. Bootstrapping Sequence:**\n\n*   **Step 1: Orchestrator Start-up:** You launch the main orchestrator program (e.g., `python orchestrator.py`).\n*   **Step 2: Load Core Logic:** The orchestrator reads the `Autologos_Core_Logic_v1.12.alang` file into memory. The ALang Interpreter parses the procedures and symbols.\n*   **Step 3: System Initialization:** The orchestrator triggers the `OnSystemInit` event.\n*   **Step 4: Execute `OnSystemInit`:** The interpreter runs the `OnSystemInit` procedure from the ALang file. This sets the initial system state, creates a session \"conceptual model,\" and loads the persistent knowledge base and evolution backlog from their respective `.json` files.\n*   **Step 5: Await Input:** The system is now bootstrapped, in an `IDLE` state, and waiting for the first user command.\n\n**2. Example Operational Flow:**\n\nLet's say the user wants to start a new project.\n\n1.  **User Input:** The user types `START \"Create a marketing plan for a new coffee shop\"` into the UI.\n2.  **Event Trigger:** The Orchestrator receives this text and triggers the `OnUserInput` event.\n3.  **ALang Execution:** The interpreter executes the `OnUserInput` procedure, which in turn calls `ParseUserCommand` (using an LLM to structure the input) and then `DispatchUserCommand`.\n4.  **Command Handling:** `DispatchUserCommand` identifies the `START` command and calls `HandleStartCommand`. This procedure initializes the project state.\n5.  **Phase Execution:** The system then proceeds to the first project phase, `PHASE_IDEA_FORMULATION`, and calls `ExecutePhaseIdeaFormulation`.\n6.  **LLM Generation & QA:** This procedure calls `SAFE_GENERATE_CONTENT`. The underlying Python implementation of this primitive sends a request to an LLM using the `prompt_generate_pattern_ideas.txt` template. The LLM generates ideas, which are then checked by a follow-up LLM call for quality assurance (`PROMPT_TEMPLATE_META_COGNITIVE_QA`).\n7.  **Await User Feedback:** The generated ideas are presented to the user, and the system state is set to `AWAIT_OK_REVISE_PHASE_ARTIFACT`, pausing the process until the user types `OK` or `NO \"The ideas are too generic\"`.\n\nThis cycle of **Input -> ALang Logic -> LLM/Tool Call -> State Change -> Output** continues, allowing the system to manage complex, multi-step processes autonomously while remaining directed by user feedback and its own internal logic.\n--- END FILE: _25157155013.md ---"
  },
  {
    "iteration": 1,
    "productSummary": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:00:00.000Z\nprocessing_mode: expansive\ninitial...",
    "status": "Iteration 1 complete",
    "timestamp": "3:54:16 PM",
    "fullProduct": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:00:00.000Z\nprocessing_mode: expansive\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n---\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\nprocessing_mode: convergent\ninitial_prompt_summary: \\\"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md ---\\n---\\ngeneration_timestamp: 2025-06-06T09...\\\"\\nfinal_iteration_count: 1\\nmax_iterations_setting: 10\\nmodel_configuration:\\n  model_name: 'gemini-2.5-flash-preview-04-17'\\n  temperature: 0.00\\n  top_p: 0.87\\n  top_k: 4\\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\\n---\\n\\n```\\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\\n;; Autologos_Core_Logic.alang v1.12\\n;; Specification Version: ALANG_SPEC_V1.0\\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\\n;; Core behavior of the Autologos system in ALang.\\n\\n;; --- Section 0: System Config & Metadata ---\\n\\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\\n\\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\\n(SET_STATE sys.current_mode \\\"IDLE\\\")\\n(SET_STATE sys.error_level \\\"NONE\\\")\\n(SET_STATE sys.error_message NIL)\\n(SET_STATE sys.evolution_backlog_handle \\\"Autologos/Evolution_Backlog.json\\\")\\n(SET_STATE sys.knowledge_base_handle \\\"Autologos/Persistent_Knowledge_Base.json\\\")\\n(SET_STATE sys.evolution_trigger_pending FALSE)\\n(SET_STATE sys.system_qa_status \\\"IDLE\\\")\\n(SET_STATE session.qa_output_verbosity \\\"CONCISE\\\")\\n(SET_STATE session.output_detail \\\"STANDARD\\\")\\n(SET_STATE session.loop_stack (LIST_CREATE))\\n(SET_STATE session.conceptual_model_handle NIL)\\n(SET_STATE session.pending_user_action_details NIL)\\n(SET_STATE session.last_search_results NIL)\\n(SET_STATE session.system_qa_context NIL)\\n(SET_STATE sys.proposed_changes_handle NIL)\\n\\n;; --- External Component Dependencies ---\\n\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \\\"prompt_generate_pattern_ideas.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \\\"prompt_product_definition.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \\\"prompt_generate_task_list.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \\\"prompt_execute_task.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \\\"prompt_compile_draft.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \\\"prompt_project_summary.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \\\"prompt_qa_self_critique.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \\\"prompt_qa_divergent_exploration.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \\\"prompt_qa_red_teaming.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \\\"prompt_qa_external_review.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \\\"prompt_parse_command.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \\\"prompt_summarize_artifact.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \\\"prompt_perform_query.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \\\"prompt_serialize_alang_core.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \\\"prompt_meta_cognitive_qa.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \\\"prompt_self_correction.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \\\"prompt_enhance_prompt.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \\\"prompt_analyze_for_conceptual_model_update.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \\\"prompt_pka_consent.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \\\"prompt_analyze_backlog_for_focus.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \\\"prompt_analyze_qa_for_directive_changes.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \\\"prompt_analyze_data_for_patterns.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \\\"prompt_analyze_qa_report_for_revisions.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \\\"prompt_analyze_tool_error.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \\\"prompt_analyze_feedback_for_revision.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \\\"prompt_analyze_tool_error_user_explanation.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \\\"prompt_analyze_tool_error_resolution_input.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \\\"prompt_summarize_conceptual_model.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \\\"prompt_analyze_conceptual_model_for_phi.txt\\\")\\n\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \\\"constraints_idea_generation.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \\\"constraints_product_definition.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \\\"constraints_planning.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \\\"constraints_task_execution.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \\\"constraints_final_review.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \\\"constraints_summary.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \\\"constraints_qa_critique.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \\\"constraints_pattern_identification.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \\\"constraints_valid_alang_syntax.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \\\"constraints_conceptual_model_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \\\"constraints_pka_schema_registry.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \\\"constraints_proposed_changes_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \\\"constraints_identified_patterns_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \\\"constraints_revision_plan_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \\\"constraints_tool_error_analysis_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \\\"constraints_conceptual_model_update_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \\\"constraints_tool_error_resolution_input_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \\\"constraints_conceptual_model_summary_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \\\"constraints_phi_analysis_structure.json\\\")\\n\\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\\n\\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" (STRING_CONCAT \\\"No help found for: \\\" commandName)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \\\"=\\\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" resultMap)))))\\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \\\"text_summary_or_full\\\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\\\"content\\\" content) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"summarization\\\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))))))\\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PERFORM_QUERY) (\\\"query_type\\\" queryType) (\\\"query_value\\\" queryValue) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"query_answering\\\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))))\\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \\\"args\\\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PKA_CONSENT) (\\\"purpose\\\" purpose_description) (\\\"session_model_context\\\" model)) (GET_LLM_PARAMS_FOR_TASK \\\"prompt_generation\\\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))))\\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \\\"has_issues\\\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \\\"confidence_score\\\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"log_issues\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"details\\\" (MAP_GET_VALUE qaAssessment \\\"details\\\")) (\\\"confidence\\\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"CRITICAL\\\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"MAJOR\\\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" target_artifact_handle) (\\\"qa_report_handle\\\" (CREATE_EMPTY_ARTIFACT \\\"temp_qa_report\\\")) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_qa_passed\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"confidence\\\" confidence)))) (RETURN_STATUS status))))\\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SELF_CORRECTION) (\\\"original_text\\\" generated_text) (\\\"qa_findings\\\" qaAssessment) (\\\"constraints\\\" constraints) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"self_correction\\\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" \\\"Conceptual model summary placeholder.\\\"))))\\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"phi_score\\\" 0.5))))))\\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"error_analysis_and_correction\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \\\"can_self_correct\\\") (LET ((retryContext (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"success_proc_name\\\" (MAP_GET_VALUE context \\\"success_proc_name\\\")) (\\\"failure_proc_name\\\" (MAP_GET_VALUE context \\\"failure_proc_name\\\")) (\\\"pass_through_context\\\" (MAP_GET_VALUE context \\\"pass_through_context\\\")) (\\\"original_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (\\\"original_params\\\" (MAP_GET_VALUE context \\\"original_params\\\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \\\"suggested_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (MAP_GET_VALUE analysisData \\\"suggested_params\\\" (MAP_GET_VALUE context \\\"original_params\\\")) (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"new_job_id\\\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"ERROR: \\\" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; Primitive Declarations\\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\\n(DEFINE_PRIMITIVE IS_NUMBER (str))\\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\\n(DEFINE_PRIMITIVE ADD (num1 num2))\\n(DEFINE_PRIMITIVE SUB (num1 num2))\\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE NOT (bool))\\n(DEFINE_PRIMITIVE IS_NIL (value))\\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\\n(DEFINE_PRIMITIVE GT (num1 num2))\\n(DEFINE_PRIMITIVE LT (num1 num2))\\n(DEFINE_PRIMITIVE GTE (num1 num2))\\n(DEFINE_PRIMITIVE NEQ (val1 val2))\\n(DEFINE_PRIMITIVE EQ (val1 val2))\\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\\n(DEFINE_PRIMITIVE SEQ (expression ...))\\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\\n(DEFINE_PRIMITIVE STRING_TRIM (text))\\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \\\"has_substantive_issues\\\" FALSE)) (RETURN_STATUS TRUE))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE)))))\\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n\\n;; --- Section 2: Event Handler Procedures ---\\n\\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \\\"IDLE\\\") (SET_STATE sys.error_level \\\"NONE\\\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \\\"IDLE\\\") (SET_STATE session.qa_output_verbosity \\\"CONCISE\\\") (SET_STATE session.output_detail \\\"STANDARD\\\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Could not understand input.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \\\"tool_id\\\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \\\"pass_through_context\\\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" (MAP_GET_VALUE error_details \\\"message\\\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \\\"tool_id\\\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"browse\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read browsed content.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Browse error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \\\"json_map\\\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \\\"is_valid\\\") TRUE) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" \\\"Reference validated.\\\" NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" (STRING_CONCAT \\\"Reference validation failed: \\\" (MAP_GET_VALUE report \\\"reason\\\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"reference_validator\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read validation report.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Reference validation error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model_handle\\\" (GET_STATE session.conceptual_model_handle)) (\\\"output_format\\\" \\\"user_explanation\\\")) (GET_LLM_PARAMS_FOR_TASK \\\"error_explanation\\\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \\\"Could not generate explanation.\\\")))) (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" (STRING_CONCAT \\\"Error in \\\" tool_id \\\". Analysis: \\\" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"`INPUT` fix or other instructions.\\\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"job_id\\\" job_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context))) (SET_STATE session.pending_user_action \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n\\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\\n\\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \\\"command\\\"))) (IF (EQ commandName \\\"START\\\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"HELP\\\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"EVOLVE\\\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SAVE_SYSTEM\\\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \\\"BROWSE\\\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OK\\\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \\\"NO\\\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"INPUT\\\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"END\\\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \\\"LOOP_PROJECT_RESTART\\\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \\\"SET_SESSION_PREFERENCE\\\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"STOP_LOOP\\\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \\\"OUTPUT\\\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SUMMARIZE\\\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"QUERY\\\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OUTPUT_BACKLOG\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"PROMOTE_TO_PKA\\\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SEARCH_PKA\\\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_QA_OUTPUT_VERBOSITY\\\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_OUTPUT_DETAIL\\\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"LOOP\\\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SYSTEM_QA\\\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"START\\\" TRUE) (\\\"HELP\\\" TRUE) (\\\"EVOLVE\\\" TRUE) (\\\"SAVE_SYSTEM\\\" TRUE) (\\\"BROWSE\\\" TRUE) (\\\"OK\\\" TRUE) (\\\"NO\\\" TRUE) (\\\"INPUT\\\" TRUE) (\\\"END\\\" TRUE) (\\\"LOOP_PROJECT_RESTART\\\" TRUE) (\\\"SET_SESSION_PREFERENCE\\\" TRUE) (\\\"STOP_LOOP\\\" TRUE) (\\\"OUTPUT\\\" TRUE) (\\\"SUMMARIZE\\\" TRUE) (\\\"QUERY\\\" TRUE) (\\\"OUTPUT_BACKLOG\\\" TRUE) (\\\"PROMOTE_TO_PKA\\\" TRUE) (\\\"SEARCH_PKA\\\" TRUE) (\\\"SET_QA_OUTPUT_VERBOSITY\\\" TRUE) (\\\"SET_OUTPUT_DETAIL\\\" TRUE) (\\\"LOOP\\\" TRUE) (\\\"SYSTEM_QA\\\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \\\"NO\\\") (EQ (STRING_UPPER raw_input) \\\"REVISE\\\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \\\"AWAIT_END_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_RESTART_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"user_backlog_selection_input\\\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"ai_focus_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_VERSION_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"version_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \\\"tool_id\\\"))) (LET ((context (MAP_GET_VALUE details \\\"original_context\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \\\"original_input\\\") (MAP_GET_VALUE context \\\"original_params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (IF (EQ (GET_STATE session.last_user_response) \\\"INPUT\\\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \\\"error_details\\\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \\\"input\\\") (MAP_GET_VALUE newInputParams \\\"params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \\\"NO\\\") (EQ (GET_STATE session.last_user_response) \\\"REVISE\\\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_REVISION_REVIEW\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \\\"constraints_handle\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_revision\\\") (\\\"artifact_handle\\\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_revision\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \\\"last_revision_status\\\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((phaseId (MAP_GET_VALUE details \\\"phase\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId) (\\\"feedback\\\" (GET_STATE session.last_conceptual_model_handle)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \\\"SYSTEM_ERROR\\\" (STRING_CONCAT \\\"Unhandled pending action: \\\" action_key)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \\\"PROJECT_TERMINATION\\\" \\\"Project terminating.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project terminated.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \\\"PROJECT_RESTART\\\" \\\"Project restarting.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project state discarded. Restarting.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Description required.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_START\\\" (STRING_CONCAT \\\"START: \\\" desc) \\\"AI_ACKNOWLEDGE_INTENT\\\" (STRING_CONCAT \\\"START: '\\\" desc \\\"'\\\")) (LET ((newId (GENERATE_UNIQUE_ID \\\"PROJ\\\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \\\"PHASE_IDEA_FORMULATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"EVOLVE requires suggestion.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_EVOLVE\\\" (STRING_CONCAT \\\"EVOLVE: \\\" suggestion) \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"EVOLVE logged.\\\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \\\"USER_SUGGESTION\\\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SAVE_SYSTEM\\\" \\\"SAVE SYSTEM received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SAVE SYSTEM received.\\\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \\\"temp_alang_code\\\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\\\"current_alang_handle\\\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\\\"session_conceptual_model_summary\\\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \\\"text\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \\\"SHA256\\\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" content NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_USER_ACTION\\\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Output Backlog? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \\\"browse\\\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \\\"url\\\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \\\"browse\\\" url NIL \\\"HandleBrowseResult\\\" \\\"HandleBrowseError\\\" (MAP_CREATE (\\\"tool_id\\\" \\\"browse\\\") (\\\"original_context\\\" NIL) (\\\"original_input\\\" url) (\\\"original_params\\\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Unknown command: \\\" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \\\"OK\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"NO\\\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"INPUT\\\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"End project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_END_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Restart project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_RESTART_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \\\"PKA\\\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\\\"type\\\" queryType) (\\\"value\\\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\\\"keywords\\\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"No PKAs found.\\\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (STRING_CONCAT \\\"- ID: \\\" (GET_HANDLE_METADATA handle \\\"id\\\") \\\" Title: \\\" (GET_HANDLE_METADATA handle \\\"title\\\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"CONCISE\\\") (NEQ level \\\"VERBOSE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"MINIMAL\\\") (NEQ level \\\"STANDARD\\\") (NEQ level \\\"EXHAUSTIVE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SYSTEM_QA\\\" \\\"SYSTEM_QA received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SYSTEM_QA received. Initiating cycle.\\\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\\n\\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \\\"PHASE_INIT\\\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \\\"PHASE_IDEA_FORMULATION\\\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \\\"PHASE_PRODUCT_DEFINITION\\\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \\\"PHASE_PLANNING\\\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \\\"PHASE_TASK_EXECUTION\\\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \\\"PHASE_FINAL_REVIEW\\\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \\\"PHASE_COMPLETION_SUMMARY\\\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"PHASE_INIT\\\" TRUE) (\\\"PHASE_IDEA_FORMULATION\\\" TRUE) (\\\"PHASE_PRODUCT_DEFINITION\\\" TRUE) (\\\"PHASE_PLANNING\\\" TRUE) (\\\"PHASE_TASK_EXECUTION\\\" TRUE) (\\\"PHASE_FINAL_REVIEW\\\" TRUE) (\\\"PHASE_COMPLETION_SUMMARY\\\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \\\"PatternIdeasDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \\\"pattern_ideas\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_IDEA_FORMULATION\\\") (\\\"artifact_handle\\\" ideaHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \\\"ProductDefinitionDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"pattern_ideas_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \\\"product_definition\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PRODUCT_DEFINITION\\\") (\\\"artifact_handle\\\" prodDefHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \\\"TaskListDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"product_definition_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \\\"task_list\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PLANNING\\\") (\\\"artifact_handle\\\" taskListHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \\\"json_map_list\\\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \\\"id\\\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \\\"description\\\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \\\"Task_\\\" taskId \\\"_Output\\\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\\\"task_id\\\" taskId) (\\\"task_description\\\" taskDesc) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_TASK_EXECUTION\\\") (\\\"artifact_handle\\\" taskArtifactHandle) (\\\"task_id\\\" taskId))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \\\"CompiledProjectDraft\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"final_draft\\\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \\\"final_draft\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_FINAL_REVIEW\\\") (\\\"artifact_handle\\\" draftHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \\\"ProjectSummary\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\\\"project_id\\\" (GET_STATE proj.id)) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"tau_project_log\\\" (GET_STATE proj.tau_project_log)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"project_summary\\\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \\\"project_summary\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n\\n;; --- Section 5: QA Procedures ---\\n\\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"structured_map\\\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\\\"qa_report\\\" qaReport) (\\\"artifact_content\\\" artifactContent) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints)) (GET_LLM_PARAMS_FOR_TASK \\\"revision_planning\\\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"self_correct\\\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \\\"details\\\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"user_review\\\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" NIL))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\\\"artifact_content\\\" artifactContent) (\\\"user_feedback\\\" feedback_text) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints) (\\\"previous_qa_context\\\" context_details)) (GET_LLM_PARAMS_FOR_TASK \\\"feedback_based_revision\\\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (GET_STATUS genResult)) (\\\"data\\\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\\\"qa_report\\\" qaReport) (\\\"session_model\\\" sessionModel) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \\\"directive_change_proposal\\\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \\\"proposed_changes\\\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \\\"application/json\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \\\"IDLE\\\") (EQ currentStatus \\\"NEW\\\")) (SEQ (SET_STATE sys.system_qa_status \\\"SELECTING_BACKLOG_FOCUS\\\") (SET_STATE session.system_qa_context (MAP_CREATE (\\\"step\\\" \\\"SELECTING_BACKLOG_FOCUS\\\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"SELECTING_BACKLOG_FOCUS\\\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"ai_proposed_focus\\\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \\\"AWAITING_FOCUS_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \\\"AWAITING_FOCUS_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"ai_focus_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"AWAITING_USER_PRIORITY\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \\\"AWAITING_USER_PRIORITY\\\") (LET ((userInput (MAP_GET_VALUE qaContext \\\"user_backlog_selection_input\\\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \\\",\\\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"user_selected_focus_ids\\\" selectedItems))\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PERFORMING_QA\\\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PROPOSING_VERSION\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PROPOSING_VERSION\\\") (LET ((changesSummary \\\"Summary of changes.\\\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"proposed_version_data\\\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \\\"AWAITING_VERSION_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_VERSION_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \\\"AWAITING_VERSION_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"version_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"FINALIZING\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"FINALIZING\\\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\\\"focus\\\" \\\"system_evolution\\\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \\\"CONCEPTUAL_ANALYSIS\\\" \\\"Φ analysis complete.\\\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\\\"backlog_content\\\" backlog) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"backlog_analysis\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \\\"ADDRESSED\\\" (STRING_CONCAT \\\"Addressed in v\\\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\\n\\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \\\"session_conceptual_model_handle\\\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"prompt_text\\\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \\\"general_generation\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \\\"text/markdown\\\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\\\"generated_text\\\" generatedText)\\ (\\\"prompt_context\\\" prompt_context_map)\\ (\\\"identified_patterns\\\" patterns)\\ (\\\"session_model_handle\\\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \\\"meta_cognitive_qa\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ )))))))))))\\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\\\"context\\\" context_map) (\\\"session_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \\\"pattern_identification\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \\\"text\\\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\\\"base_prompt\\\" basePrompt)\\ (\\\"context\\\" context_map)\\ (\\\"patterns\\\" identified_patterns)\\ (\\\"session_model\\\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \\\"prompt_enhancement\\\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PARSE_COMMAND) (\\\"user_text\\\" raw_text) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"command_parsing\\\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\\\"raw_input\\\" raw_input) (\\\"tool_id\\\" tool_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"tool_input_parsing\\\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \\\"EBL\\\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \\\"Suggestion: \\\" (SUBSTRING suggestionText 0 50) \\\"...\\\") suggestionText source \\\"NEW\\\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \\\"id\\\") NIL NIL NIL NIL (STRING_CONCAT \\\"Reinforced by \\\" source) TRUE) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_GET_VALUE similarItem \\\"id\\\")))))))\\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\\\"rationale\\\" rationale) (\\\"source\\\" \\\"user_promotion\\\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \\\"USER_CONSENT_GRANTED\\\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \\\"USER_CONSENT_GRANTED\\\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\n\\n;; --- Section 7: ALANG Status Codes ---\\n\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\\n\\n;; --- Section 8: End of Core Logic ---\\n```\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```\n--- END FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n\n--- START FILE: _25157154411.md ---\n// See https://developers.google.com/apps-script/guides/properties\n// for instructions on how to set the API key.\nconst apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');\n\nfunction main() {\n  // These files must be in your Google Drive.\n  const files = [\n    uploadToGemini('Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md'),\n  ];\n\n  const generationConfig = {\n    temperature: 1,\n    topP: 0.95,\n    topK: 64,\n    maxOutputTokens: 65536,\n    responseMimeType: 'text/plain',\n  };\n\n  const data = {\n    generationConfig,\n    contents: [\n      {\n        role: 'user',\n        parts: [\n          { fileData: { fileUri: files[0].uri, mimeType: files[0].mimeType } },\n        ],\n      },\n      {\n        role: 'model',\n        parts: [\n          { text: '**Processing the Request**\n\nI'm currently focused on the user's request, which centers on a single file. It seems to be an ALang script, and given the naming convention, I suspect it's the core logic of the Autologos product. Further analysis is needed to confirm the script's specific functionality within the broader context.\n\n\n**Analyzing File Content**\n\nI've examined the file's structure. The `generation_timestamp` and `convergent` mode are noted.  The core ALang code is extensive, defining system components, from utilities to QA. Version 1.12 appears robust and complete.  It seems to implement the complete `Autologos` system. I'm focusing on parsing the logic flow.\n\n\n**Reviewing for Finality**\n\nI'm now focusing on the 'convergent' nature of this input. The system's design suggests final validation is crucial. I'm verifying the internal consistency of the ALang code within the `Autologos_Core_Logic_v1.12.alang` block, checking for potential errors or inconsistencies that might have escaped prior convergence steps. The goal is to ensure this version is truly a final, error-free product. My next step will be to confirm its structure.\n\n\n**Verifying Input Structure**\n\nI'm now focusing on the metadata structure within the file. The \"convergent\" designation is important, meaning I must ensure the input represents a final, coherent state. I'm verifying that the file's header is consistent with the ALang code block. The timestamp and processing mode must align with the content, and the version number must be accurate. My goal is to ensure a fully functional system for the user.\n\n\n**Verifying Final Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent.  The \"CONVERGED:\" marker suggests successful processing by a previous step.  My final action is to output a clean version. I'm verifying the input structure for final confirmation.\n\n\n**Validating Final Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent, ending with the standard marker. However, a preliminary line (`CONVERGED:`) suggests the original was generated by a prior process. My final action is to output a clean version, but the clean up of the source code is also necessary.\n\n\n**Validating Structure and Content**\n\nI'm now focusing on the structure and content.  The input's \"convergent\" designation necessitates rigorous validation.  I've identified an anomaly: the \"CONVERGED:\" marker. My next step is to remove this line. Afterwards, I'll ensure the final section comment is in its correct location. My task is to verify an error-free final product.\n\n\n**Confirming the Output**\n\nI'm now focusing on the final processing step. I've reviewed the file content and determined the structure is sound. The included ALang code appears complete and internally consistent, but the \"CONVERGED:\" marker suggests a previous processing step. My next step will be to verify the contents.\n\nI've examined the file's structure. It starts with metadata, followed by an ALang code block, and ends with markers. The structure is consistent. Now, the final structure looks correct.\n\nI now focus on creating a final output. I am preparing the ALang script, as requested. I've reviewed the core ALang code. After final inspection, I will finalize. The output should be a clean ALang file, without the extraneous processing marker.\n\nNow I am creating the output and cleaning the final structure. The file will be cleaned, and the system is almost ready to go!\n\n\n**Validating Final Output**\n\nI've examined the file's structure. It starts with metadata, followed by an ALang code block, and ends with markers. The structure is consistent. Now, the final structure looks correct.\n\nI now focus on creating a final output. I am preparing the ALang script, as requested. I've reviewed the core ALang code. After final inspection, I will finalize. The output should be a clean ALang file, without the extraneous processing marker.\n\nNow I am creating the output and cleaning the final structure. The file will be cleaned, and the system is almost ready to go!\n\n\n**Cleaning Up The Output**\n\nI'm now removing the extraneous 'CONVERGED:' line. It's an artifact from a previous generation step that needs to be cleaned up. The ';; --- Section 8: End of Core Logic ---' marker will be placed appropriately. The user can now safely view the output!\n\n\n**Finalizing the Output**\n\nI'm now focusing on a critical clean-up step, removing the `CONVERGED:` marker from the ALang code block. Additionally, I'll move the final comment line to its correct location. The objective is to produce a valid, error-free ALang script suitable for use by the user. I've re-examined the source and finalized a plan. The `CONVERGED:` line will now be omitted.\n\n\n**Verifying the Output**\n\nI'm now focusing on the final step of verifying the output. I've corrected the code and removed the extraneous \"CONVERGED:\" marker. My next step will be to finalize the entire output, which should be the clean ALang script. The output is ready for use.\n\n\n' },\n          { text: '```markdown\n---\ngeneration_timestamp: 2025-06-06T15:35:08.812Z\nprocessing_mode: convergent\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\\n---\\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\\nprocessing_mode: convergent\\ninitial_prompt_summary: \\\"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md ---\\n---\\ngeneration_timestamp: 2025-06-06T09...\\\"\\nfinal_iteration_count: 1\\nmax_iterations_setting: 10\\nmodel_configuration:\\n  model_name: 'gemini-2.5-flash-preview-04-17'\\n  temperature: 0.00\\n  top_p: 0.87\\n  top_k: 4\\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\\n---\\n\\n```\\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\\n;; Autologos_Core_Logic.alang v1.12\\n;; Specification Version: ALANG_SPEC_V1.0\\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\\n;; Core behavior of the Autologos system in ALang.\\n\\n;; --- Section 0: System Config & Metadata ---\\n\\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\\n\\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\\n(SET_STATE sys.current_mode \\\"IDLE\\\")\\n(SET_STATE sys.error_level \\\"NONE\\\")\\n(SET_STATE sys.error_message NIL)\\n(SET_STATE sys.evolution_backlog_handle \\\"Autologos/Evolution_Backlog.json\\\")\\n(SET_STATE sys.knowledge_base_handle \\\"Autologos/Persistent_Knowledge_Base.json\\\")\\n(SET_STATE sys.evolution_trigger_pending FALSE)\\n(SET_STATE sys.system_qa_status \\\"IDLE\\\")\\n(SET_STATE session.qa_output_verbosity \\\"CONCISE\\\")\\n(SET_STATE session.output_detail \\\"STANDARD\\\")\\n(SET_STATE session.loop_stack (LIST_CREATE))\\n(SET_STATE session.conceptual_model_handle NIL)\\n(SET_STATE session.pending_user_action_details NIL)\\n(SET_STATE session.last_search_results NIL)\\n(SET_STATE session.system_qa_context NIL)\\n(SET_STATE sys.proposed_changes_handle NIL)\\n\\n;; --- External Component Dependencies ---\\n\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \\\"prompt_generate_pattern_ideas.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \\\"prompt_product_definition.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \\\"prompt_generate_task_list.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \\\"prompt_execute_task.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \\\"prompt_compile_draft.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \\\"prompt_project_summary.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \\\"prompt_qa_self_critique.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \\\"prompt_qa_divergent_exploration.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \\\"prompt_qa_red_teaming.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \\\"prompt_qa_external_review.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \\\"prompt_parse_command.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \\\"prompt_summarize_artifact.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \\\"prompt_perform_query.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \\\"prompt_serialize_alang_core.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \\\"prompt_meta_cognitive_qa.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \\\"prompt_self_correction.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \\\"prompt_enhance_prompt.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \\\"prompt_analyze_for_conceptual_model_update.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \\\"prompt_pka_consent.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \\\"prompt_analyze_backlog_for_focus.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \\\"prompt_analyze_qa_for_directive_changes.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \\\"prompt_analyze_data_for_patterns.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \\\"prompt_analyze_qa_report_for_revisions.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \\\"prompt_analyze_tool_error.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \\\"prompt_analyze_feedback_for_revision.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \\\"prompt_analyze_tool_error_user_explanation.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \\\"prompt_analyze_tool_error_resolution_input.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \\\"prompt_summarize_conceptual_model.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \\\"prompt_analyze_conceptual_model_for_phi.txt\\\")\\n\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \\\"constraints_idea_generation.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \\\"constraints_product_definition.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \\\"constraints_planning.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \\\"constraints_task_execution.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \\\"constraints_final_review.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \\\"constraints_summary.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \\\"constraints_qa_critique.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \\\"constraints_pattern_identification.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \\\"constraints_valid_alang_syntax.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \\\"constraints_conceptual_model_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \\\"constraints_pka_schema_registry.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \\\"constraints_proposed_changes_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \\\"constraints_identified_patterns_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \\\"constraints_revision_plan_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \\\"constraints_tool_error_analysis_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \\\"constraints_conceptual_model_update_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \\\"constraints_tool_error_resolution_input_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \\\"constraints_conceptual_model_summary_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \\\"constraints_phi_analysis_structure.json\\\")\\n\\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\\n\\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" (STRING_CONCAT \\\"No help found for: \\\" commandName)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \\\"=\\\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" resultMap)))))\\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \\\"text_summary_or_full\\\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\\\"content\\\" content) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"summarization\\\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))))))\\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PERFORM_QUERY) (\\\"query_type\\\" queryType) (\\\"query_value\\\" queryValue) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"query_answering\\\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))))\\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \\\"args\\\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PKA_CONSENT) (\\\"purpose\\\" purpose_description) (\\\"session_model_context\\\" model)) (GET_LLM_PARAMS_FOR_TASK \\\"prompt_generation\\\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))))\\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \\\"has_issues\\\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \\\"confidence_score\\\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"log_issues\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"details\\\" (MAP_GET_VALUE qaAssessment \\\"details\\\")) (\\\"confidence\\\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"CRITICAL\\\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"MAJOR\\\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" target_artifact_handle) (\\\"qa_report_handle\\\" (CREATE_EMPTY_ARTIFACT \\\"temp_qa_report\\\")) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_qa_passed\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"confidence\\\" confidence)))) (RETURN_STATUS status))))\\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SELF_CORRECTION) (\\\"original_text\\\" generated_text) (\\\"qa_findings\\\" qaAssessment) (\\\"constraints\\\" constraints) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"self_correction\\\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" \\\"Conceptual model summary placeholder.\\\"))))\\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"phi_score\\\" 0.5))))))\\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"error_analysis_and_correction\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \\\"can_self_correct\\\") (LET ((retryContext (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"success_proc_name\\\" (MAP_GET_VALUE context \\\"success_proc_name\\\")) (\\\"failure_proc_name\\\" (MAP_GET_VALUE context \\\"failure_proc_name\\\")) (\\\"pass_through_context\\\" (MAP_GET_VALUE context \\\"pass_through_context\\\")) (\\\"original_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (\\\"original_params\\\" (MAP_GET_VALUE context \\\"original_params\\\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \\\"suggested_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (MAP_GET_VALUE analysisData \\\"suggested_params\\\" (MAP_GET_VALUE context \\\"original_params\\\")) (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"new_job_id\\\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"ERROR: \\\" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; Primitive Declarations\\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\\n(DEFINE_PRIMITIVE IS_NUMBER (str))\\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\\n(DEFINE_PRIMITIVE ADD (num1 num2))\\n(DEFINE_PRIMITIVE SUB (num1 num2))\\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE NOT (bool))\\n(DEFINE_PRIMITIVE IS_NIL (value))\\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\\n(DEFINE_PRIMITIVE GT (num1 num2))\\n(DEFINE_PRIMITIVE LT (num1 num2))\\n(DEFINE_PRIMITIVE GTE (num1 num2))\\n(DEFINE_PRIMITIVE NEQ (val1 val2))\\n(DEFINE_PRIMITIVE EQ (val1 val2))\\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\\n(DEFINE_PRIMITIVE SEQ (expression ...))\\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\\n(DEFINE_PRIMITIVE STRING_TRIM (text))\\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \\\"has_substantive_issues\\\" FALSE)) (RETURN_STATUS TRUE))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE)))))\\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n\\n;; --- Section 2: Event Handler Procedures ---\\n\\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \\\"IDLE\\\") (SET_STATE sys.error_level \\\"NONE\\\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \\\"IDLE\\\") (SET_STATE session.qa_output_verbosity \\\"CONCISE\\\") (SET_STATE session.output_detail \\\"STANDARD\\\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Could not understand input.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \\\"tool_id\\\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \\\"pass_through_context\\\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" (MAP_GET_VALUE error_details \\\"message\\\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \\\"tool_id\\\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"browse\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read browsed content.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Browse error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \\\"json_map\\\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \\\"is_valid\\\") TRUE) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" \\\"Reference validated.\\\" NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" (STRING_CONCAT \\\"Reference validation failed: \\\" (MAP_GET_VALUE report \\\"reason\\\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"reference_validator\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read validation report.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Reference validation error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model_handle\\\" (GET_STATE session.conceptual_model_handle)) (\\\"output_format\\\" \\\"user_explanation\\\")) (GET_LLM_PARAMS_FOR_TASK \\\"error_explanation\\\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \\\"Could not generate explanation.\\\")))) (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" (STRING_CONCAT \\\"Error in \\\" tool_id \\\". Analysis: \\\" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"`INPUT` fix or other instructions.\\\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"job_id\\\" job_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context))) (SET_STATE session.pending_user_action \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n\\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\\n\\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \\\"command\\\"))) (IF (EQ commandName \\\"START\\\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"HELP\\\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"EVOLVE\\\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SAVE_SYSTEM\\\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \\\"BROWSE\\\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OK\\\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \\\"NO\\\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"INPUT\\\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"END\\\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \\\"LOOP_PROJECT_RESTART\\\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \\\"SET_SESSION_PREFERENCE\\\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"STOP_LOOP\\\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \\\"OUTPUT\\\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SUMMARIZE\\\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"QUERY\\\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OUTPUT_BACKLOG\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"PROMOTE_TO_PKA\\\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SEARCH_PKA\\\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_QA_OUTPUT_VERBOSITY\\\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_OUTPUT_DETAIL\\\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"LOOP\\\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SYSTEM_QA\\\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"START\\\" TRUE) (\\\"HELP\\\" TRUE) (\\\"EVOLVE\\\" TRUE) (\\\"SAVE_SYSTEM\\\" TRUE) (\\\"BROWSE\\\" TRUE) (\\\"OK\\\" TRUE) (\\\"NO\\\" TRUE) (\\\"INPUT\\\" TRUE) (\\\"END\\\" TRUE) (\\\"LOOP_PROJECT_RESTART\\\" TRUE) (\\\"SET_SESSION_PREFERENCE\\\" TRUE) (\\\"STOP_LOOP\\\" TRUE) (\\\"OUTPUT\\\" TRUE) (\\\"SUMMARIZE\\\" TRUE) (\\\"QUERY\\\" TRUE) (\\\"OUTPUT_BACKLOG\\\" TRUE) (\\\"PROMOTE_TO_PKA\\\" TRUE) (\\\"SEARCH_PKA\\\" TRUE) (\\\"SET_QA_OUTPUT_VERBOSITY\\\" TRUE) (\\\"SET_OUTPUT_DETAIL\\\" TRUE) (\\\"LOOP\\\" TRUE) (\\\"SYSTEM_QA\\\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \\\"NO\\\") (EQ (STRING_UPPER raw_input) \\\"REVISE\\\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \\\"AWAIT_END_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_RESTART_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"user_backlog_selection_input\\\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"ai_focus_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_VERSION_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"version_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \\\"tool_id\\\"))) (LET ((context (MAP_GET_VALUE details \\\"original_context\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \\\"original_input\\\") (MAP_GET_VALUE context \\\"original_params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (IF (EQ (GET_STATE session.last_user_response) \\\"INPUT\\\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \\\"error_details\\\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \\\"input\\\") (MAP_GET_VALUE newInputParams \\\"params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \\\"NO\\\") (EQ (GET_STATE session.last_user_response) \\\"REVISE\\\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_REVISION_REVIEW\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \\\"constraints_handle\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_revision\\\") (\\\"artifact_handle\\\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_revision\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \\\"last_revision_status\\\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((phaseId (MAP_GET_VALUE details \\\"phase\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \\\"SYSTEM_ERROR\\\" (STRING_CONCAT \\\"Unhandled pending action: \\\" action_key)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \\\"PROJECT_TERMINATION\\\" \\\"Project terminating.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project terminated.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \\\"PROJECT_RESTART\\\" \\\"Project restarting.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project state discarded. Restarting.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Description required.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_START\\\" (STRING_CONCAT \\\"START: \\\" desc) \\\"AI_ACKNOWLEDGE_INTENT\\\" (STRING_CONCAT \\\"START: '\\\" desc \\\"'\\\")) (LET ((newId (GENERATE_UNIQUE_ID \\\"PROJ\\\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \\\"PHASE_IDEA_FORMULATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"EVOLVE requires suggestion.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_EVOLVE\\\" (STRING_CONCAT \\\"EVOLVE: \\\" suggestion) \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"EVOLVE logged.\\\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \\\"USER_SUGGESTION\\\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SAVE_SYSTEM\\\" \\\"SAVE SYSTEM received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SAVE SYSTEM received.\\\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \\\"temp_alang_code\\\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\\\"current_alang_handle\\\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\\\"session_conceptual_model_summary\\\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \\\"text\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \\\"SHA256\\\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" content NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_USER_ACTION\\\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Output Backlog? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \\\"browse\\\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \\\"url\\\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \\\"browse\\\" url NIL \\\"HandleBrowseResult\\\" \\\"HandleBrowseError\\\" (MAP_CREATE (\\\"tool_id\\\" \\\"browse\\\") (\\\"original_context\\\" NIL) (\\\"original_input\\\" url) (\\\"original_params\\\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Unknown command: \\\" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \\\"OK\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"NO\\\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"INPUT\\\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"End project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_END_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Restart project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_RESTART_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \\\"PKA\\\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\\\"type\\\" queryType) (\\\"value\\\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\\\"keywords\\\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"No PKAs found.\\\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (STRING_CONCAT \\\"- ID: \\\" (GET_HANDLE_METADATA handle \\\"id\\\") \\\" Title: \\\" (GET_HANDLE_METADATA handle \\\"title\\\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"CONCISE\\\") (NEQ level \\\"VERBOSE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"MINIMAL\\\") (NEQ level \\\"STANDARD\\\") (NEQ level \\\"EXHAUSTIVE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SYSTEM_QA\\\" \\\"SYSTEM_QA received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SYSTEM_QA received. Initiating cycle.\\\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\\n\\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \\\"PHASE_INIT\\\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \\\"PHASE_IDEA_FORMULATION\\\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \\\"PHASE_PRODUCT_DEFINITION\\\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \\\"PHASE_PLANNING\\\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \\\"PHASE_TASK_EXECUTION\\\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \\\"PHASE_FINAL_REVIEW\\\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \\\"PHASE_COMPLETION_SUMMARY\\\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"PHASE_INIT\\\" TRUE) (\\\"PHASE_IDEA_FORMULATION\\\" TRUE) (\\\"PHASE_PRODUCT_DEFINITION\\\" TRUE) (\\\"PHASE_PLANNING\\\" TRUE) (\\\"PHASE_TASK_EXECUTION\\\" TRUE) (\\\"PHASE_FINAL_REVIEW\\\" TRUE) (\\\"PHASE_COMPLETION_SUMMARY\\\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \\\"PatternIdeasDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \\\"pattern_ideas\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_IDEA_FORMULATION\\\") (\\\"artifact_handle\\\" ideaHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \\\"ProductDefinitionDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"pattern_ideas_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \\\"product_definition\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PRODUCT_DEFINITION\\\") (\\\"artifact_handle\\\" prodDefHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \\\"TaskListDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"product_definition_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \\\"task_list\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PLANNING\\\") (\\\"artifact_handle\\\" taskListHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \\\"json_map_list\\\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \\\"id\\\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \\\"description\\\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \\\"Task_\\\" taskId \\\"_Output\\\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\\\"task_id\\\" taskId) (\\\"task_description\\\" taskDesc) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_TASK_EXECUTION\\\") (\\\"artifact_handle\\\" taskArtifactHandle) (\\\"task_id\\\" taskId))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \\\"CompiledProjectDraft\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"final_draft\\\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \\\"final_draft\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_FINAL_REVIEW\\\") (\\\"artifact_handle\\\" draftHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \\\"ProjectSummary\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\\\"project_id\\\" (GET_STATE proj.id)) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"tau_project_log\\\" (GET_STATE proj.tau_project_log)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"project_summary\\\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \\\"project_summary\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n\\n;; --- Section 5: QA Procedures ---\\n\\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"structured_map\\\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\\\"qa_report\\\" qaReport) (\\\"artifact_content\\\" artifactContent) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints)) (GET_LLM_PARAMS_FOR_TASK \\\"revision_planning\\\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"self_correct\\\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \\\"details\\\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"user_review\\\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" NIL))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\\\"artifact_content\\\" artifactContent) (\\\"user_feedback\\\" feedback_text) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints) (\\\"previous_qa_context\\\" context_details)) (GET_LLM_PARAMS_FOR_TASK \\\"feedback_based_revision\\\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (GET_STATUS genResult)) (\\\"data\\\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\\\"qa_report\\\" qaReport) (\\\"session_model\\\" sessionModel) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \\\"directive_change_proposal\\\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \\\"proposed_changes\\\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \\\"application/json\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \\\"IDLE\\\") (EQ currentStatus \\\"NEW\\\")) (SEQ (SET_STATE sys.system_qa_status \\\"SELECTING_BACKLOG_FOCUS\\\") (SET_STATE session.system_qa_context (MAP_CREATE (\\\"step\\\" \\\"SELECTING_BACKLOG_FOCUS\\\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"SELECTING_BACKLOG_FOCUS\\\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"ai_proposed_focus\\\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \\\"AWAITING_FOCUS_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \\\"AWAITING_FOCUS_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"ai_focus_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"AWAITING_USER_PRIORITY\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \\\"AWAITING_USER_PRIORITY\\\") (LET ((userInput (MAP_GET_VALUE qaContext \\\"user_backlog_selection_input\\\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \\\",\\\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"user_selected_focus_ids\\\" selectedItems))\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PERFORMING_QA\\\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PROPOSING_VERSION\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PROPOSING_VERSION\\\") (LET ((changesSummary \\\"Summary of changes.\\\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"proposed_version_data\\\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \\\"AWAITING_VERSION_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_VERSION_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \\\"AWAIT_VERSION_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"version_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"FINALIZING\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"FINALIZING\\\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\\\"focus\\\" \\\"system_evolution\\\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \\\"CONCEPTUAL_ANALYSIS\\\" \\\"Φ analysis complete.\\\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\\\"backlog_content\\\" backlog) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"backlog_analysis\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \\\"ADDRESSED\\\" (STRING_CONCAT \\\"Addressed in v\\\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\\n\\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \\\"session_conceptual_model_handle\\\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"prompt_text\\\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \\\"general_generation\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \\\"text/markdown\\\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\\\"generated_text\\\" generatedText)\\ (\\\"prompt_context\\\" prompt_context_map)\\ (\\\"identified_patterns\\\" patterns)\\ (\\\"session_model_handle\\\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \\\"meta_cognitive_qa\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ )))))))))))\\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\\\"context\\\" context_map) (\\\"session_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \\\"pattern_identification\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \\\"text\\\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\\\"base_prompt\\\" basePrompt)\\ (\\\"context\\\" context_map)\\ (\\\"patterns\\\" identified_patterns)\\ (\\\"session_model\\\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \\\"prompt_enhancement\\\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PARSE_COMMAND) (\\\"user_text\\\" raw_text) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"command_parsing\\\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\\\"raw_input\\\" raw_input) (\\\"tool_id\\\" tool_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"tool_input_parsing\\\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \\\"EBL\\\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \\\"Suggestion: \\\" (SUBSTRING suggestionText 0 50) \\\"...\\\") suggestionText source \\\"NEW\\\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \\\"id\\\") NIL NIL NIL NIL (STRING_CONCAT \\\"Reinforced by \\\" source) TRUE) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_GET_VALUE similarItem \\\"id\\\")))))))\\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\\\"rationale\\\" rationale) (\\\"source\\\" \\\"user_promotion\\\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \\\"USER_CONSENT_GRANTED\\\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \\\"USER_CONSENT_GRANTED\\\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\n\\n;; --- Section 7: ALANG Status Codes ---\\n\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\\n\\n;; --- Section 8: End of Core Logic ---\\n```\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```\n--- END FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n\n--- START FILE: _25157155013.md ---\nOf course. Based on the provided `Autologos_Core_Logic_v1.12.alang` file, here is a breakdown of what this system is and how you would get it to run as a bootstrapped, LLM-orchestrated process manager.\n\n### **My Findings from the ALang File**\n\nThe file `Autologos_Core_Logic_v1.12.alang` is not a program that can be executed directly. It is a **high-level logic specification** that defines the behavior of a sophisticated AI system. To run it, you need a specific **runtime environment** or **orchestrator** that can interpret this logic and connect it to real-world services like LLMs, tools, and user interfaces.\n\nThe ALang code defines a complete, event-driven architecture for process management, including:\n*   **State Management:** Tracking system status, project artifacts, and session data (`sys.*`, `session.*`, `proj.*`).\n*   **Command Handling:** Parsing user input and dispatching to specific procedures (`OnUserInput`, `DispatchUserCommand`).\n*   **Phase-Based Project Execution:** Moving a project through distinct phases like `PHASE_IDEA_FORMULATION`, `PHASE_PLANNING`, and `PHASE_TASK_EXECUTION`.\n*   **LLM-Powered Generation & QA:** Using LLMs to generate content, summarize artifacts, and perform multi-stage quality assurance (`SAFE_GENERATE_CONTENT`, `PerformProductQA`).\n*   **System Self-Evolution:** A mechanism to analyze its own performance and propose changes to its core logic (`ExecuteSystemQAAndEvolutionCycle`).\n\n### **How to Run the System: The Required Architecture**\n\nTo bring this ALang logic to life, you would need to build or use an orchestrator that provides the following components. This orchestrator would act as the \"engine\" that runs the \"software\" defined in the `.alang` file.\n\n1.  **ALang Interpreter:** A core component that parses and executes the Lisp-like syntax of the `.alang` file.\n2.  **Orchestration Kernel:** An event loop that listens for triggers (like user input or tool completion) and calls the appropriate ALang procedures (e.g., `OnUserInput`, `OnToolSuccess`).\n3.  **Primitive Host Implementations:** Concrete code (e.g., in Python) that implements the functions declared with `DEFINE_PRIMITIVE`. This is the bridge from the abstract logic to the real world. Key primitives you would need to implement include:\n    *   `INVOKE_CORE_LLM_GENERATION`: Connects to an LLM API (like Gemini).\n    *   `INVOKE_TOOL_ASYNC_WITH_CALLBACKS`: Manages calls to external tools (e.g., a web browser tool).\n    *   `READ_CONTENT`/`WRITE_CONTENT_TO_ARTIFACT`: Manages an in-memory or on-disk data store for \"artifacts\".\n    *   `SET_STATE`/`GET_STATE`: Interacts with a state management dictionary or database.\n    *   `OUTPUT_TO_USER_BUFFER`: Sends messages back to the user interface.\n4.  **User Interface (UI) Gateway:** A simple command-line interface (CLI) or a more complex web UI that handles the input/output between the user and the Orchestration Kernel.\n\n### **The Session Conceptual Model**\n\nA central component managed by the ALang core logic is the **Session Conceptual Model**. This isn't a static data structure but a dynamic, evolving representation of the system's understanding of the current project, user intent, generated artifacts, and relevant knowledge. It acts as the system's short-term memory and active working context.\n\nStructurally, the conceptual model can be thought of as a dynamic knowledge graph, though its specific implementation is abstracted by the ALang primitives. It contains:\n\n*   **Nodes:** Representing key concepts, entities (like the user, project, tools), artifacts generated or consumed, identified patterns, and specific issues or feedback points.\n*   **Edges:** Representing relationships between nodes, such as \"Artifact X is derived from Idea Y,\" \"User Feedback Z relates to Task Output A,\" \"Pattern P is relevant to Project Q,\" or \"Tool R failed during processing of Artifact S.\"\n*   **Properties:** Key-value pairs associated with nodes and edges, storing details like confidence scores for QA assessments, timestamps, source information, status (e.g., \"approved\", \"needs_revision\"), or metadata about concepts.\n\nThe Conceptual Model is continuously updated by various procedures:\n\n*   `OnSystemInit`: Initializes the model as an empty graph.\n*   `ProcessUserInputForConceptualModel`: Analyzes user input to identify concepts, entities, and intent, adding or updating corresponding nodes and relationships.\n*   `ProcessGeneratedArtifactForConceptualModel`: Parses newly generated artifacts (like idea lists, product definitions, task outputs) to extract key information and integrate it into the model, linking it to the project context.\n*   `ProcessToolResultForConceptualModel`: Incorporates information gained from successful tool executions (e.g., content from a browsed webpage) into the model.\n*   `ProcessToolErrorForConceptualModel`: Logs details about tool failures, potentially flagging related concepts or tasks in the model for review or retry.\n*   `ProcessUserFeedbackForConceptualModel`: Integrates user feedback and revision requests into the model, linking them to the specific artifacts or concepts they concern.\n*   `IntegratePkaIntoConceptualModel`: Incorporates relevant knowledge retrieved from the Persistent Knowledge Base (PKA) into the session model, providing broader context.\n*   `ProcessPkaSearchResultsForConceptualModel`: Adds search results from the PKA to the model, making them available for subsequent steps.\n*   `AnalyzeConceptualModelForΦ`: A specialized procedure (likely using an LLM) to analyze the current state of the model for higher-level insights or potential issues (\"Φ\" might represent philosophical or systemic self-reflection).\n*   `UPDATE_CONCEPTUAL_MODEL`: A primitive used by many procedures to explicitly add, modify, or flag elements within the model.\n*   `QUERY_CONCEPTUAL_MODEL`: A primitive used to retrieve specific information or relationships from the model to inform decision-making or generation.\n*   `IdentifyPatternsInContext`: Utilizes the model to identify recurring themes, successful approaches, or problematic areas based on the current session's history and artifacts.\n*   `EnhancePromptWithPatterns`: Uses identified patterns and the model's context to refine prompts sent to LLMs.\n*   `ParseUserCommand`, `ParseToolErrorResolutionInput`, `SelectAIProposedBacklogItems`, `ProposeDirectiveChanges`: These procedures likely query the conceptual model to understand the current state, user intent, error context, or backlog priorities before formulating their output or next steps.\n\nBy maintaining this dynamic model, the system can exhibit more coherent, context-aware, and adaptive behavior throughout a user session and project lifecycle.\n\n### **The Bootstrapping and Operational Flow**\n\nHere is the step-by-step process of how the system would bootstrap and run:\n\n**1. Bootstrapping Sequence:**\n\n*   **Step 1: Orchestrator Start-up:** You launch the main orchestrator program (e.g., `python orchestrator.py`).\n*   **Step 2: Load Core Logic:** The orchestrator reads the `Autologos_Core_Logic_v1.12.alang` file into memory. The ALang Interpreter parses the procedures and symbols.\n*   **Step 3: System Initialization:** The orchestrator triggers the `OnSystemInit` event.\n*   **Step 4: Execute `OnSystemInit`:** The interpreter runs the `OnSystemInit` procedure from the ALang file. This sets the initial system state, creates a session **conceptual model** (initialized as empty), and loads the persistent knowledge base and evolution backlog from their respective `.json` files.\n*   **Step 5: Await Input:** The system is now bootstrapped, in an `IDLE` state, and waiting for the first user command.\n\n**2. Example Operational Flow:**\n\nLet's say the user wants to start a new project.\n\n1.  **User Input:** The user types `START \"Create a marketing plan for a new coffee shop\"` into the UI.\n2.  **Event Trigger:** The Orchestrator receives this text and triggers the `OnUserInput` event.\n3.  **ALang Execution:** The interpreter executes the `OnUserInput` procedure. This procedure first calls `ProcessUserInputForConceptualModel` to update the session's conceptual model with the user's stated goal and initial context. It then calls `ParseUserCommand` (using an LLM to structure the input based on the conceptual model) and then `DispatchUserCommand`.\n4.  **Command Handling:** `DispatchUserCommand` identifies the `START` command and calls `HandleStartCommand`. This procedure initializes the project state, associating it with the current session and its conceptual model.\n5.  **Phase Execution:** The system then proceeds to the first project phase, `PHASE_IDEA_FORMULATION`, and calls `ExecutePhaseIdeaFormulation`.\n6.  **LLM Generation & QA:** This procedure calls `SAFE_GENERATE_CONTENT`. The underlying Python implementation of this primitive sends a request to an LLM using the `prompt_generate_pattern_ideas.txt` template, potentially enhanced by patterns identified from the conceptual model. The LLM generates ideas, which are then checked by a follow-up LLM call for quality assurance (`PROMPT_TEMPLATE_META_COGNITIVE_QA`). The results of this generation and QA are then processed by `ProcessGeneratedArtifactForConceptualModel` and `HandleQAIssues`, further updating the conceptual model with the new artifact and any identified issues.\n7.  **Await User Feedback:** The generated ideas are presented to the user, and the system state is set to `AWAIT_OK_REVISE_PHASE_ARTIFACT`, pausing the process until the user types `OK` or `NO \"The ideas are too generic\"`. User feedback is processed by `ProcessUserFeedbackForConceptualModel` to update the conceptual model, informing potential revisions.\n\nThis cycle of **Input -> ALang Logic (interacting with Conceptual Model) -> LLM/Tool Call -> State Change -> Output** continues, allowing the system to manage complex, multi-step processes autonomously while remaining directed by user feedback and its own internal logic, all while building a richer understanding within the session's conceptual model.\n--- END FILE: _25157155013.md ---\n```",
    "linesAdded": 46,
    "linesRemoved": 733
  },
  {
    "iteration": 2,
    "productSummary": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:10:00.000Z\nprocessing_mode: expansive\ninitial...",
    "status": "Iteration 2 complete",
    "timestamp": "3:55:57 PM",
    "fullProduct": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:10:00.000Z\nprocessing_mode: expansive\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n---\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\nprocessing_mode: convergent\ninitial_prompt_summary: \\\"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_202SE...\\\"\\nfinal_iteration_count: 1\\nmax_iterations_setting: 10\\nmodel_configuration:\\n  model_name: 'gemini-2.5-flash-preview-04-17'\\n  temperature: 0.00\\n  top_p: 0.87\\n  top_k: 4\\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\\n---\\n\\n```\\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\\n;; Autologos_Core_Logic.alang v1.12\\n;; Specification Version: ALANG_SPEC_V1.0\\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\\n;; Core behavior of the Autologos system in ALang.\\n\\n;; --- Section 0: System Config & Metadata ---\\n\\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\\n\\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\\n(SET_STATE sys.current_mode \\\"IDLE\\\")\\n(SET_STATE sys.error_level \\\"NONE\\\")\\n(SET_STATE sys.error_message NIL)\\n(SET_STATE sys.evolution_backlog_handle \\\"Autologos/Evolution_Backlog.json\\\")\\n(SET_STATE sys.knowledge_base_handle \\\"Autologos/Persistent_Knowledge_Base.json\\\")\\n(SET_STATE sys.evolution_trigger_pending FALSE)\\n(SET_STATE sys.system_qa_status \\\"IDLE\\\")\\n(SET_STATE session.qa_output_verbosity \\\"CONCISE\\\")\\n(SET_STATE session.output_detail \\\"STANDARD\\\")\\n(SET_STATE session.loop_stack (LIST_CREATE))\\n(SET_STATE session.conceptual_model_handle NIL)\\n(SET_STATE session.pending_user_action_details NIL)\\n(SET_STATE session.last_search_results NIL)\\n(SET_STATE session.system_qa_context NIL)\\n(SET_STATE sys.proposed_changes_handle NIL)\\n\\n;; --- External Component Dependencies ---\\n\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \\\"prompt_generate_pattern_ideas.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \\\"prompt_product_definition.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \\\"prompt_generate_task_list.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \\\"prompt_execute_task.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \\\"prompt_compile_draft.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \\\"prompt_project_summary.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \\\"prompt_qa_self_critique.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \\\"prompt_qa_divergent_exploration.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \\\"prompt_qa_red_teaming.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \\\"prompt_qa_external_review.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \\\"prompt_parse_command.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \\\"prompt_summarize_artifact.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \\\"prompt_perform_query.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \\\"prompt_serialize_alang_core.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \\\"prompt_meta_cognitive_qa.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \\\"prompt_self_correction.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \\\"prompt_enhance_prompt.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \\\"prompt_analyze_for_conceptual_model_update.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \\\"prompt_pka_consent.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \\\"prompt_analyze_backlog_for_focus.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \\\"prompt_analyze_qa_for_directive_changes.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \\\"prompt_analyze_data_for_patterns.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \\\"prompt_analyze_qa_report_for_revisions.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \\\"prompt_analyze_tool_error.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \\\"prompt_analyze_feedback_for_revision.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \\\"prompt_analyze_tool_error_user_explanation.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \\\"prompt_analyze_tool_error_resolution_input.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \\\"prompt_summarize_conceptual_model.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \\\"prompt_analyze_conceptual_model_for_phi.txt\\\")\\n\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \\\"constraints_idea_generation.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \\\"constraints_product_definition.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \\\"constraints_planning.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \\\"constraints_task_execution.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \\\"constraints_final_review.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \\\"constraints_summary.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \\\"constraints_qa_critique.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \\\"constraints_pattern_identification.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \\\"constraints_valid_alang_syntax.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \\\"constraints_conceptual_model_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \\\"constraints_pka_schema_registry.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \\\"constraints_proposed_changes_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \\\"constraints_identified_patterns_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \\\"constraints_revision_plan_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \\\"constraints_tool_error_analysis_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \\\"constraints_conceptual_model_update_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \\\"constraints_tool_error_resolution_input_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \\\"constraints_conceptual_model_summary_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \\\"constraints_phi_analysis_structure.json\\\")\\n\\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\\n\\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" (STRING_CONCAT \\\"No help found for: \\\" commandName)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \\\"=\\\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" resultMap)))))\\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \\\"text_summary_or_full\\\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\\\"content\\\" content) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"summarization\\\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))))))\\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PERFORM_QUERY) (\\\"query_type\\\" queryType) (\\\"query_value\\\" queryValue) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"query_answering\\\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))))\\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \\\"args\\\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PKA_CONSENT) (\\\"purpose\\\" purpose_description) (\\\"session_model_context\\\" model)) (GET_LLM_PARAMS_FOR_TASK \\\"prompt_generation\\\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))))\\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \\\"has_issues\\\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \\\"confidence_score\\\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"log_issues\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"details\\\" (MAP_GET_VALUE qaAssessment \\\"details\\\")) (\\\"confidence\\\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"CRITICAL\\\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"MAJOR\\\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" target_artifact_handle) (\\\"qa_report_handle\\\" (CREATE_EMPTY_ARTIFACT \\\"temp_qa_report\\\")) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_qa_passed\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"confidence\\\" confidence)))) (RETURN_STATUS status))))\\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SELF_CORRECTION) (\\\"original_text\\\" generated_text) (\\\"qa_findings\\\" qaAssessment) (\\\"constraints\\\" constraints) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"self_correction\\\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" \\\"Conceptual model summary placeholder.\\\"))))\\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"phi_score\\\" 0.5))))))\\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"error_analysis_and_correction\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \\\"can_self_correct\\\") (LET ((retryContext (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"success_proc_name\\\" (MAP_GET_VALUE context \\\"success_proc_name\\\")) (\\\"failure_proc_name\\\" (MAP_GET_VALUE context \\\"failure_proc_name\\\")) (\\\"pass_through_context\\\" (MAP_GET_VALUE context \\\"pass_through_context\\\")) (\\\"original_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (\\\"original_params\\\" (MAP_GET_VALUE context \\\"original_params\\\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \\\"suggested_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (MAP_GET_VALUE analysisData \\\"suggested_params\\\" (MAP_GET_VALUE context \\\"original_params\\\")) (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"new_job_id\\\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"ERROR: \\\" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; Primitive Declarations\\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\\n(DEFINE_PRIMITIVE IS_NUMBER (str))\\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\\n(DEFINE_PRIMITIVE ADD (num1 num2))\\n(DEFINE_PRIMITIVE SUB (num1 num2))\\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE NOT (bool))\\n(DEFINE_PRIMITIVE IS_NIL (value))\\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\\n(DEFINE_PRIMITIVE GT (num1 num2))\\n(DEFINE_PRIMITIVE LT (num1 num2))\\n(DEFINE_PRIMITIVE GTE (num1 num2))\\n(DEFINE_PRIMITIVE NEQ (val1 val2))\\n(DEFINE_PRIMITIVE EQ (val1 val2))\\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\\n(DEFINE_PRIMITIVE SEQ (expression ...))\\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\\n(DEFINE_PRIMITIVE STRING_TRIM (text))\\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \\\"has_substantive_issues\\\" FALSE)) (RETURN_STATUS TRUE))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE)))))\\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n\\n;; --- Section 2: Event Handler Procedures ---\\n\\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \\\"IDLE\\\") (SET_STATE sys.error_level \\\"NONE\\\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \\\"IDLE\\\") (SET_STATE session.qa_output_verbosity \\\"CONCISE\\\") (SET_STATE session.output_detail \\\"STANDARD\\\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Could not understand input.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \\\"tool_id\\\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \\\"pass_through_context\\\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" (MAP_GET_VALUE error_details \\\"message\\\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \\\"tool_id\\\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"browse\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read browsed content.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Browse error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \\\"json_map\\\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \\\"is_valid\\\") TRUE) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" \\\"Reference validated.\\\" NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" (STRING_CONCAT \\\"Reference validation failed: \\\" (MAP_GET_VALUE report \\\"reason\\\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"reference_validator\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read validation report.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Reference validation error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model_handle\\\" (GET_STATE session.conceptual_model_handle)) (\\\"output_format\\\" \\\"user_explanation\\\")) (GET_LLM_PARAMS_FOR_TASK \\\"error_explanation\\\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \\\"Could not generate explanation.\\\")))) (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" (STRING_CONCAT \\\"Error in \\\" tool_id \\\". Analysis: \\\" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"`INPUT` fix or other instructions.\\\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"job_id\\\" job_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context))) (SET_STATE session.pending_user_action \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n\\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\\n\\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \\\"command\\\"))) (IF (EQ commandName \\\"START\\\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"HELP\\\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"EVOLVE\\\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SAVE_SYSTEM\\\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \\\"BROWSE\\\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OK\\\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \\\"NO\\\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"INPUT\\\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"END\\\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \\\"LOOP_PROJECT_RESTART\\\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \\\"SET_SESSION_PREFERENCE\\\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"STOP_LOOP\\\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \\\"OUTPUT\\\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SUMMARIZE\\\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"QUERY\\\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OUTPUT_BACKLOG\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"PROMOTE_TO_PKA\\\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SEARCH_PKA\\\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_QA_OUTPUT_VERBOSITY\\\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_OUTPUT_DETAIL\\\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"LOOP\\\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SYSTEM_QA\\\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"START\\\" TRUE) (\\\"HELP\\\" TRUE) (\\\"EVOLVE\\\" TRUE) (\\\"SAVE_SYSTEM\\\" TRUE) (\\\"BROWSE\\\" TRUE) (\\\"OK\\\" TRUE) (\\\"NO\\\" TRUE) (\\\"INPUT\\\" TRUE) (\\\"END\\\" TRUE) (\\\"LOOP_PROJECT_RESTART\\\" TRUE) (\\\"SET_SESSION_PREFERENCE\\\" TRUE) (\\\"STOP_LOOP\\\" TRUE) (\\\"OUTPUT\\\" TRUE) (\\\"SUMMARIZE\\\" TRUE) (\\\"QUERY\\\" TRUE) (\\\"OUTPUT_BACKLOG\\\" TRUE) (\\\"PROMOTE_TO_PKA\\\" TRUE) (\\\"SEARCH_PKA\\\" TRUE) (\\\"SET_QA_OUTPUT_VERBOSITY\\\" TRUE) (\\\"SET_OUTPUT_DETAIL\\\" TRUE) (\\\"LOOP\\\" TRUE) (\\\"SYSTEM_QA\\\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \\\"NO\\\") (EQ (STRING_UPPER raw_input) \\\"REVISE\\\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \\\"AWAIT_END_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_RESTART_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"user_backlog_selection_input\\\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"ai_focus_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_VERSION_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"version_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \\\"tool_id\\\"))) (LET ((context (MAP_GET_VALUE details \\\"original_context\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \\\"original_input\\\") (MAP_GET_VALUE context \\\"original_params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (IF (EQ (GET_STATE session.last_user_response) \\\"INPUT\\\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \\\"error_details\\\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \\\"input\\\") (MAP_GET_VALUE newInputParams \\\"params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \\\"NO\\\") (EQ (GET_STATE session.last_user_response) \\\"REVISE\\\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_REVISION_REVIEW\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \\\"constraints_handle\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_revision\\\") (\\\"artifact_handle\\\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_revision\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \\\"last_revision_status\\\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((phaseId (MAP_GET_VALUE details \\\"phase\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \\\"SYSTEM_ERROR\\\" (STRING_CONCAT \\\"Unhandled pending action: \\\" action_key)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \\\"PROJECT_TERMINATION\\\" \\\"Project terminating.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project terminated.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \\\"PROJECT_RESTART\\\" \\\"Project restarting.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project state discarded. Restarting.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Description required.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_START\\\" (STRING_CONCAT \\\"START: \\\" desc) \\\"AI_ACKNOWLEDGE_INTENT\\\" (STRING_CONCAT \\\"START: '\\\" desc \\\"'\\\")) (LET ((newId (GENERATE_UNIQUE_ID \\\"PROJ\\\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \\\"PHASE_IDEA_FORMULATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"EVOLVE requires suggestion.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_EVOLVE\\\" (STRING_CONCAT \\\"EVOLVE: \\\" suggestion) \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"EVOLVE logged.\\\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \\\"USER_SUGGESTION\\\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SAVE_SYSTEM\\\" \\\"SAVE SYSTEM received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SAVE SYSTEM received.\\\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \\\"temp_alang_code\\\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\\\"current_alang_handle\\\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\\\"session_conceptual_model_summary\\\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \\\"text\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \\\"SHA256\\\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" content NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_USER_ACTION\\\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Output Backlog? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \\\"browse\\\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \\\"url\\\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \\\"browse\\\" url NIL \\\"HandleBrowseResult\\\" \\\"HandleBrowseError\\\" (MAP_CREATE (\\\"tool_id\\\" \\\"browse\\\") (\\\"original_context\\\" NIL) (\\\"original_input\\\" url) (\\\"original_params\\\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Unknown command: \\\" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \\\"OK\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"NO\\\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"INPUT\\\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"End project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_END_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Restart project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_RESTART_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \\\"PKA\\\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\\\"type\\\" queryType) (\\\"value\\\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\\\"keywords\\\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"No PKAs found.\\\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (STRING_CONCAT \\\"- ID: \\\" (GET_HANDLE_METADATA handle \\\"id\\\") \\\" Title: \\\" (GET_HANDLE_METADATA handle \\\"title\\\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"CONCISE\\\") (NEQ level \\\"VERBOSE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"MINIMAL\\\") (NEQ level \\\"STANDARD\\\") (NEQ level \\\"EXHAUSTIVE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SYSTEM_QA\\\" \\\"SYSTEM_QA received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SYSTEM_QA received. Initiating cycle.\\\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\\n\\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \\\"PHASE_INIT\\\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \\\"PHASE_IDEA_FORMULATION\\\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \\\"PHASE_PRODUCT_DEFINITION\\\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \\\"PHASE_PLANNING\\\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \\\"PHASE_TASK_EXECUTION\\\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \\\"PHASE_FINAL_REVIEW\\\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \\\"PHASE_COMPLETION_SUMMARY\\\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"PHASE_INIT\\\" TRUE) (\\\"PHASE_IDEA_FORMULATION\\\" TRUE) (\\\"PHASE_PRODUCT_DEFINITION\\\" TRUE) (\\\"PHASE_PLANNING\\\" TRUE) (\\\"PHASE_TASK_EXECUTION\\\" TRUE) (\\\"PHASE_FINAL_REVIEW\\\" TRUE) (\\\"PHASE_COMPLETION_SUMMARY\\\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \\\"PatternIdeasDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \\\"pattern_ideas\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_IDEA_FORMULATION\\\") (\\\"artifact_handle\\\" ideaHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \\\"ProductDefinitionDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"pattern_ideas_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \\\"product_definition\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PRODUCT_DEFINITION\\\") (\\\"artifact_handle\\\" prodDefHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \\\"TaskListDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"product_definition_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \\\"task_list\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PLANNING\\\") (\\\"artifact_handle\\\" taskListHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))\\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \\\"json_map_list\\\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \\\"id\\\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \\\"description\\\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \\\"Task_\\\" taskId \\\"_Output\\\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\\\"task_id\\\" taskId) (\\\"task_description\\\" taskDesc) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_TASK_EXECUTION\\\") (\\\"artifact_handle\\\" taskArtifactHandle) (\\\"task_id\\\" taskId))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \\\"CompiledProjectDraft\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"final_draft\\\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \\\"final_draft\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_FINAL_REVIEW\\\") (\\\"artifact_handle\\\" draftHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))\\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \\\"ProjectSummary\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\\\"project_id\\\" (GET_STATE proj.id)) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"tau_project_log\\\" (GET_STATE proj.tau_project_log)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"project_summary\\\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \\\"project_summary\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n\\n;; --- Section 5: QA Procedures ---\\n\\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"structured_map\\\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\\\"qa_report\\\" qaReport) (\\\"artifact_content\\\" artifactContent) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints)) (GET_LLM_PARAMS_FOR_TASK \\\"revision_planning\\\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"self_correct\\\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \\\"details\\\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"user_review\\\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" NIL))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\\\"artifact_content\\\" artifactContent) (\\\"user_feedback\\\" feedback_text) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints) (\\\"previous_qa_context\\\" context_details)) (GET_LLM_PARAMS_FOR_TASK \\\"feedback_based_revision\\\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (GET_STATUS genResult)) (\\\"data\\\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\\\"qa_report\\\" qaReport) (\\\"session_model\\\" sessionModel) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \\\"directive_change_proposal\\\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \\\"proposed_changes\\\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \\\"application/json\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \\\"IDLE\\\") (EQ currentStatus \\\"NEW\\\")) (SEQ (SET_STATE sys.system_qa_status \\\"SELECTING_BACKLOG_FOCUS\\\") (SET_STATE session.system_qa_context (MAP_CREATE (\\\"step\\\" \\\"SELECTING_BACKLOG_FOCUS\\\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"SELECTING_BACKLOG_FOCUS\\\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"ai_proposed_focus\\\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \\\"AWAITING_FOCUS_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \\\"AWAITING_FOCUS_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"ai_focus_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"AWAITING_USER_PRIORITY\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \\\"AWAITING_USER_PRIORITY\\\") (LET ((userInput (MAP_GET_VALUE qaContext \\\"user_backlog_selection_input\\\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \\\",\\\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"user_selected_focus_ids\\\" selectedItems))\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PERFORMING_QA\\\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PROPOSING_VERSION\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PROPOSING_VERSION\\\") (LET ((changesSummary \\\"Summary of changes.\\\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"proposed_version_data\\\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \\\"AWAITING_VERSION_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_VERSION_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \\\"AWAIT_VERSION_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"version_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"FINALIZING\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"FINALIZING\\\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\\\"focus\\\" \\\"system_evolution\\\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \\\"CONCEPTUAL_ANALYSIS\\\" \\\"Φ analysis complete.\\\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\\\"backlog_content\\\" backlog) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"backlog_analysis\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \\\"ADDRESSED\\\" (STRING_CONCAT \\\"Addressed in v\\\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\\n\\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \\\"session_conceptual_model_handle\\\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"prompt_text\\\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \\\"general_generation\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \\\"text/markdown\\\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\\\"generated_text\\\" generatedText)\\ (\\\"prompt_context\\\" prompt_context_map)\\ (\\\"identified_patterns\\\" patterns)\\ (\\\"session_model_handle\\\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \\\"meta_cognitive_qa\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ )))))))))))\\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\\\"context\\\" context_map) (\\\"session_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \\\"pattern_identification\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \\\"text\\\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\\\"base_prompt\\\" basePrompt)\\ (\\\"context\\\" context_map)\\ (\\\"patterns\\\" identified_patterns)\\ (\\\"session_model\\\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \\\"prompt_enhancement\\\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PARSE_COMMAND) (\\\"user_text\\\" raw_text) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"command_parsing\\\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\\\"raw_input\\\" raw_input) (\\\"tool_id\\\" tool_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"tool_input_parsing\\\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \\\"EBL\\\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \\\"Suggestion: \\\" (SUBSTRING suggestionText 0 50) \\\"...\\\") suggestionText source \\\"NEW\\\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \\\"id\\\") NIL NIL NIL NIL (STRING_CONCAT \\\"Reinforced by \\\" source) TRUE) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_GET_VALUE similarItem \\\"id\\\")))))))\\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\\\"rationale\\\" rationale) (\\\"source\\\" \\\"user_promotion\\\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \\\"USER_CONSENT_GRANTED\\\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \\\"USER_CONSENT_GRANTED\\\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\n\\n;; --- Section 7: ALANG Status Codes ---\\n\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\\n\\n;; --- Section 8: End of Core Logic ---\\n```\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```\n--- END FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n\n--- START FILE: _25157155013.md ---\nOf course. Based on the provided `Autologos_Core_Logic_v1.12.alang` file, here is a breakdown of what this system is and how you would get it to run as a bootstrapped, LLM-orchestrated process manager.\n\n### **My Findings from the ALang File**\n\nThe file `Autologos_Core_Logic_v1.12.alang` is not a program that can be executed directly. It is a **high-level logic specification** that defines the behavior of a sophisticated AI system. To run it, you need a specific **runtime environment** or **orchestrator** that can interpret this logic and connect it to real-world services like LLMs, tools, and user interfaces.\n\nThe ALang code defines a complete, event-driven architecture for process management, including:\n*   **State Management:** Tracking system status, project artifacts, and session data (`sys.*`, `session.*`, `proj.*`).\n*   **Command Handling:** Parsing user input and dispatching to specific procedures (`OnUserInput`, `DispatchUserCommand`).\n*   **Phase-Based Project Execution:** Moving a project through distinct phases like `PHASE_IDEA_FORMULATION`, `PHASE_PLANNING`, and `PHASE_TASK_EXECUTION`.\n*   **LLM-Powered Generation & QA:** Using LLMs to generate content, summarize artifacts, and perform multi-stage quality assurance (`SAFE_GENERATE_CONTENT`, `PerformProductQA`).\n*   **System Self-Evolution:** A mechanism to analyze its own performance and propose changes to its core logic (`ExecuteSystemQAAndEvolutionCycle`).\n\n### **How to Run the System: The Required Architecture**\n\nTo bring this ALang logic to life, you would need to build or use an orchestrator that provides the following components. This orchestrator would act as the \"engine\" that runs the \"software\" defined in the `.alang` file.\n\n1.  **ALang Interpreter:** A core component that parses and executes the Lisp-like syntax of the `.alang` file.\n2.  **Orchestration Kernel:** An event loop that listens for triggers (like user input or tool completion) and calls the appropriate ALang procedures (e.g., `OnUserInput`, `OnToolSuccess`).\n3.  **Primitive Host Implementations:** Concrete code (e.g., in Python) that implements the functions declared with `DEFINE_PRIMITIVE`. This is the bridge from the abstract logic to the real world. Key primitives you would need to implement include:\n    *   `INVOKE_CORE_LLM_GENERATION`: Connects to an LLM API (like Gemini).\n    *   `INVOKE_TOOL_ASYNC_WITH_CALLBACKS`: Manages calls to external tools (e.g., a web browser tool).\n    *   `READ_CONTENT`/`WRITE_CONTENT_TO_ARTIFACT`: Manages an in-memory or on-disk data store for \"artifacts\".\n    *   `SET_STATE`/`GET_STATE`: Interacts with a state management dictionary or database.\n    *   `OUTPUT_TO_USER_BUFFER`: Sends messages back to the user interface.\n4.  **User Interface (UI) Gateway:** A simple command-line interface (CLI) or a more complex web UI that handles the input/output between the user and the Orchestration Kernel.\n\n### **The Session Conceptual Model**\n\nA central component managed by the ALang core logic is the **Session Conceptual Model**. This isn't a static data structure but a dynamic, evolving representation of the system's understanding of the current project, user intent, generated artifacts, and relevant knowledge. It acts as the system's short-term memory and active working context.\n\nStructurally, the conceptual model can be thought of as a dynamic knowledge graph, though its specific implementation is abstracted by the ALang primitives. It contains:\n\n*   **Nodes:** Representing key concepts, entities (like the user, project, tools), artifacts generated or consumed, identified patterns, and specific issues or feedback points.\n*   **Edges:** Representing relationships between nodes, such as \"Artifact X is derived from Idea Y,\" \"User Feedback Z relates to Task Output A,\" \"Pattern P is relevant to Project Q,\" or \"Tool R failed during processing of Artifact S.\"\n*   **Properties:** Key-value pairs associated with nodes and edges, storing details like confidence scores for QA assessments, timestamps, source information, status (e.g., \"approved\", \"needs_revision\"), or metadata about concepts.\n\nThe Conceptual Model is continuously updated by various procedures:\n\n*   `OnSystemInit`: Initializes the model as an empty graph.\n*   `ProcessUserInputForConceptualModel`: Analyzes user input to identify concepts, entities, and intent, adding or updating corresponding nodes and relationships.\n*   `ProcessGeneratedArtifactForConceptualModel`: Parses newly generated artifacts (like idea lists, product definitions, task outputs) to extract key information and integrate it into the model, linking it to the project context.\n*   `ProcessToolResultForConceptualModel`: Incorporates information gained from successful tool executions (e.g., content from a browsed webpage) into the model.\n*   `ProcessToolErrorForConceptualModel`: Logs details about tool failures, potentially flagging related concepts or tasks in the model for review or retry.\n*   `ProcessUserFeedbackForConceptualModel`: Integrates user feedback and revision requests into the model, linking them to the specific artifacts or concepts they concern.\n*   `IntegratePkaIntoConceptualModel`: Incorporates relevant knowledge retrieved from the Persistent Knowledge Base (PKA) into the session model, providing broader context.\n*   `ProcessPkaSearchResultsForConceptualModel`: Adds search results from the PKA to the model, making them available for subsequent steps.\n*   `AnalyzeConceptualModelForΦ`: A specialized procedure (likely using an LLM) to analyze the current state of the model for higher-level insights or potential issues (\"Φ\" might represent philosophical or systemic self-reflection).\n*   `UPDATE_CONCEPTUAL_MODEL`: A primitive used by many procedures to explicitly add, modify, or flag elements within the model.\n*   `QUERY_CONCEPTUAL_MODEL`: A primitive used to retrieve specific information or relationships from the model to inform decision-making or generation.\n*   `IdentifyPatternsInContext`: Utilizes the model to identify recurring themes, successful approaches, or problematic areas based on the current session's history and artifacts.\n*   `EnhancePromptWithPatterns`: Uses identified patterns and the model's context to refine prompts sent to LLMs.\n*   `ParseUserCommand`, `ParseToolErrorResolutionInput`, `SelectAIProposedBacklogItems`, `ProposeDirectiveChanges`: These procedures likely query the conceptual model to understand the current state, user intent, error context, or backlog priorities before formulating their output or next steps.\n\nBy maintaining this dynamic model, the system can exhibit more coherent, context-aware, and adaptive behavior throughout a user session and project lifecycle.\n\n### **The Persistent Knowledge Base (PKA)**\n\nComplementary to the transient Session Conceptual Model is the **Persistent Knowledge Base (PKA)**, a long-term repository for valuable information, successful patterns, common issues and resolutions, and approved artifacts generated across all user sessions and system evolutions. The PKA serves as the system's institutional memory, allowing it to learn and improve over time by leveraging past experiences and curated knowledge.\n\nThe PKA is managed through a set of dedicated primitives and procedures:\n\n*   **Purpose:** To store and retrieve information that is deemed valuable enough to persist beyond a single session. This includes successful project outputs, validated patterns, common error resolution strategies, and user-approved content. It acts as a shared resource that can inform new projects, system QA, and self-evolution.\n*   **Conceptual Structure:** The PKA stores \"artifacts\" or \"knowledge items.\" Each item is more than just raw content; it typically includes:\n    *   A unique ID.\n    *   The core content (text, code, structured data, etc.).\n    *   Metadata (timestamp, source, related project/session IDs).\n    *   Schema ID (categorizing the type of knowledge, e.g., \"marketing_plan_template\", \"tool_error_pattern\", \"successful_prompt_strategy\"). This allows for structured querying.\n    *   Context Map (details about *why* this item was stored, its relevance, original rationale, and potentially user feedback).\n    *   User Consent Flags (tracking user permission for storage and usage, especially for user-contributed or session-specific data).\n*   **Interaction with ALang Logic:**\n    *   `LoadPersistentKnowledgeBase (handle_or_path)`: Initializes the connection to the PKA storage mechanism (e.g., a database or file system) at system startup.\n    *   `PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional)`: Creates a temporary, unstored draft of a knowledge item. This allows for review and consent before permanent storage.\n    *   `PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description)`: Initiates a user interaction flow to request permission to store the draft in the PKA, providing context on why it's valuable. The `GET_TEXT_FOR_PKA_CONSENT_PROMPT` primitive is used to generate the user-facing prompt, potentially tailored based on the session conceptual model.\n    *   `PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag)`: Stores the draft permanently in the PKA if user consent is granted.\n    *   `PKA_QUERY (query_object scope_filter_optional)`: Searches the PKA for relevant knowledge items based on keywords, schema, or other criteria. This is used by procedures like `PerformQuery` and `IdentifyPatternsInContext` to retrieve relevant past information.\n    *   `PKA_GET_ARTIFACT (pka_stored_id)`: Retrieves a specific knowledge item from the PKA by its ID.\n    *   `PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change)`: Allows updating existing knowledge items, potentially requiring renewed user consent if the scope or sensitivity of the information changes.\n    *   `PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify)`: Provides a mechanism for users to review and manage their consent for stored knowledge items.\n    *   `IntegratePkaIntoConceptualModel (pka_id session_model_handle)`: A procedure to pull a specific PKA item into the current session's conceptual model, making its contents and relationships part of the active working context.\n    *   `ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle)`: A procedure to process the results of a PKA query and integrate relevant findings into the session conceptual model.\n\nThe PKA is a critical mechanism for the Autologos system's ability to learn and improve, providing a structured and consent-managed way to build a collective intelligence from its operational history.\n\n### **The Bootstrapping and Operational Flow**\n\nHere is the step-by-step process of how the system would bootstrap and run:\n\n**1. Bootstrapping Sequence:**\n\n*   **Step 1: Orchestrator Start-up:** You launch the main orchestrator program (e.g., `python orchestrator.py`).\n*   **Step 2: Load Core Logic:** The orchestrator reads the `Autologos_Core_Logic_v1.12.alang` file into memory. The ALang Interpreter parses the procedures and symbols.\n*   **Step 3: System Initialization:** The orchestrator triggers the `OnSystemInit` event.\n*   **Step 4: Execute `OnSystemInit`:** The interpreter runs the `OnSystemInit` procedure from the ALang file. This sets the initial system state, creates a session **conceptual model** (initialized as empty), and loads the **persistent knowledge base** and evolution backlog from their respective `.json` files using `LoadPersistentKnowledgeBase` and `LoadEvolutionBacklog`.\n*   **Step 5: Await Input:** The system is now bootstrapped, in an `IDLE` state, and waiting for the first user command.\n\n**2. Example Operational Flow:**\n\nLet's say the user wants to start a new project.\n\n1.  **User Input:** The user types `START \"Create a marketing plan for a new coffee shop\"` into the UI.\n2.  **Event Trigger:** The Orchestrator receives this text and triggers the `OnUserInput` event.\n3.  **ALang Execution:** The interpreter executes the `OnUserInput` procedure. This procedure first calls `ProcessUserInputForConceptualModel` to update the session's conceptual model with the user's stated goal and initial context. It then calls `ParseUserCommand` (using an LLM to structure the input based on the conceptual model) and then `DispatchUserCommand`.\n4.  **Command Handling:** `DispatchUserCommand` identifies the `START` command and calls `HandleStartCommand`. This procedure initializes the project state, associating it with the current session and its conceptual model.\n5.  **Phase Execution:** The system then proceeds to the first project phase, `PHASE_IDEA_FORMULATION`, and calls `ExecutePhaseIdeaFormulation`.\n6.  **LLM Generation & QA:** This procedure calls `SAFE_GENERATE_CONTENT`. The underlying Python implementation of this primitive sends a request to an LLM using the `prompt_generate_pattern_ideas.txt` template, potentially enhanced by patterns identified from the conceptual model, which might have been informed by PKA queries (`IdentifyPatternsInContext` can query the PKA). The LLM generates ideas, which are then checked by a follow-up LLM call for quality assurance (`PROMPT_TEMPLATE_META_COGNITIVE_QA`). The results of this generation and QA are then processed by `ProcessGeneratedArtifactForConceptualModel` and `HandleQAIssues`, further updating the conceptual model with the new artifact and any identified issues.\n7.  **Await User Feedback:** The generated ideas are presented to the user, and the system state is set to `AWAIT_OK_REVISE_PHASE_ARTIFACT`, pausing the process until the user types `OK` or `NO \"The ideas are too generic\"`. User feedback is processed by `ProcessUserFeedbackForConceptualModel` to update the conceptual model, informing potential revisions. If the user approves the generated artifact (`OK`), the system might then initiate a process to promote this artifact (or derived knowledge) to the PKA via `HandlePromoteToPkaCommand`, which involves creating a draft, requesting user consent, and storing the approved item.\n\nThis cycle of **Input -> ALang Logic (interacting with Conceptual Model & PKA) -> LLM/Tool Call -> State Change -> Output** continues, allowing the system to manage complex, multi-step processes autonomously while remaining directed by user feedback and its own internal logic, all while building a richer understanding within the session's conceptual model and contributing to the long-term knowledge stored in the PKA.\n--- END FILE: _25157155013.md ---\n```",
    "linesAdded": 34,
    "linesRemoved": 117
  },
  {
    "iteration": 3,
    "productSummary": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:20:00.000Z\nprocessing_mode: expansive\ninitial...",
    "status": "Completed (Max iterations 3 reached)",
    "timestamp": "3:58:18 PM",
    "fullProduct": "```markdown\n---\ngeneration_timestamp: 2025-06-06T16:20:00.000Z\nprocessing_mode: expansive\ninitial_prompt_summary: \"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n---\ngeneration_timestamp: 2025-06-06T09:50:08.166Z\nprocessing_mode: convergent\ninitial_prompt_summary: \\\"--- START FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_202SE...\\\"\\nfinal_iteration_count: 1\\nmax_iterations_setting: 10\\nmodel_configuration:\\n  model_name: 'gemini-2.5-flash-preview-04-17'\\n  temperature: 0.00\\n  top_p: 0.87\\n  top_k: 4\\nprompt_source_name: Autologos_Core_Logic.alang_product_20250606_095243_product_expansive_20250606_152725.md\\n---\\n\\n```\\n--- START FILE: Autologos_Core_Logic_v1.12.alang ---\\n;; Autologos_Core_Logic.alang v1.12\\n;; Specification Version: ALANG_SPEC_V1.0\\n;; Core Logic Version: ALANG_CORE_LOGIC_V1.12\\n;; Core behavior of the Autologos system in ALang.\\n\\n;; --- Section 0: System Config & Metadata ---\\n\\n(DEFINE_PRIMITIVE GET_ALANG_SPEC_VERSION ())\\n(DEFINE_PRIMITIVE GET_CORE_LOGIC_VERSION ())\\n(DEFINE_PRIMITIVE GET_ORCHESTRATOR_TIMESTAMP ())\\n\\n(SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION))\\n(SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION))\\n(SET_STATE sys.current_mode \\\"IDLE\\\")\\n(SET_STATE sys.error_level \\\"NONE\\\")\\n(SET_STATE sys.error_message NIL)\\n(SET_STATE sys.evolution_backlog_handle \\\"Autologos/Evolution_Backlog.json\\\")\\n(SET_STATE sys.knowledge_base_handle \\\"Autologos/Persistent_Knowledge_Base.json\\\")\\n(SET_STATE sys.evolution_trigger_pending FALSE)\\n(SET_STATE sys.system_qa_status \\\"IDLE\\\")\\n(SET_STATE session.qa_output_verbosity \\\"CONCISE\\\")\\n(SET_STATE session.output_detail \\\"STANDARD\\\")\\n(SET_STATE session.loop_stack (LIST_CREATE))\\n(SET_STATE session.conceptual_model_handle NIL)\\n(SET_STATE session.pending_user_action_details NIL)\\n(SET_STATE session.last_search_results NIL)\\n(SET_STATE session.system_qa_context NIL)\\n(SET_STATE sys.proposed_changes_handle NIL)\\n\\n;; --- External Component Dependencies ---\\n\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS \\\"prompt_generate_pattern_ideas.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PRODUCT_DEFINITION \\\"prompt_product_definition.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_GENERATE_TASK_LIST \\\"prompt_generate_task_list.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_EXECUTE_TASK \\\"prompt_execute_task.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_COMPILE_DRAFT \\\"prompt_compile_draft.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PROJECT_SUMMARY \\\"prompt_project_summary.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_SELF_CRITIQUE \\\"prompt_qa_self_critique.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION \\\"prompt_qa_divergent_exploration.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_RED_TEAMING \\\"prompt_qa_red_teaming.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW \\\"prompt_qa_external_review.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PARSE_COMMAND \\\"prompt_parse_command.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT \\\"prompt_summarize_artifact.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PERFORM_QUERY \\\"prompt_perform_query.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE \\\"prompt_serialize_alang_core.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_META_COGNITIVE_QA \\\"prompt_meta_cognitive_qa.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SELF_CORRECTION \\\"prompt_self_correction.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ENHANCE_PROMPT \\\"prompt_enhance_prompt.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FOR_CONCEPTUAL_MODEL_UPDATE \\\"prompt_analyze_for_conceptual_model_update.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_PKA_CONSENT \\\"prompt_pka_consent.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS \\\"prompt_analyze_backlog_for_focus.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES \\\"prompt_analyze_qa_for_directive_changes.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS \\\"prompt_analyze_data_for_patterns.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS \\\"prompt_analyze_qa_report_for_revisions.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR \\\"prompt_analyze_tool_error.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION \\\"prompt_analyze_feedback_for_revision.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION \\\"prompt_analyze_tool_error_user_explanation.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT \\\"prompt_analyze_tool_error_resolution_input.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_SUMMARIZE_CONCEPTUAL_MODEL \\\"prompt_summarize_conceptual_model.txt\\\")\\n(DEFINE_SYMBOL PROMPT_TEMPLATE_ANALYZE_CONCEPTUAL_MODEL_FOR_PHI \\\"prompt_analyze_conceptual_model_for_phi.txt\\\")\\n\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDEA_GENERATION \\\"constraints_idea_generation.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PRODUCT_DEFINITION \\\"constraints_product_definition.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PLANNING \\\"constraints_planning.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TASK_EXECUTION \\\"constraints_task_execution.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_FINAL_REVIEW \\\"constraints_final_review.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_SUMMARY \\\"constraints_summary.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_QA_CRITIQUE \\\"constraints_qa_critique.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PATTERN_IDENTIFICATION \\\"constraints_pattern_identification.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_VALID_ALANG_SYNTAX \\\"constraints_valid_alang_syntax.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_STRUCTURE \\\"constraints_conceptual_model_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PKA_SCHEMA_REGISTRY \\\"constraints_pka_schema_registry.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE \\\"constraints_proposed_changes_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_IDENTIFIED_PATTERNS_STRUCTURE \\\"constraints_identified_patterns_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_REVISION_PLAN_STRUCTURE \\\"constraints_revision_plan_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_ANALYSIS_STRUCTURE \\\"constraints_tool_error_analysis_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_UPDATE_STRUCTURE \\\"constraints_conceptual_model_update_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE \\\"constraints_tool_error_resolution_input_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_CONCEPTUAL_MODEL_SUMMARY_STRUCTURE \\\"constraints_conceptual_model_summary_structure.json\\\")\\n(DEFINE_SYMBOL CONSTRAINT_SET_PHI_ANALYSIS_STRUCTURE \\\"constraints_phi_analysis_structure.json\\\")\\n\\n;; --- Section 1: Utility Procedures & Primitives Declarations ---\\n\\n(DEFINE_PROCEDURE AcknowledgeAndLog (log_event_type log_message user_ack_message_type user_ack_content) (SEQ (LOG_EVENT log_event_type log_message) (OUTPUT_TO_USER_BUFFER user_ack_message_type user_ack_content NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputGeneralHelp () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"Commands: START, OK, NO/REVISE, INPUT, HELP?, END, EVOLVE, SAVE_SYSTEM, OUTPUT, SUMMARIZE, QUERY, OUTPUT_BACKLOG, PROMOTE_TO_PKA, SEARCH_PKA, SET_SESSION_PREFERENCE, SET QA_OUTPUT_VERBOSITY, SET OUTPUT_DETAIL, LOOP, STOP_LOOP, LOOP_PROJECT_RESTART, SYSTEM_QA.\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OutputSpecificHelp (commandName) (LET ((helpContent (GET_HELP_TEXT_FOR_COMMAND commandName))) (IF (IS_NIL helpContent) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" (STRING_CONCAT \\\"No help found for: \\\" commandName)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" helpContent NIL)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ClearTurnSpecificSessionState () (SEQ (SET_STATE session.last_user_input_raw NIL) (SET_STATE session.parsed_command_details NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.active_tool_id NIL) (SET_STATE session.tool_last_status NIL) (SET_STATE session.tool_last_output_handle NIL) (SET_STATE session.last_user_response NIL) (SET_STATE session.last_user_feedback NIL) (SET_STATE session.last_user_input_data NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ParseKeyValueArgs (argsList) (LET ((resultMap (MAP_CREATE))) (LOOP_FOR_EACH argString argsList (LET ((parts (STRING_SPLIT argString \\\"=\\\"))) (IF (EQ (LIST_GET_LENGTH parts) 2) (SET_STATE resultMap (MAP_SET_VALUE resultMap (LIST_GET_ITEM parts 0) (LIST_GET_ITEM parts 1)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" resultMap)))))\\n(DEFINE_PROCEDURE SummarizeArtifact (artifactHandle session_model_handle) (LET ((contentResult (READ_CONTENT artifactHandle \\\"text_summary_or_full\\\" NIL))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((content (GET_DATA contentResult))) (IF (IS_NIL content) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((summaryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SUMMARIZE_ARTIFACT) (\\\"content\\\" content) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"summarization\\\")))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA summaryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))))))\\n(DEFINE_PROCEDURE PerformQuery (queryType queryValue session_model_handle pka_handle) (LET ((queryResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PERFORM_QUERY) (\\\"query_type\\\" queryType) (\\\"query_value\\\" queryValue) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" pka_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"query_answering\\\")))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA queryResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE GetEvolutionBacklogContent () (LET ((handle (GET_STATE sys.evolution_backlog_handle))) (IF (IS_NIL handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA contentResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))))\\n(DEFINE_PROCEDURE LoadEvolutionBacklog (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE LoadPersistentKnowledgeBase (handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE GetSessionCmdArgByIndex (index default_value_optional) (LET ((argsList (MAP_GET_VALUE (GET_STATE session.parsed_command_details) \\\"args\\\" (LIST_CREATE)))) (IF (LT index (LIST_GET_LENGTH argsList)) (LIST_GET_ITEM argsList index) default_value_optional)))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_PKA_CONSENT_PROMPT (purpose_description session_model_handle) (LET ((modelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS modelResult) ALANG_STATUS_SUCCESS) (LET ((model (GET_DATA modelResult))) (LET ((promptResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PKA_CONSENT) (\\\"purpose\\\" purpose_description) (\\\"session_model_context\\\" model)) (GET_LLM_PARAMS_FOR_TASK \\\"prompt_generation\\\")))) (IF (EQ (GET_STATUS promptResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (GET_DATA promptResult)) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))) (RETURN_STATUS (STRING_CONCAT \\\"Consent to store for: \\\" purpose_description \\\"? (YES/NO)\\\"))))))\\n(DEFINE_PROCEDURE HandleQAIssues (generated_text qaAssessment target_artifact_handle constraints_handle session_model_handle) (LET ((hasIssues (MAP_GET_VALUE qaAssessment \\\"has_issues\\\" FALSE))) (LET ((confidence (MAP_GET_VALUE qaAssessment \\\"confidence_score\\\" 1.0))) (LET ((status ALANG_STATUS_SUCCESS))) (IF hasIssues (SEQ (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"log_issues\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"details\\\" (MAP_GET_VALUE qaAssessment \\\"details\\\")) (\\\"confidence\\\" confidence)))) (LET ((needsUserReview FALSE))) (LET ((attemptSelfCorrection FALSE))) (IF (OR (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"CRITICAL\\\") (LT confidence 0.5)) (SET_STATE needsUserReview TRUE) (IF (EQ (MAP_GET_VALUE qaAssessment \\\"overall_severity\\\" \\\"minor\\\") \\\"MAJOR\\\") (SET_STATE attemptSelfCorrection TRUE))) (IF attemptSelfCorrection (LET ((correctionResult (SelfCorrectArtifact generated_text qaAssessment constraints_handle session_model_handle))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (NEQ writeStatus ALANG_STATUS_SUCCESS) (SET_STATE needsUserReview TRUE))) (SET_STATE needsUserReview TRUE)))) (IF needsUserReview (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" target_artifact_handle) (\\\"qa_report_handle\\\" (CREATE_EMPTY_ARTIFACT \\\"temp_qa_report\\\")) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" generated_text))) (SET_STATE status ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_qa_passed\\\") (\\\"artifact_handle\\\" target_artifact_handle) (\\\"confidence\\\" confidence)))) (RETURN_STATUS status))))\\n(DEFINE_PRIMITIVE ADD_DISCLAIMER_TO_ARTIFACT (artifact_handle disclaimer_text) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SelfCorrectArtifact (generated_text qaAssessment constraints_handle session_model_handle) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((constraints (GET_DATA constraintsResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((correctionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_SELF_CORRECTION) (\\\"original_text\\\" generated_text) (\\\"qa_findings\\\" qaAssessment) (\\\"constraints\\\" constraints) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"self_correction\\\")))) (RETURN_STATUS correctionResult)))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE UPDATE_CONCEPTUAL_MODEL (update_map) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE QUERY_CONCEPTUAL_MODEL (query_object session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE SAVE_CONCEPTUAL_MODEL (session_model_handle target_handle_or_path) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE SUMMARIZE_CONCEPTUAL_MODEL (session_model_handle summary_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" \\\"Conceptual model summary placeholder.\\\"))))\\n(DEFINE_PROCEDURE AnalyzeConceptualModelForΦ (session_model_handle analysis_options_map_optional) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"phi_score\\\" 0.5))))))\\n(DEFINE_PRIMITIVE SelfCorrectToolOperation (tool_id job_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"error_analysis_and_correction\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (MAP_GET_VALUE analysisData \\\"can_self_correct\\\") (LET ((retryContext (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"success_proc_name\\\" (MAP_GET_VALUE context \\\"success_proc_name\\\")) (\\\"failure_proc_name\\\" (MAP_GET_VALUE context \\\"failure_proc_name\\\")) (\\\"pass_through_context\\\" (MAP_GET_VALUE context \\\"pass_through_context\\\")) (\\\"original_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (\\\"original_params\\\" (MAP_GET_VALUE context \\\"original_params\\\"))))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS tool_id (MAP_GET_VALUE analysisData \\\"suggested_input\\\" (MAP_GET_VALUE context \\\"original_input\\\")) (MAP_GET_VALUE analysisData \\\"suggested_params\\\" (MAP_GET_VALUE context \\\"original_params\\\")) (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") retryContext)))) (IF (EQ (GET_STATUS retryJobId) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE (\\\"new_job_id\\\" retryJobId))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_LLM_ERROR) (\\\"data\\\" NIL)))))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE OutputErrorToUser (errorMessage) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"ERROR: \\\" errorMessage) NIL) (FLUSH_USER_OUTPUT_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; Primitive Declarations\\n(DEFINE_PRIMITIVE SET_STATE (variable_path_string value))\\n(DEFINE_PRIMITIVE GET_STATE (variable_path_string))\\n(DEFINE_PRIMITIVE REQUEST_USER_INPUT (prompt_message_key_or_text expected_input_type_hint))\\n(DEFINE_PRIMITIVE OUTPUT_TO_USER_BUFFER (message_type content_handle_or_text formatting_hints))\\n(DEFINE_PRIMITIVE FLUSH_USER_OUTPUT_BUFFER ())\\n(DEFINE_PRIMITIVE INVOKE_TOOL_ASYNC_WITH_CALLBACKS (tool_id input_data params_map success_proc_name failure_proc_name pass_through_context))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_STATUS (job_id))\\n(DEFINE_PRIMITIVE GET_ASYNC_JOB_RESULT_HANDLE (job_id))\\n(DEFINE_PRIMITIVE READ_CONTENT (handle options))\\n(DEFINE_PRIMITIVE WRITE_CONTENT_TO_ARTIFACT (artifact_handle content mime_type))\\n(DEFINE_PRIMITIVE GET_HANDLE_METADATA (handle key))\\n(DEFINE_PRIMITIVE RELEASE_HANDLE (handle))\\n(DEFINE_PRIMITIVE LOG_EVENT (event_type description_text (key_value_details_map_optional)))\\n(DEFINE_PRIMITIVE SET_ERROR_STATE (error_level error_message_key_or_text))\\n(DEFINE_PRIMITIVE GENERATE_UNIQUE_ID (prefix_string_optional))\\n(DEFINE_PRIMITIVE VALIDATE_DATA (data_handle schema_handle))\\n(DEFINE_PRIMITIVE IS_TOOL_ENABLED (tool_id))\\n(DEFINE_PRIMITIVE STRING_CONCAT (str1 str2 ...))\\n(DEFINE_PRIMITIVE STRING_IS_EMPTY_OR_NULL (str))\\n(DEFINE_PRIMITIVE IS_NUMBER (str))\\n(DEFINE_PRIMITIVE STRING_TO_NUMBER (str))\\n(DEFINE_PRIMITIVE ADD (num1 num2))\\n(DEFINE_PRIMITIVE SUB (num1 num2))\\n(DEFINE_PRIMITIVE OR (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE AND (bool1 bool2 ...))\\n(DEFINE_PRIMITIVE NOT (bool))\\n(DEFINE_PRIMITIVE IS_NIL (value))\\n(DEFINE_PRIMITIVE MAP_CREATE ((key1 val1) (key2 val2) ...)))\\n(DEFINE_PRIMITIVE MAP_GET_VALUE (map key default_value_optional))\\n(DEFINE_PRIMITIVE MAP_SET_VALUE (map key value))\\n(DEFINE_PRIMITIVE LIST_CREATE (item1 item2 ...))\\n(DEFINE_PRIMITIVE LIST_GET_ITEM (list index))\\n(DEFINE_PRIMITIVE LIST_IS_EMPTY (list))\\n(DEFINE_PRIMITIVE LIST_GET_LENGTH (list))\\n(DEFINE_PRIMITIVE CREATE_EMPTY_ARTIFACT (artifact_type_string))\\n(DEFINE_PRIMITIVE GET_HELP_TEXT_FOR_COMMAND (command_name))\\n(DEFINE_PRIMITIVE GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (alang_version section_count))\\n(DEFINE_PRIMITIVE GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE ())\\n(DEFINE_PRIMITIVE VERIFY_ALANG_FILE_MARKERS (alang_content_handle alang_version))\\n(DEFINE_PRIMITIVE GET_ALANG_SECTION_COUNT (alang_content_handle))\\n(DEFINE_PRIMITIVE COMPUTE_FILE_CHECKSUM (file_handle checksum_type))\\n(DEFINE_PRIMITIVE INVOKE_CORE_LLM_GENERATION (prompt_text llm_params_map))\\n(DEFINE_PRIMITIVE GET_LLM_PARAMS_FOR_TASK (task_type))\\n(DEFINE_PRIMITIVE PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional))\\n(DEFINE_PRIMITIVE PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description))\\n(DEFINE_PRIMITIVE PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag))\\n(DEFINE_PRIMITIVE PKA_QUERY (query_object scope_filter_optional))\\n(DEFINE_PRIMITIVE PKA_GET_ARTIFACT (pka_stored_id))\\n(DEFINE_PRIMITIVE PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change))\\n(DEFINE_PRIMITIVE PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify))\\n(DEFINE_PRIMITIVE CREATE_EVOLUTION_BACKLOG_ITEM (id title desc source status timestamp))\\n(DEFINE_PRIMITIVE UPDATE_EVOLUTION_BACKLOG_ITEM (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt))\\n(DEFINE_PRIMITIVE FIND_SIMILAR_BACKLOG_ITEM (text))\\n(DEFINE_PRIMITIVE IS_HANDLE_VALID (handle))\\n(DEFINE_PRIMITIVE HAS_QA_ISSUES (qa_assessment_map))\\n(DEFINE_PRIMITIVE IS_STATUS_FAILURE (status_code_or_value))\\n(DEFINE_PRIMITIVE GET_ERROR_MESSAGE (error_object))\\n(DEFINE_PRIMITIVE STRING_SPLIT (text delimiter))\\n(DEFINE_PRIMITIVE GT (num1 num2))\\n(DEFINE_PRIMITIVE LT (num1 num2))\\n(DEFINE_PRIMITIVE GTE (num1 num2))\\n(DEFINE_PRIMITIVE NEQ (val1 val2))\\n(DEFINE_PRIMITIVE EQ (val1 val2))\\n(DEFINE_PRIMITIVE INIT_PROJECT_STATE (project_id project_description master_plan_handle_optional))\\n(DEFINE_PRIMITIVE LOOP_FOR_EACH (variable list body))\\n(DEFINE_PRIMITIVE SEQ (expression ...))\\n(DEFINE_PRIMITIVE IF (condition true_branch (false_branch_optional)))\\n(DEFINE_PRIMITIVE LET ((variable value) ...) body))\\n(DEFINE_PRIMITIVE CALL_PROCEDURE (procedure_name arg ...)))\\n(DEFINE_PRIMITIVE RETURN_STATUS (status_code_or_result_object))\\n(DEFINE_PRIMITIVE ALANG_STATUS_PAUSE_FOR_USER_INPUT ())\\n(DEFINE_PRIMITIVE LOOP_WHILE (condition body))\\n(DEFINE_PRIMITIVE GET_ALANG_CORE_DIRECTIVES_HANDLE ())\\n(DEFINE_PRIMITIVE GET_EVOLUTION_BACKLOG_ITEMS ())\\n(DEFINE_PRIMITIVE PROPOSE_CORE_LOGIC_VERSION_INCREMENT (current_version changes_summary))\\n(DEFINE_PRIMITIVE APPLY_CORE_LOGIC_CHANGES (proposed_changes_handle))\\n(DEFINE_PRIMITIVE GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE ())\\n(DEFINE_PRIMITIVE CLEAR_PENDING_CORE_LOGIC_CHANGES ())\\n(DEFINE_PRIMITIVE GET_QA_ASSESSMENT_SUMMARY (qa_report_handle))\\n(DEFINE_PRIMITIVE STRING_TRIM (text))\\n(DEFINE_PRIMITIVE CHECK_FOR_SUBSTANTIVE_ISSUES (qa_report_handle) (LET ((assessmentResult (GET_QA_ASSESSMENT_SUMMARY qa_report_handle))) (IF (EQ (GET_STATUS assessmentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_GET_VALUE (GET_DATA assessmentResult) \\\"has_substantive_issues\\\" FALSE)) (RETURN_STATUS TRUE))))\\n\\n;; Conceptual Model Primitives\\n(DEFINE_PRIMITIVE ADD_CONCEPT_NODE (node_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE ADD_RELATIONSHIP_EDGE (edge_details_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_NODE_PROPERTIES (node_id properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE UPDATE_EDGE_PROPERTIES (from_node_id to_node_id edge_type properties_map session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE FLAG_NODE (node_id flag_name value session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PRIMITIVE GET_NODE_DETAILS (node_id session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_CREATE)))))\\n(DEFINE_PRIMITIVE GET_RELATED_NODES (node_id relationship_type_optional session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_NODES_BY_TYPE (node_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n(DEFINE_PRIMITIVE GET_EDGES_BY_TYPE (edge_type_string session_model_handle) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (LIST_CREATE)))))\\n\\n;; --- Section 2: Event Handler Procedures ---\\n\\n(DEFINE_PROCEDURE OnSystemInit () (SEQ (SET_STATE sys.alang_core_logic_version (GET_CORE_LOGIC_VERSION)) (SET_STATE sys.alang_spec_version (GET_ALANG_SPEC_VERSION)) (SET_STATE sys.current_mode \\\"IDLE\\\") (SET_STATE sys.error_level \\\"NONE\\\") (SET_STATE sys.error_message NIL) (SET_STATE sys.system_qa_status \\\"IDLE\\\") (SET_STATE session.qa_output_verbosity \\\"CONCISE\\\") (SET_STATE session.output_detail \\\"STANDARD\\\") (SET_STATE session.loop_stack (LIST_CREATE)) (SET_STATE session.pending_user_action_details NIL) (SET_STATE session.last_search_results NIL) (SET_STATE session.system_qa_context NIL) (SET_STATE sys.proposed_changes_handle NIL) (CALL_PROCEDURE LoadEvolutionBacklog (GET_STATE sys.evolution_backlog_handle)) (CALL_PROCEDURE LoadPersistentKnowledgeBase (GET_STATE sys.knowledge_base_handle)) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (FLUSH_USER_BUFFER) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnUserInput (raw_text) (SEQ (SET_STATE session.last_user_input_raw raw_text) (LET ((pendingAction (GET_STATE session.pending_user_action))) (IF (NOT (IS_NIL pendingAction)) (CALL_PROCEDURE HandlePendingUserAction pendingAction raw_text) (SEQ (CALL_PROCEDURE ProcessUserInputForConceptualModel raw_text (GET_STATE session.conceptual_model_handle)) (LET ((parsedCmdResult (CALL_PROCEDURE ParseUserCommand raw_text (GET_STATE session.conceptual_model_handle)))) (IF (EQ (GET_STATUS parsedCmdResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.parsed_command_details (GET_DATA parsedCmdResult)) (CALL_PROCEDURE DispatchUserCommand (GET_STATE session.parsed_command_details))) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Could not understand input.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL))))))) (FLUSH_USER_OUTPUT_BUFFER) (CALL_PROCEDURE ClearTurnSpecificSessionState) (IF (GET_STATE sys.evolution_trigger_pending) (SEQ (SET_STATE sys.evolution_trigger_pending FALSE) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolSuccess (job_id result_handle original_success_proc_name context) (SEQ (CALL_PROCEDURE ProcessToolResultForConceptualModel (MAP_GET_VALUE context \\\"tool_id\\\") result_handle (GET_STATE session.conceptual_model_handle) context) (CALL_PROCEDURE original_success_proc_name job_id result_handle (MAP_GET_VALUE context \\\"pass_through_context\\\")) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE OnToolFailure (job_id error_details original_failure_proc_name context) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" (MAP_GET_VALUE error_details \\\"message\\\")) (CALL_PROCEDURE HandleToolError (MAP_GET_VALUE context \\\"tool_id\\\") job_id error_details context) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ProcessToolResultForConceptualModel (tool_id result_handle session_model_handle context) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE HandleBrowseResult (job_id result_handle context) (LET ((contentResult (READ_CONTENT result_handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"browse\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read browsed content.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleBrowseError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Browse error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleReferenceValidationSuccess (job_id result_handle context) (LET ((reportResult (READ_CONTENT result_handle \\\"json_map\\\" NIL))) (IF (EQ (GET_STATUS reportResult) ALANG_STATUS_SUCCESS) (LET ((report (GET_DATA reportResult))) (IF (EQ (MAP_GET_VALUE report \\\"is_valid\\\") TRUE) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" \\\"Reference validated.\\\" NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_THOUGHTS\\\" (STRING_CONCAT \\\"Reference validation failed: \\\" (MAP_GET_VALUE report \\\"reason\\\")) NIL)) (CALL_PROCEDURE ProcessToolResultForConceptualModel \\\"reference_validator\\\" result_handle (GET_STATE session.conceptual_model_handle) context)) (SEQ (SET_ERROR_STATE \\\"TOOL_ERROR\\\" \\\"Failed to read validation report.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleReferenceValidationError (job_id error_details context) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Reference validation error: \\\" (MAP_GET_VALUE error_details \\\"message\\\")) NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_ERROR)))\\n(DEFINE_PROCEDURE HandleToolError (tool_id job_id error_details context) (SEQ (CALL_PROCEDURE ProcessToolErrorForConceptualModel tool_id error_details (GET_STATE session.conceptual_model_handle)) (LET ((selfCorrectionResult (SelfCorrectToolOperation tool_id job_id error_details context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS selfCorrectionResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_USER_EXPLANATION) (\\\"error_details\\\" error_details) (\\\"tool_id\\\" tool_id) (\\\"original_context\\\" context) (\\\"session_model_handle\\\" (GET_STATE session.conceptual_model_handle)) (\\\"output_format\\\" \\\"user_explanation\\\")) (GET_LLM_PARAMS_FOR_TASK \\\"error_explanation\\\")))) (LET ((userExplanation (IF (AND (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (NOT (STRING_IS_EMPTY_OR_NULL (GET_DATA analysisResult)))) (GET_DATA analysisResult) \\\"Could not generate explanation.\\\")))) (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" (STRING_CONCAT \\\"Error in \\\" tool_id \\\". Analysis: \\\" userExplanation) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"`INPUT` fix or other instructions.\\\" NIL) (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"tool_id\\\" tool_id) (\\\"job_id\\\" job_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context))) (SET_STATE session.pending_user_action \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ProcessToolErrorForConceptualModel (tool_id error_details session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserInputForConceptualModel (input_data session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForConceptualModel (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE IntegratePkaIntoConceptualModel (pka_id session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessUserFeedbackForConceptualModel (feedback_text session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n(DEFINE_PROCEDURE ProcessGeneratedArtifactForEvolution (artifact_handle artifact_type session_model_handle) (RETURN_STATUS ALANG_STATUS_SUCCESS))\\n\\n;; --- Section 3: Command Dispatcher & Specific Command Handlers ---\\n\\n(DEFINE_PROCEDURE DispatchUserCommand (commandDetails) (LET ((commandName (MAP_GET_VALUE commandDetails \\\"command\\\"))) (IF (EQ commandName \\\"START\\\") (CALL_PROCEDURE HandleStartCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"HELP\\\") (CALL_PROCEDURE HandleHelpCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"EVOLVE\\\") (CALL_PROCEDURE HandleEvolveCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SAVE_SYSTEM\\\") (CALL_PROCEDURE HandleSaveSystemCommand ())) (IF (EQ commandName \\\"BROWSE\\\") (CALL_PROCEDURE HandleBrowseCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OK\\\") (CALL_PROCEDURE HandleOkCommand ())) (IF (EQ commandName \\\"NO\\\") (CALL_PROCEDURE HandleNoCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"INPUT\\\") (CALL_PROCEDURE HandleInputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"END\\\") (CALL_PROCEDURE HandleEndCommand ())) (IF (EQ commandName \\\"LOOP_PROJECT_RESTART\\\") (CALL_PROCEDURE HandleLoopProjectRestartCommand ())) (IF (EQ commandName \\\"SET_SESSION_PREFERENCE\\\") (CALL_PROCEDURE HandleSetSessionPreferenceCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"STOP_LOOP\\\") (CALL_PROCEDURE HandleStopLoopCommand ())) (IF (EQ commandName \\\"OUTPUT\\\") (CALL_PROCEDURE HandleOutputCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SUMMARIZE\\\") (CALL_PROCEDURE HandleSummarizeCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"QUERY\\\") (CALL_PROCEDURE HandleQueryCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"OUTPUT_BACKLOG\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"PROMOTE_TO_PKA\\\") (CALL_PROCEDURE HandlePromoteToPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SEARCH_PKA\\\") (CALL_PROCEDURE HandleSearchPkaCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_QA_OUTPUT_VERBOSITY\\\") (CALL_PROCEDURE HandleSetQaOutputVerbosityCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SET_OUTPUT_DETAIL\\\") (CALL_PROCEDURE HandleSetOutputDetailCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"LOOP\\\") (CALL_PROCEDURE HandleLoopCommand (MAP_GET_VALUE commandDetails \\\"args\\\"))) (IF (EQ commandName \\\"SYSTEM_QA\\\") (CALL_PROCEDURE HandleSystemQACommand ())) (IF (NOT (IS_NIL commandName) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"START\\\" TRUE) (\\\"HELP\\\" TRUE) (\\\"EVOLVE\\\" TRUE) (\\\"SAVE_SYSTEM\\\" TRUE) (\\\"BROWSE\\\" TRUE) (\\\"OK\\\" TRUE) (\\\"NO\\\" TRUE) (\\\"INPUT\\\" TRUE) (\\\"END\\\" TRUE) (\\\"LOOP_PROJECT_RESTART\\\" TRUE) (\\\"SET_SESSION_PREFERENCE\\\" TRUE) (\\\"STOP_LOOP\\\" TRUE) (\\\"OUTPUT\\\" TRUE) (\\\"SUMMARIZE\\\" TRUE) (\\\"QUERY\\\" TRUE) (\\\"OUTPUT_BACKLOG\\\" TRUE) (\\\"PROMOTE_TO_PKA\\\" TRUE) (\\\"SEARCH_PKA\\\" TRUE) (\\\"SET_QA_OUTPUT_VERBOSITY\\\" TRUE) (\\\"SET_OUTPUT_DETAIL\\\" TRUE) (\\\"LOOP\\\" TRUE) (\\\"SYSTEM_QA\\\" TRUE)) commandName NIL)))) (CALL_PROCEDURE HandleUnknownCommand commandName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandlePendingUserAction (action_key raw_input) (SEQ (SET_STATE session.last_user_input_raw raw_input) (SET_STATE session.last_user_response (STRING_UPPER raw_input)) (SET_STATE session.last_user_feedback (IF (OR (EQ (STRING_UPPER raw_input) \\\"NO\\\") (EQ (STRING_UPPER raw_input) \\\"REVISE\\\")) raw_input NIL)) (SET_STATE session.last_user_input_data raw_input) (IF (EQ action_key \\\"AWAIT_END_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectTermination) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_RESTART_CONFIRMATION\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE FinalizeProjectRestart) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (IF (EQ (GET_STATE session.last_user_response) \\\"YES\\\") (CALL_PROCEDURE HandleOutputBacklogCommand (LIST_CREATE))) (SET_STATE session.pending_user_action NIL))) (IF (EQ action_key \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"user_backlog_selection_input\\\" (GET_STATE session.last_user_input_data))))) (IF (EQ action_key \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"ai_focus_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_VERSION_APPROVAL\\\") (SEQ (SET_STATE session.pending_user_action NIL) (SET_STATE session.system_qa_context (MAP_SET_VALUE (GET_STATE session.system_qa_context) \\\"version_approved\\\" (EQ (GET_STATE session.last_user_response) \\\"OK\\\")))))) (IF (EQ action_key \\\"AWAIT_TOOL_ERROR_RESOLUTION\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((toolId (MAP_GET_VALUE details \\\"tool_id\\\"))) (LET ((context (MAP_GET_VALUE details \\\"original_context\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE context \\\"original_input\\\") (MAP_GET_VALUE context \\\"original_params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (IF (EQ (GET_STATE session.last_user_response) \\\"INPUT\\\") (LET ((parsedInputResult (CALL_PROCEDURE ParseToolErrorResolutionInput (GET_STATE session.last_user_input_data) toolId (MAP_GET_VALUE details \\\"error_details\\\") context (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS parsedInputResult) ALANG_STATUS_SUCCESS) (LET ((newInputParams (GET_DATA parsedInputResult))) (LET ((retryJobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS toolId (MAP_GET_VALUE newInputParams \\\"input\\\") (MAP_GET_VALUE newInputParams \\\"params\\\") (MAP_GET_VALUE context \\\"success_proc_name\\\") (MAP_GET_VALUE context \\\"failure_proc_name\\\") context)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_INPUT)))) (IF (OR (EQ (GET_STATE session.last_user_response) \\\"NO\\\") (EQ (GET_STATE session.last_user_response) \\\"REVISE\\\")) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_REVISION_REVIEW\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((constraintsHandle (MAP_GET_VALUE details \\\"constraints_handle\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_revision\\\") (\\\"artifact_handle\\\" artifactHandle))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_revision\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))) (LET ((revisionStatus (CALL_PROCEDURE ApplyFeedbackBasedRevision artifactHandle (GET_STATE session.last_user_feedback) constraintsHandle (GET_STATE session.conceptual_model_handle) details)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (SET_STATE session.pending_user_action_details (MAP_SET_VALUE details \\\"last_revision_status\\\" revisionStatus)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (IF (EQ action_key \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (SEQ (LET ((details (GET_STATE session.pending_user_action_details))) (LET ((artifactHandle (MAP_GET_VALUE details \\\"artifact_handle\\\"))) (LET ((phaseId (MAP_GET_VALUE details \\\"phase\\\"))) (IF (EQ (GET_STATE session.last_user_response) \\\"OK\\\") (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_approved_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId))) (SEQ (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel (GET_STATE session.last_user_feedback) (GET_STATE session.conceptual_model_handle)) (CALL_PROCEDURE UPDATE_CONCEPTUAL_MODEL (MAP_CREATE (\\\"action\\\" \\\"flag_user_rejected_artifact\\\") (\\\"artifact_handle\\\" artifactHandle) (\\\"phase\\\" phaseId) (\\\"feedback\\\" (GET_STATE session.last_user_feedback)))))))) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL)))) (SEQ (SET_ERROR_STATE \\\"SYSTEM_ERROR\\\" (STRING_CONCAT \\\"Unhandled pending action: \\\" action_key)) (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (SET_STATE session.pending_user_action NIL) (SET_STATE session.pending_user_action_details NIL) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE FinalizeProjectTermination () (SEQ (LOG_EVENT \\\"PROJECT_TERMINATION\\\" \\\"Project terminating.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project terminated.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE FinalizeProjectRestart () (SEQ (LOG_EVENT \\\"PROJECT_RESTART\\\" \\\"Project restarting.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_PRESENT_THOUGHTS\\\" \\\"Project state discarded. Restarting.\\\" NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleStartCommand (argsList) (LET ((desc (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL desc) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"Description required.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_START\\\" (STRING_CONCAT \\\"START: \\\" desc) \\\"AI_ACKNOWLEDGE_INTENT\\\" (STRING_CONCAT \\\"START: '\\\" desc \\\"'\\\")) (LET ((newId (GENERATE_UNIQUE_ID \\\"PROJ\\\"))) (INIT_PROJECT_STATE newId desc NIL) (SET_STATE session.conceptual_model_handle (CREATE_EMPTY_ARTIFACT \\\"SessionConceptualModel\\\")) (CALL_PROCEDURE ProcessUserInputForConceptualModel desc (GET_STATE session.conceptual_model_handle))) (SET_STATE proj.current_phase_id \\\"PHASE_IDEA_FORMULATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleHelpCommand (argsList) (LET ((cmdName (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL cmdName) (CALL_PROCEDURE OutputGeneralHelp) (CALL_PROCEDURE OutputSpecificHelp cmdName))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEvolveCommand (argsList) (LET ((suggestion (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL suggestion) (SEQ (SET_ERROR_STATE \\\"USER_ERROR\\\" \\\"EVOLVE requires suggestion.\\\") (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (GET_STATE sys.error_message) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS))) (ACKNOWLEDGE_AND_LOG \\\"CMD_EVOLVE\\\" (STRING_CONCAT \\\"EVOLVE: \\\" suggestion) \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"EVOLVE logged.\\\") (LET ((itemIdResult (CALL_PROCEDURE ProcessAndStoreEvolveSuggestion suggestion \\\"USER_SUGGESTION\\\")))\\ (IF (EQ (GET_STATUS itemIdResult) ALANG_STATUS_SUCCESS) (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSaveSystemCommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SAVE_SYSTEM\\\" \\\"SAVE SYSTEM received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SAVE SYSTEM received.\\\") (LET ((alangHandle (SAFE_GENERATE_CONTENT (CREATE_EMPTY_ARTIFACT \\\"temp_alang_code\\\") PROMPT_TEMPLATE_SERIALIZE_ALANG_CORE (MAP_CREATE (\\\"current_alang_handle\\\" (GET_CURRENT_ALANG_PROCEDURE_DEFINITIONS_HANDLE)) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)) (\\\"session_conceptual_model_summary\\\" (SUMMARIZE_CONCEPTUAL_MODEL (GET_STATE session.conceptual_model_handle) NIL))) CONSTRAINT_SET_VALID_ALANG_SYNTAX)))) (IF (IS_HANDLE_VALID alangHandle) (LET ((contentResult (READ_CONTENT alangHandle \\\"text\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (LET ((content (GET_DATA contentResult))) (LET ((markersOk (VERIFY_ALANG_FILE_MARKERS alangHandle (GET_STATE sys.alang_core_logic_version)))) (LET ((sectionCount (GET_ALANG_SECTION_COUNT alangHandle)))) (LET ((checksum (COMPUTE_FILE_CHECKSUM alangHandle \\\"SHA256\\\")))) (IF (AND markersOk (GT sectionCount 0) (NOT (IS_NIL checksum))) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" content NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_USER_ACTION\\\" (GET_TEXT_FOR_CDGIP_USER_VERIFICATION_MANDATE (GET_STATE sys.alang_core_logic_version) sectionCount) NIL) (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Output Backlog? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_YES_NO_FOR_BACKLOG_OUTPUT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERATION_ERROR)))) (FLUSH_USER_OUTPUT_BUFFER)))\\n(DEFINE_PROCEDURE HandleBrowseCommand (argsList) (LET ((arg (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL arg) (NOT (IS_NUMBER arg))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((index (SUB (STRING_TO_NUMBER arg) 1))) (IF (OR (LT index 0) (GTE index (LIST_GET_LENGTH (GET_STATE session.last_search_results)))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (NOT (IS_TOOL_ENABLED \\\"browse\\\")) (RETURN_STATUS ALANG_STATUS_FAILURE_TOOL_UNAVAILABLE)) (LET ((url (MAP_GET_VALUE (LIST_GET_ITEM (GET_STATE session.last_search_results) index) \\\"url\\\" NIL))) (IF (STRING_IS_EMPTY_OR_NULL url) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((jobId (INVOKE_TOOL_ASYNC_WITH_CALLBACKS \\\"browse\\\" url NIL \\\"HandleBrowseResult\\\" \\\"HandleBrowseError\\\" (MAP_CREATE (\\\"tool_id\\\" \\\"browse\\\") (\\\"original_context\\\" NIL) (\\\"original_input\\\" url) (\\\"original_params\\\" NIL)))))) (RETURN_STATUS ALANG_STATUS_SUCCESS))))))\\n(DEFINE_PROCEDURE HandleUnknownCommand (commandName) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_ERROR\\\" (STRING_CONCAT \\\"Unknown command: \\\" commandName) NIL) (RETURN_STATUS ALANG_STATUS_INVALID_COMMAND)))\\n(DEFINE_PROCEDURE HandleOkCommand () (SEQ (SET_STATE session.last_user_response \\\"OK\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleNoCommand (argsList) (LET ((feedback (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"NO\\\") (SET_STATE session.last_user_feedback feedback) (CALL_PROCEDURE ProcessUserFeedbackForConceptualModel feedback (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleInputCommand (argsList) (LET ((inputData (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (SEQ (SET_STATE session.last_user_response \\\"INPUT\\\") (SET_STATE session.last_user_input_data inputData) (CALL_PROCEDURE ProcessUserInputForConceptualModel inputData (GET_STATE session.conceptual_model_handle)))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleEndCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"End project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_END_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleLoopProjectRestartCommand () (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_REQUEST_CLARIFICATION_QUESTIONS\\\" \\\"Restart project? (YES/NO)\\\" NIL) (SET_STATE session.pending_user_action \\\"AWAIT_RESTART_CONFIRMATION\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSetSessionPreferenceCommand (argsList) (LET ((prefMapResult (CALL_PROCEDURE ParseKeyValueArgs argsList))) (IF (EQ (GET_STATUS prefMapResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.output_preferences (GET_DATA prefMapResult)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleStopLoopCommand () (SEQ (SET_STATE session.loop_stack (LIST_CREATE)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleOutputCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSummarizeCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL artifactId) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((summaryResult (CALL_PROCEDURE SummarizeArtifact handle (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS summaryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA summaryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleQueryCommand (argsList) (LET ((queryType (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((queryValue (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL queryType) (STRING_IS_EMPTY_OR_NULL queryValue)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (IF (EQ (STRING_UPPER queryType) \\\"PKA\\\") (LET ((queryResult (CALL_PROCEDURE PerformQuery queryType queryValue (GET_STATE session.conceptual_model_handle) (GET_STATE sys.knowledge_base_handle)))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (LET ((queryResult (QUERY_CONCEPTUAL_MODEL (MAP_CREATE (\\\"type\\\" queryType) (\\\"value\\\" queryValue)) (GET_STATE session.conceptual_model_handle))))) (IF (EQ (GET_STATUS queryResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA queryResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE HandleOutputBacklogCommand (argsList) (LET ((contentResult (CALL_PROCEDURE GetEvolutionBacklogContent))) (IF (EQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (GET_DATA contentResult) NIL) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))\\n(DEFINE_PROCEDURE HandlePromoteToPkaCommand (argsList) (LET ((artifactId (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (LET ((rationale (GET_SESSION_CMD_ARG_BY_INDEX 1 NIL))) (LET ((schemaId (GET_SESSION_CMD_ARG_BY_INDEX 2 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL artifactId) (STRING_IS_EMPTY_OR_NULL rationale)) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((handle (MAP_GET_VALUE (GET_STATE proj.artifacts) artifactId NIL))) (IF (IS_NIL handle) (RETURN_STATUS ALANG_STATUS_NOT_FOUND)) (LET ((contentResult (READ_CONTENT handle \\\"text_summary_or_full\\\" NIL)))) (IF (NEQ (GET_STATUS contentResult) ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((content (GET_DATA contentResult)))) (IF (IS_NIL content) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (CALL_PROCEDURE CreateAndStorePKAIfUserConsents content schemaId rationale (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE HandleSearchPkaCommand (argsList) (LET ((keywords (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (STRING_IS_EMPTY_OR_NULL keywords) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (LET ((searchResultsResult (PKA_QUERY (MAP_CREATE (\\\"keywords\\\" keywords)) NIL)))) (IF (EQ (GET_STATUS searchResultsResult) ALANG_STATUS_SUCCESS) (LET ((results (GET_DATA searchResultsResult))) (IF (LIST_IS_EMPTY results) (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" \\\"No PKAs found.\\\" NIL) (LOOP_FOR_EACH handle results (SEQ (OUTPUT_TO_USER_BUFFER \\\"AI_PROVIDE_DATA\\\" (STRING_CONCAT \\\"- ID: \\\" (GET_HANDLE_METADATA handle \\\"id\\\") \\\" Title: \\\" (GET_HANDLE_METADATA handle \\\"title\\\")) NIL) (RELEASE_HANDLE handle)))) (CALL_PROCEDURE ProcessPkaSearchResultsForConceptualModel results (GET_STATE session.conceptual_model_handle)) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE HandleSetQaOutputVerbosityCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"CONCISE\\\") (NEQ level \\\"VERBOSE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.qa_output_verbosity level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleSetOutputDetailCommand (argsList) (LET ((level (GET_SESSION_CMD_ARG_BY_INDEX 0 NIL))) (IF (OR (STRING_IS_EMPTY_OR_NULL level) (AND (NEQ level \\\"MINIMAL\\\") (NEQ level \\\"STANDARD\\\") (NEQ level \\\"EXHAUSTIVE\\\"))) (RETURN_STATUS ALANG_STATUS_INVALID_ARGS)) (SET_STATE session.output_detail level) (RETURN_STATUS ALANG_STATUS_SUCCESS))))\\n(DEFINE_PROCEDURE HandleLoopCommand (argsList) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE HandleSystemQACommand () (SEQ (ACKNOWLEDGE_AND_LOG \\\"CMD_SYSTEM_QA\\\" \\\"SYSTEM_QA received.\\\" \\\"AI_ACKNOWLEDGE_INTENT\\\" \\\"SYSTEM_QA received. Initiating cycle.\\\") (SET_STATE sys.evolution_trigger_pending TRUE) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 4: Phase Logic Dispatcher & Specific Phase Execution Procedures ---\\n\\n(DEFINE_PROCEDURE DispatchPhaseExecution (phaseId) (IF (EQ phaseId \\\"PHASE_INIT\\\") (CALL_PROCEDURE ExecutePhaseInit)) (IF (EQ phaseId \\\"PHASE_IDEA_FORMULATION\\\") (CALL_PROCEDURE ExecutePhaseIdeaFormulation)) (IF (EQ phaseId \\\"PHASE_PRODUCT_DEFINITION\\\") (CALL_PROCEDURE ExecutePhaseProductDefinition)) (IF (EQ phaseId \\\"PHASE_PLANNING\\\") (CALL_PROCEDURE ExecutePhasePlanning)) (IF (EQ phaseId \\\"PHASE_TASK_EXECUTION\\\") (CALL_PROCEDURE ExecutePhaseTaskExecution)) (IF (EQ phaseId \\\"PHASE_FINAL_REVIEW\\\") (CALL_PROCEDURE ExecutePhaseFinalReview)) (IF (EQ phaseId \\\"PHASE_COMPLETION_SUMMARY\\\") (CALL_PROCEDURE ExecutePhaseCompletionSummary)) (IF (NOT (IS_NIL phaseId) (IS_NIL (MAP_GET_VALUE (MAP_CREATE (\\\"PHASE_INIT\\\" TRUE) (\\\"PHASE_IDEA_FORMULATION\\\" TRUE) (\\\"PHASE_PRODUCT_DEFINITION\\\" TRUE) (\\\"PHASE_PLANNING\\\" TRUE) (\\\"PHASE_TASK_EXECUTION\\\" TRUE) (\\\"PHASE_FINAL_REVIEW\\\" TRUE) (\\\"PHASE_COMPLETION_SUMMARY\\\" TRUE)) phaseId NIL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_INVALID_PHASE))))\\n(DEFINE_PROCEDURE ExecutePhaseInit () (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n(DEFINE_PROCEDURE ExecutePhaseIdeaFormulation () (LET ((ideaHandle (CREATE_EMPTY_ARTIFACT \\\"PatternIdeasDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT ideaHandle PROMPT_TEMPLATE_GENERATE_PATTERN_IDEAS (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_IDEA_GENERATION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\" ideaHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel ideaHandle \\\"pattern_ideas\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_IDEA_FORMULATION\\\") (\\\"artifact_handle\\\" ideaHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseProductDefinition () (LET ((prodDefHandle (CREATE_EMPTY_ARTIFACT \\\"ProductDefinitionDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT prodDefHandle PROMPT_TEMPLATE_PRODUCT_DEFINITION (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"pattern_ideas_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"pattern_ideas\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PRODUCT_DEFINITION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\" prodDefHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel prodDefHandle \\\"product_definition\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PRODUCT_DEFINITION\\\") (\\\"artifact_handle\\\" prodDefHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhasePlanning () (LET ((taskListHandle (CREATE_EMPTY_ARTIFACT \\\"TaskListDocument\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT taskListHandle PROMPT_TEMPLATE_GENERATE_TASK_LIST (MAP_CREATE (\\\"project_title\\\" (GET_STATE proj.title)) (\\\"product_definition_handle\\\" (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"product_definition\\\")) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_PLANNING)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" taskListHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskListHandle \\\"task_list\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_PLANNING\\\") (\\\"artifact_handle\\\" taskListHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseTaskExecution () (LET ((taskListHandle (MAP_GET_VALUE (GET_STATE proj.artifacts) \\\"task_list\\\" NIL))) (IF (IS_NIL taskListHandle) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)) (LET ((taskListResult (READ_CONTENT taskListHandle \\\"json_map_list\\\" NIL)))) (IF (EQ (GET_STATUS taskListResult) ALANG_STATUS_SUCCESS) (LET ((taskList (GET_DATA taskListResult))) (LOOP_FOR_EACH taskItem taskList (LET ((taskId (MAP_GET_VALUE taskItem \\\"id\\\"))) (LET ((taskDesc (MAP_GET_VALUE taskItem \\\"description\\\"))) (LET ((taskArtifactHandle (CREATE_EMPTY_ARTIFACT (STRING_CONCAT \\\"Task_\\\" taskId \\\"_Output\\\")))) (LET ((genResult (SAFE_GENERATE_CONTENT taskArtifactHandle PROMPT_TEMPLATE_EXECUTE_TASK (MAP_CREATE (\\\"task_id\\\" taskId) (\\\"task_description\\\" taskDesc) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_TASK_EXECUTION)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel taskArtifactHandle (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") (GET_STATE session.conceptual_model_handle)) (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) (STRING_CONCAT \\\"task_\\\" taskId \\\"_output\\\") taskArtifactHandle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_TASK_EXECUTION\\\") (\\\"artifact_handle\\\" taskArtifactHandle) (\\\"task_id\\\" taskId))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ExecutePhaseFinalReview () (LET ((draftHandle (CREATE_EMPTY_ARTIFACT \\\"CompiledProjectDraft\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT draftHandle PROMPT_TEMPLATE_COMPILE_DRAFT (MAP_CREATE (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_FINAL_REVIEW)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"final_draft\\\" draftHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForConceptualModel draftHandle \\\"final_draft\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"phase\\\" \\\"PHASE_FINAL_REVIEW\\\") (\\\"artifact_handle\\\" draftHandle))) (SET_STATE session.pending_user_action \\\"AWAIT_OK_REVISE_PHASE_ARTIFACT\\\") (RETURN_STATUS ALANG_STATUS_SUCCESS))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecutePhaseCompletionSummary () (LET ((summaryHandle (CREATE_EMPTY_ARTIFACT \\\"ProjectSummary\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT summaryHandle PROMPT_TEMPLATE_PROJECT_SUMMARY (MAP_CREATE (\\\"project_id\\\" (GET_STATE proj.id)) (\\\"project_artifacts\\\" (GET_STATE proj.artifacts)) (\\\"tau_project_log\\\" (GET_STATE proj.tau_project_log)) (\\\"session_conceptual_model_handle\\\" (GET_STATE session.conceptual_model_handle))) CONSTRAINT_SET_SUMMARY)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE proj.artifacts (MAP_SET_VALUE (GET_STATE proj.artifacts) \\\"project_summary\\\" summaryHandle)) (CALL_PROCEDURE ProcessGeneratedArtifactForEvolution summaryHandle \\\"project_summary\\\" (GET_STATE session.conceptual_model_handle)) (IF (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS ALANG_STATUS_SUCCESS)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n\\n;; --- Section 5: QA Procedures ---\\n\\n(DEFINE_PROCEDURE PerformProductQA (artifact_handle schema_id session_model_handle) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage1ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage2ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage3ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (\\\"data\\\" NIL)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((revisionStatus (CALL_PROCEDURE ApplyRevisionsToArtifact artifact_handle stage4ReportHandle session_model_handle CONSTRAINT_SET_TASK_EXECUTION)))) (IF (EQ revisionStatus ALANG_STATUS_PAUSE_FOR_USER_INPUT) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_PAUSE_FOR_USER_INPUT) (\\\"data\\\" NIL)))) (IF (IS_STATUS_FAILURE revisionStatus) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" revisionStatus) (\\\"data\\\" NIL))))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ApplyRevisionsToArtifact (artifact_handle qa_report_handle session_model_handle constraints_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"structured_map\\\" NIL))) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionPlanResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_REPORT_FOR_REVISIONS) (\\\"qa_report\\\" qaReport) (\\\"artifact_content\\\" artifactContent) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints)) (GET_LLM_PARAMS_FOR_TASK \\\"revision_planning\\\")))) (IF (EQ (GET_STATUS revisionPlanResult) ALANG_STATUS_SUCCESS) (LET ((revisionPlan (GET_DATA revisionPlanResult))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"self_correct\\\") (LET ((correctionResult (SelfCorrectArtifact artifactContent (MAP_GET_VALUE revisionPlan \\\"details\\\") constraints_handle session_model_handle)))) (IF (EQ (GET_STATUS correctionResult) ALANG_STATUS_SUCCESS) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle (GET_DATA correctionResult) \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (IF (EQ (MAP_GET_VALUE revisionPlan \\\"strategy\\\") \\\"user_review\\\") (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" artifactContent))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (SEQ (SET_STATE session.pending_user_action_details (MAP_CREATE (\\\"artifact_handle\\\" artifact_handle) (\\\"qa_report_handle\\\" qa_report_handle) (\\\"constraints_handle\\\" constraints_handle) (\\\"original_generated_text\\\" NIL))) (SET_STATE session.pending_user_action \\\"AWAIT_REVISION_REVIEW\\\") (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))))\\n(DEFINE_PROCEDURE ApplyFeedbackBasedRevision (artifact_handle feedback_text constraints_handle session_model_handle context_details) (LET ((artifactContentResult (READ_CONTENT artifact_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (LET ((constraintsResult (READ_CONTENT constraints_handle \\\"structured_list_of_rules\\\" NIL))) (IF (AND (EQ (GET_STATUS artifactContentResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS constraintsResult) ALANG_STATUS_SUCCESS)) (LET ((artifactContent (GET_DATA artifactContentResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((constraints (GET_DATA constraintsResult))) (LET ((revisionResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_FEEDBACK_FOR_REVISION) (\\\"artifact_content\\\" artifactContent) (\\\"user_feedback\\\" feedback_text) (\\\"session_model\\\" sessionModel) (\\\"constraints\\\" constraints) (\\\"previous_qa_context\\\" context_details)) (GET_LLM_PARAMS_FOR_TASK \\\"feedback_based_revision\\\")))) (IF (EQ (GET_STATUS revisionResult) ALANG_STATUS_SUCCESS) (LET ((revisedContent (GET_DATA revisionResult))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT artifact_handle revisedContent \\\"text/markdown\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE QA_Stage_1_SelfCritique (artifact_handle session_model_handle) (LET ((reportHandle (CREATE_EMPTY_ARTIFACT \\\"qa_critique_self\\\"))) (LET ((genResult (SAFE_GENERATE_CONTENT reportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" artifact_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (EQ (GET_STATUS genResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS genResult) ALANG_STATUS_PAUSE_FOR_USER_INPUT)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" (GET_STATUS genResult)) (\\\"data\\\" reportHandle))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_GENERAL) (\\\"data\\\" NIL))))))\\n(DEFINE_PROCEDURE PerformSystemQA (directives_handle evolution_backlog_handle session_model_handle selected_backlog_item_ids) (LET ((qaIterationCount 0))) (LET ((maxQaIterations 5))) (LET ((substantiveIssuesFoundThisCycle TRUE))) (LOOP_WHILE (AND substantiveIssuesFoundThisCycle (LT qaIterationCount maxQaIterations))) (SEQ (SET_STATE qaIterationCount (ADD qaIterationCount 1)) (SET_STATE substantiveIssuesFoundThisCycle FALSE) (LET ((pendingChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))) (IF (IS_HANDLE_VALID pendingChangesHandle) (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES pendingChangesHandle)))) (IF (NEQ applyStatus ALANG_STATUS_SUCCESS) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL) (CLEAR_PENDING_CORE_LOGIC_CHANGES)))) (LET ((stage1ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_self\\\")))) (LET ((stage1Result (SAFE_GENERATE_CONTENT stage1ReportHandle PROMPT_TEMPLATE_QA_SELF_CRITIQUE (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (EQ (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage1Result)) (GET_STATUS stage1Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage1ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage1ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage1ReportHandle) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage2ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_divergent\\\")))) (LET ((stage2Result (SAFE_GENERATE_CONTENT stage2ReportHandle PROMPT_TEMPLATE_QA_DIVERGENT_EXPLORATION (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (EQ (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage2Result)) (GET_STATUS stage2Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage2ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage2ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage2ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage3ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_redteam\\\")))) (LET ((stage3Result (SAFE_GENERATE_CONTENT stage3ReportHandle PROMPT_TEMPLATE_QA_RED_TEaming (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (EQ (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage3Result)) (GET_STATUS stage3Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage3ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage3ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage3ReportHandle)))) (IF (NOT substantiveIssuesFoundThisCycle)) (SEQ (LET ((stage4ReportHandle (CREATE_EMPTY_ARTIFACT \\\"system_qa_critique_external\\\")))) (LET ((stage4Result (SAFE_GENERATE_CONTENT stage4ReportHandle PROMPT_TEMPLATE_QA_EXTERNAL_REVIEW (MAP_CREATE (\\\"artifact_content_handle\\\" directives_handle) (\\\"session_conceptual_model_handle\\\" session_model_handle) (\\\"backlog_focus_ids\\\" selected_backlog_item_ids)) CONSTRAINT_SET_QA_CRITIQUE)))) (IF (OR (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (EQ (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT))) (RETURN_STATUS (IF (IS_STATUS_FAILURE (GET_STATUS stage4Result)) (GET_STATUS stage4Result) ALANG_STATUS_PAUSE_FOR_USER_INPUT)))) (IF (CHECK_FOR_SUBSTANTIVE_ISSUES stage4ReportHandle) (SEQ (SET_STATE substantiveIssuesFoundThisCycle TRUE) (LET ((proposalStatus (CALL_PROCEDURE ProposeDirectiveChanges stage4ReportHandle session_model_handle)))) (IF (IS_STATUS_FAILURE proposalStatus) (RETURN_STATUS proposalStatus))))) (RELEASE_HANDLE stage4ReportHandle)))))) (IF (AND substantiveIssuesFoundThisCycle (EQ qaIterationCount maxQaIterations)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS) (\\\"data\\\" NIL))) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" artifact_handle))))))\\n(DEFINE_PROCEDURE ProposeDirectiveChanges (qa_report_handle session_model_handle) (LET ((qaReportResult (READ_CONTENT qa_report_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS qaReportResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((qaReport (GET_DATA qaReportResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((changesResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_QA_FOR_DIRECTIVE_CHANGES) (\\\"qa_report\\\" qaReport) (\\\"session_model\\\" sessionModel) (\\\"current_directives_handle\\\" (GET_ALANG_CORE_DIRECTIVES_HANDLE)))) (GET_LLM_PARAMS_FOR_TASK \\\"directive_change_proposal\\\")))) (IF (EQ (GET_STATUS changesResult) ALANG_STATUS_SUCCESS) (LET ((changesData (GET_DATA changesResult))) (IF (EQ (VALIDATE_DATA changesData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (LET ((changesHandle (CREATE_EMPTY_ARTIFACT \\\"proposed_changes\\\")))) (LET ((writeStatus (WRITE_CONTENT_TO_ARTIFACT changesHandle changesData \\\"application/json\\\")))) (IF (EQ writeStatus ALANG_STATUS_SUCCESS) (SEQ (SET_STATE sys.proposed_changes_handle changesHandle) (RETURN_STATUS ALANG_STATUS_SUCCESS)) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\n(DEFINE_PROCEDURE ExecuteSystemQAAndEvolutionCycle () (LET ((currentStatus (GET_STATE sys.system_qa_status))) (LET ((qaContext (GET_STATE session.system_qa_context))) (IF (OR (EQ currentStatus \\\"IDLE\\\") (EQ currentStatus \\\"NEW\\\")) (SEQ (SET_STATE sys.system_qa_status \\\"SELECTING_BACKLOG_FOCUS\\\") (SET_STATE session.system_qa_context (MAP_CREATE (\\\"step\\\" \\\"SELECTING_BACKLOG_FOCUS\\\"))) (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"SELECTING_BACKLOG_FOCUS\\\") (LET ((aiFocusResult (CALL_PROCEDURE SelectAIProposedBacklogItems (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle)))))\\ (IF (EQ (GET_STATUS aiFocusResult) ALANG_STATUS_SUCCESS) (SEQ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"ai_proposed_focus\\\" (GET_DATA aiFocusResult)))) (SET_STATE sys.system_qa_status \\\"AWAITING_FOCUS_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_AI_PROPOSED_FOCUS_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))) (IF (EQ currentStatus \\\"AWAITING_FOCUS_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"ai_focus_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"AWAITING_USER_PRIORITY\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_BACKLOG_PRIORITY_SELECTION\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)))))) (IF (EQ currentStatus \\\"AWAITING_USER_PRIORITY\\\") (LET ((userInput (MAP_GET_VALUE qaContext \\\"user_backlog_selection_input\\\" NIL)))\\ (IF (IS_NIL userInput)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (LET ((selectedItems (STRING_SPLIT (STRING_TRIM userInput) \\\",\\\"))))\\ (IF (LIST_IS_EMPTY selectedItems)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"user_selected_focus_ids\\\" selectedItems))\\ (SET_STATE sys.system_qa_status \\\"PERFORMING_QA\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PERFORMING_QA\\\") (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (LET ((qaResult (PerformSystemQA (GET_ALANG_CORE_DIRECTIVES_HANDLE) (GET_STATE sys.evolution_backlog_handle) (GET_STATE session.conceptual_model_handle) selectedItems))))\\ (IF (EQ qaResult ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"PROPOSING_VERSION\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (IF (EQ qaResult ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"PROPOSING_VERSION\\\") (LET ((changesSummary \\\"Summary of changes.\\\")))\\ (LET ((versionResult (PROPOSE_CORE_LOGIC_VERSION_INCREMENT (GET_CORE_LOGIC_VERSION) changesSummary)))\\ (IF (EQ (GET_STATUS versionResult) ALANG_STATUS_SUCCESS)\\ (SEQ\\ (SET_STATE session.system_qa_context (MAP_SET_VALUE qaContext \\\"proposed_version_data\\\" (GET_DATA versionResult))))\\ (SET_STATE sys.system_qa_status \\\"AWAITING_VERSION_APPROVAL\\\")\\ (SET_STATE session.pending_user_action \\\"AWAIT_VERSION_APPROVAL\\\")\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))) (IF (EQ currentStatus \\\"AWAIT_VERSION_APPROVAL\\\") (LET ((userApproved (MAP_GET_VALUE qaContext \\\"version_approved\\\" NIL)))\\ (IF (IS_NIL userApproved)\\ (RETURN_STATUS ALANG_STATUS_PAUSE_FOR_USER_INPUT))\\ (IF userApproved\\ (SEQ\\ (SET_STATE sys.system_qa_status \\\"FINALIZING\\\")\\ (CALL_PROCEDURE ExecuteSystemQAAndEvolutionCycle))\\ (SEQ\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))) (SETQ currentStatus (GET_STATE sys.system_qa_status)) (SETQ qaContext (GET_STATE session.system_qa_context)) (IF (EQ currentStatus \\\"FINALIZING\\\") (SEQ\\ (LET ((finalChangesHandle (GET_PROPOSED_CORE_LOGIC_CHANGES_HANDLE)))\\ (IF (IS_HANDLE_VALID finalChangesHandle)\\ (LET ((applyStatus (APPLY_CORE_LOGIC_CHANGES finalChangesHandle)))\\ (IF (NEQ applyStatus ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))))))\\ (LET ((selectedItems (OR (MAP_GET_VALUE (MAP_GET_VALUE qaContext \\\"ai_proposed_focus\\\") \\\"item_ids\\\") (MAP_GET_VALUE qaContext \\\"user_selected_focus_ids\\\"))))\\ (CALL_PROCEDURE UpdateBacklogAfterQA selectedItems))\\ (LET ((phiAnalysisResult (AnalyzeConceptualModelForΦ (GET_STATE session.conceptual_model_handle) (MAP_CREATE (\\\"focus\\\" \\\"system_evolution\\\")))))\\ (IF (EQ (GET_STATUS phiAnalysisResult) ALANG_STATUS_SUCCESS)\\ (LOG_EVENT \\\"CONCEPTUAL_ANALYSIS\\\" \\\"Φ analysis complete.\\\" (GET_DATA phiAnalysisResult))))\\ (SET_STATE sys.system_qa_status \\\"IDLE\\\")\\ (SET_STATE session.system_qa_context NIL)\\ (CLEAR_PENDING_CORE_LOGIC_CHANGES)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)))))))\\n(DEFINE_PROCEDURE SelectAIProposedBacklogItems (backlog_handle session_model_handle) (LET ((backlogResult (READ_CONTENT backlog_handle \\\"text_summary_or_full\\\" NIL))) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))) (IF (AND (EQ (GET_STATUS backlogResult) ALANG_STATUS_SUCCESS) (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS)) (LET ((backlog (GET_DATA backlogResult))) (LET ((sessionModel (GET_DATA sessionModelResult))) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS) (\\\"backlog_content\\\" backlog) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"backlog_analysis\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((analysisData (GET_DATA analysisResult))) (IF (EQ (VALIDATE_DATA analysisData CONSTRAINT_SET_PROPOSED_CHANGES_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" analysisData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE UpdateBacklogAfterQA (item_ids) (SEQ (LOOP_FOR_EACH itemId item_ids (UPDATE_EVOLUTION_BACKLOG_ITEM itemId NIL NIL NIL \\\"ADDRESSED\\\" (STRING_CONCAT \\\"Addressed in v\\\" (GET_CORE_LOGIC_VERSION)) NIL))) (RETURN_STATUS ALANG_STATUS_SUCCESS)))\\n\\n;; --- Section 6: Content Generation & Pattern Modeling Procedures ---\\n\\n(DEFINE_PROCEDURE SAFE_GENERATE_CONTENT (target_artifact_handle prompt_template_handle prompt_context_map constraints_handle) (LET ((sessionModelHandle (MAP_GET_VALUE prompt_context_map \\\"session_conceptual_model_handle\\\")))\\ (LET ((patternsResult (CALL_PROCEDURE IdentifyPatternsInContext prompt_context_map sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS patternsResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((patterns (GET_DATA patternsResult)))\\ (LET ((enhancedPromptResult (CALL_PROCEDURE EnhancePromptWithPatterns prompt_template_handle prompt_context_map patterns sessionModelHandle)))\\ (IF (IS_STATUS_FAILURE (GET_STATUS enhancedPromptResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((enhancedPrompt (GET_DATA enhancedPromptResult)))\\ (LET ((genResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"prompt_text\\\" enhancedPrompt)) (GET_LLM_PARAMS_FOR_TASK \\\"general_generation\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS genResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)\\ )\\ (LET ((generatedText (GET_DATA genResult)))\\ (WRITE_CONTENT_TO_ARTIFACT target_artifact_handle generatedText \\\"text/markdown\\\")\\ (LET ((qaResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_META_COGNITIVE_QA)\\ (\\\"generated_text\\\" generatedText)\\ (\\\"prompt_context\\\" prompt_context_map)\\ (\\\"identified_patterns\\\" patterns)\\ (\\\"session_model_handle\\\" sessionModelHandle)) (GET_LLM_PARAMS_FOR_TASK \\\"meta_cognitive_qa\\\"))))\\ (IF (IS_STATUS_FAILURE (GET_STATUS qaResult))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_QA_ERROR)\\ )\\ (LET ((qaAssessment (GET_DATA qaResult)))\\ (LET ((handlingStatus (HandleQAIssues generatedText qaAssessment target_artifact_handle constraints_handle sessionModelHandle)))\\ (RETURN_STATUS handlingStatus)\\ )))))))))))\\n(DEFINE_PROCEDURE IdentifyPatternsInContext (context_map session_model_handle) (LET ((analysisResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_DATA_FOR_PATTERNS) (\\\"context\\\" context_map) (\\\"session_model_handle\\\" session_model_handle) (\\\"pka_handle\\\" (GET_STATE sys.knowledge_base_handle))) (GET_LLM_PARAMS_FOR_TASK \\\"pattern_identification\\\")))) (IF (EQ (GET_STATUS analysisResult) ALANG_STATUS_SUCCESS) (LET ((patternsData (GET_DATA analysisResult)))\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" patternsData)))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE EnhancePromptWithPatterns (prompt_template_handle context_map identified_patterns session_model_handle) (LET ((basePromptResult (READ_CONTENT prompt_template_handle \\\"text\\\" NIL)))\\ (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL))))\\ (IF (AND (EQ (GET_STATUS basePromptResult) ALANG_STATUS_SUCCESS)\\ (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS))\\ (LET ((basePrompt (GET_DATA basePromptResult)))\\ (LET ((sessionModel (GET_DATA sessionModelResult)))\\ (LET ((enhancedPromptResult (INVOKE_CORE_LLM_GENERATION\\ (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ENHANCE_PROMPT)\\ (\\\"base_prompt\\\" basePrompt)\\ (\\\"context\\\" context_map)\\ (\\\"patterns\\\" identified_patterns)\\ (\\\"session_model\\\" sessionModel))\\ (GET_LLM_PARAMS_FOR_TASK \\\"prompt_enhancement\\\"))))\\ (RETURN_STATUS enhancedPromptResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ParseUserCommand (raw_text session_model_handle) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_PARSE_COMMAND) (\\\"user_text\\\" raw_text) (\\\"session_model_handle\\\" session_model_handle)) (GET_LLM_PARAMS_FOR_TASK \\\"command_parsing\\\"))))\\ (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS)\\ (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (GET_DATA parseResult))))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR))))\\n(DEFINE_PROCEDURE ParseToolErrorResolutionInput (raw_input tool_id error_details context session_model_handle) (LET ((sessionModelResult (READ_CONTENT session_model_handle \\\"structured_map\\\" NIL)))) (IF (EQ (GET_STATUS sessionModelResult) ALANG_STATUS_SUCCESS) (LET ((sessionModel (GET_DATA sessionModelResult)))) (LET ((parseResult (INVOKE_CORE_LLM_GENERATION (MAP_CREATE (\\\"template\\\" PROMPT_TEMPLATE_ANALYZE_TOOL_ERROR_RESOLUTION_INPUT) (\\\"raw_input\\\" raw_input) (\\\"tool_id\\\" tool_id) (\\\"error_details\\\" error_details) (\\\"original_context\\\" context) (\\\"session_model\\\" sessionModel)) (GET_LLM_PARAMS_FOR_TASK \\\"tool_input_parsing\\\")))) (IF (EQ (GET_STATUS parseResult) ALANG_STATUS_SUCCESS) (LET ((parsedData (GET_DATA parseResult)))) (IF (EQ (VALIDATE_DATA parsedData CONSTRAINT_SET_TOOL_ERROR_RESOLUTION_INPUT_STRUCTURE) ALANG_STATUS_SUCCESS) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" parsedData))) (RETURN_STATUS ALANG_STATUS_FAILURE_VALIDATION_ERROR))) (RETURN_STATUS ALANG_STATUS_FAILURE_LLM_ERROR)))) (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)))))))\\n(DEFINE_PROCEDURE ProcessAndStoreEvolveSuggestion (suggestionText source) (LET ((similarItem (FIND_SIMILAR_BACKLOG_ITEM suggestionText))) (IF (IS_NIL similarItem) (LET ((newItemId (GENERATE_UNIQUE_ID \\\"EBL\\\")))) (CREATE_EVOLUTION_BACKLOG_ITEM newItemId (STRING_CONCAT \\\"Suggestion: \\\" (SUBSTRING suggestionText 0 50) \\\"...\\\") suggestionText source \\\"NEW\\\" (GET_ORCHESTRATOR_TIMESTAMP)) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" newItemId)))) (UPDATE_EVOLUTION_BACKLOG_ITEM (MAP_GET_VALUE similarItem \\\"id\\\") NIL NIL NIL NIL (STRING_CONCAT \\\"Reinforced by \\\" source) TRUE) (RETURN_STATUS (MAP_CREATE (\\\"status\\\" ALANG_STATUS_SUCCESS) (\\\"data\\\" (MAP_GET_VALUE similarItem \\\"id\\\")))))))\\n(DEFINE_PROCEDURE CreateAndStorePKAIfUserConsents (content schema_id rationale session_model_handle) (LET ((draftHandle (PKA_CREATE_DRAFT content schema_id (MAP_CREATE (\\\"rationale\\\" rationale) (\\\"source\\\" \\\"user_promotion\\\")))))\\ (IF (IS_HANDLE_VALID draftHandle)\\ (SEQ\\ (LET ((consentPromptText (GET_TEXT_FOR_PKA_CONSENT_PROMPT rationale session_model_handle)))\\ (LET ((consentResult (PKA_REQUEST_USER_CONSENT_TO_STORE draftHandle consentPromptText)))\\ (IF (EQ consentResult \\\"USER_CONSENT_GRANTED\\\")\\ (LET ((storeResult (PKA_STORE_APPROVED_DRAFT draftHandle \\\"USER_CONSENT_GRANTED\\\")))\\ (IF (EQ (GET_STATUS storeResult) ALANG_STATUS_SUCCESS)\\ (LET ((pkaId (GET_DATA storeResult)))\\ (CALL_PROCEDURE IntegratePkaIntoConceptualModel pkaId session_model_handle)\\ (RETURN_STATUS ALANG_STATUS_SUCCESS))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL))\\ ))\\ (RETURN_STATUS ALANG_STATUS_SUCCESS)\\ )))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\ (RETURN_STATUS ALANG_STATUS_FAILURE_GENERAL)\\ ))\\n\\n;; --- Section 7: ALANG Status Codes ---\\n\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_VALIDATION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_QA_MAX_ITERATIONS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_REVISION_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_FAILURE_CONCEPTUAL_MODEL_ERROR ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_SELECTING_BACKLOG_FOCUS ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_FOCUS_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_USER_PRIORITY ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PERFORMING_QA ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_PROPOSING_VERSION ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_AWAITING_VERSION_APPROVAL ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FINALIZING ())\\n(DEFINE_PRIMITIVE ALANG_STATUS_SYSTEM_QA_FAILED_APPLY_CHANGES ())\\n\\n;; --- Section 8: End of Core Logic ---\\n```\n--- END OF FILE Autologos_Core_Logic_v1.12.alang ---\n```\n--- END FILE: Autologos_Core_Logic.alang_product_20250606_095243_product_convergent_20250606_153508.md ---\n\n--- START FILE: _25157155013.md ---\nOf course. Based on the provided `Autologos_Core_Logic_v1.12.alang` file, here is a breakdown of what this system is and how you would get it to run as a bootstrapped, LLM-orchestrated process manager.\n\n### **My Findings from the ALang File**\n\nThe file `Autologos_Core_Logic_v1.12.alang` is not a program that can be executed directly. It is a **high-level logic specification** that defines the behavior of a sophisticated AI system. To run it, you need a specific **runtime environment** or **orchestrator** that can interpret this logic and connect it to real-world services like LLMs, tools, and user interfaces.\n\nThe ALang code defines a complete, event-driven architecture for process management, including:\n*   **State Management:** Tracking system status, project artifacts, and session data (`sys.*`, `session.*`, `proj.*`).\n*   **Command Handling:** Parsing user input and dispatching to specific procedures (`OnUserInput`, `DispatchUserCommand`).\n*   **Phase-Based Project Execution:** Moving a project through distinct phases like `PHASE_IDEA_FORMULATION`, `PHASE_PLANNING`, and `PHASE_TASK_EXECUTION`.\n*   **LLM-Powered Generation & QA:** Using LLMs to generate content, summarize artifacts, and perform multi-stage quality assurance (`SAFE_GENERATE_CONTENT`, `PerformProductQA`).\n*   **System Self-Evolution:** A mechanism to analyze its own performance and propose changes to its core logic (`ExecuteSystemQAAndEvolutionCycle`).\n\n### **How to Run the System: The Required Architecture**\n\nTo bring this ALang logic to life, you would need to build or use an orchestrator that provides the following components. This orchestrator would act as the \"engine\" that runs the \"software\" defined in the `.alang` file.\n\n1.  **ALang Interpreter:** A core component that parses and executes the Lisp-like syntax of the `.alang` file.\n2.  **Orchestration Kernel:** An event loop that listens for triggers (like user input or tool completion) and calls the appropriate ALang procedures (e.g., `OnUserInput`, `OnToolSuccess`).\n3.  **Primitive Host Implementations:** Concrete code (e.g., in Python) that implements the functions declared with `DEFINE_PRIMITIVE`. This is the bridge from the abstract logic to the real world. Key primitives you would need to implement include:\n    *   `INVOKE_CORE_LLM_GENERATION`: Connects to an LLM API (like Gemini).\n    *   `INVOKE_TOOL_ASYNC_WITH_CALLBACKS`: Manages calls to external tools (e.g., a web browser tool).\n    *   `READ_CONTENT`/`WRITE_CONTENT_TO_ARTIFACT`: Manages an in-memory or on-disk data store for \"artifacts\".\n    *   `SET_STATE`/`GET_STATE`: Interacts with a state management dictionary or database.\n    *   `OUTPUT_TO_USER_BUFFER`: Sends messages back to the user interface.\n4.  **User Interface (UI) Gateway:** A simple command-line interface (CLI) or a more complex web UI that handles the input/output between the user and the Orchestration Kernel.\n\n### **The Session Conceptual Model**\n\nA central component managed by the ALang core logic is the **Session Conceptual Model**. This isn't a static data structure but a dynamic, evolving representation of the system's understanding of the current project, user intent, generated artifacts, and relevant knowledge. It acts as the system's short-term memory and active working context.\n\nStructurally, the conceptual model can be thought of as a dynamic knowledge graph, though its specific implementation is abstracted by the ALang primitives. It contains:\n\n*   **Nodes:** Representing key concepts, entities (like the user, project, tools), artifacts generated or consumed, identified patterns, and specific issues or feedback points.\n*   **Edges:** Representing relationships between nodes, such as \"Artifact X is derived from Idea Y,\" \"User Feedback Z relates to Task Output A,\" \"Pattern P is relevant to Project Q,\" or \"Tool R failed during processing of Artifact S.\"\n*   **Properties:** Key-value pairs associated with nodes and edges, storing details like confidence scores for QA assessments, timestamps, source information, status (e.g., \"approved\", \"needs_revision\"), or metadata about concepts.\n\nThe Conceptual Model is continuously updated by various procedures:\n\n*   `OnSystemInit`: Initializes the model as an empty graph.\n*   `ProcessUserInputForConceptualModel`: Analyzes user input to identify concepts, entities, and intent, adding or updating corresponding nodes and relationships.\n*   `ProcessGeneratedArtifactForConceptualModel`: Parses newly generated artifacts (like idea lists, product definitions, task outputs) to extract key information and integrate it into the model, linking it to the project context.\n*   `ProcessToolResultForConceptualModel`: Incorporates information gained from successful tool executions (e.g., content from a browsed webpage) into the model.\n*   `ProcessToolErrorForConceptualModel`: Logs details about tool failures, potentially flagging related concepts or tasks in the model for review or retry.\n*   `ProcessUserFeedbackForConceptualModel`: Integrates user feedback and revision requests into the model, linking them to the specific artifacts or concepts they concern.\n*   `IntegratePkaIntoConceptualModel`: Incorporates relevant knowledge retrieved from the Persistent Knowledge Base (PKA) into the session model, providing broader context.\n*   `ProcessPkaSearchResultsForConceptualModel`: Adds search results from the PKA to the model, making them available for subsequent steps.\n*   `AnalyzeConceptualModelForΦ`: A specialized procedure (likely using an LLM) to analyze the current state of the model for higher-level insights or potential issues (\"Φ\" might represent philosophical or systemic self-reflection).\n*   `UPDATE_CONCEPTUAL_MODEL`: A primitive used by many procedures to explicitly add, modify, or flag elements within the model.\n*   `QUERY_CONCEPTUAL_MODEL`: A primitive used to retrieve specific information or relationships from the model to inform decision-making or generation.\n*   `IdentifyPatternsInContext`: Utilizes the model to identify recurring themes, successful approaches, or problematic areas based on the current session's history and artifacts.\n*   `EnhancePromptWithPatterns`: Uses identified patterns and the model's context to refine prompts sent to LLMs.\n*   `ParseUserCommand`, `ParseToolErrorResolutionInput`, `SelectAIProposedBacklogItems`, `ProposeDirectiveChanges`: These procedures likely query the conceptual model to understand the current state, user intent, error context, or backlog priorities before formulating their output or next steps.\n\nBy maintaining this dynamic model, the system can exhibit more coherent, context-aware, and adaptive behavior throughout a user session and project lifecycle.\n\n### **The Persistent Knowledge Base (PKA)**\n\nComplementary to the transient Session Conceptual Model is the **Persistent Knowledge Base (PKA)**, a long-term repository for valuable information, successful patterns, common issues and resolutions, and approved artifacts generated across all user sessions and system evolutions. The PKA serves as the system's institutional memory, allowing it to learn and improve over time by leveraging past experiences and curated knowledge.\n\nThe PKA is managed through a set of dedicated primitives and procedures:\n\n*   **Purpose:** To store and retrieve information that is deemed valuable enough to persist beyond a single session. This includes successful project outputs, validated patterns, common error resolution strategies, and user-approved content. It acts as a shared resource that can inform new projects, system QA, and self-evolution.\n*   **Conceptual Structure:** The PKA stores \"artifacts\" or \"knowledge items.\" Each item is more than just raw content; it typically includes:\n    *   A unique ID.\n    *   The core content (text, code, structured data, etc.).\n    *   Metadata (timestamp, source, related project/session IDs).\n    *   Schema ID (categorizing the type of knowledge, e.g., \"marketing_plan_template\", \"tool_error_pattern\", \"successful_prompt_strategy\"). This allows for structured querying.\n    *   Context Map (details about *why* this item was stored, its relevance, original rationale, and potentially user feedback).\n    *   User Consent Flags (tracking user permission for storage and usage, especially for user-contributed or session-specific data).\n*   **Interaction with ALang Logic:**\n    *   `LoadPersistentKnowledgeBase (handle_or_path)`: Initializes the connection to the PKA storage mechanism (e.g., a database or file system) at system startup.\n    *   `PKA_CREATE_DRAFT (content_handle_or_text schema_id_optional context_map_optional)`: Creates a temporary, unstored draft of a knowledge item. This allows for review and consent before permanent storage.\n    *   `PKA_REQUEST_USER_CONSENT_TO_STORE (pka_draft_handle purpose_description)`: Initiates a user interaction flow to request permission to store the draft in the PKA, providing context on why it's valuable. The `GET_TEXT_FOR_PKA_CONSENT_PROMPT` primitive is used to generate the user-facing prompt, potentially tailored based on the session conceptual model.\n    *   `PKA_STORE_APPROVED_DRAFT (pka_draft_handle user_consent_token_or_flag)`: Stores the draft permanently in the PKA if user consent is granted.\n    *   `PKA_QUERY (query_object scope_filter_optional)`: Searches the PKA for relevant knowledge items based on keywords, schema, or other criteria. This is used by procedures like `PerformQuery` and `IdentifyPatternsInContext` to retrieve relevant past information.\n    *   `PKA_GET_ARTIFACT (pka_stored_id)`: Retrieves a specific knowledge item from the PKA by its ID.\n    *   `PKA_UPDATE_ARTIFACT (pka_stored_id new_content_handle update_rationale user_consent_token_or_flag_if_scope_change)`: Allows updating existing knowledge items, potentially requiring renewed user consent if the scope or sensitivity of the information changes.\n    *   `PKA_MANAGE_CONSENT (pka_stored_id_or_all action_revoke_or_modify)`: Provides a mechanism for users to review and manage their consent for stored knowledge items.\n    *   `IntegratePkaIntoConceptualModel (pka_id session_model_handle)`: A procedure to pull a specific PKA item into the current session's conceptual model, making its contents and relationships part of the active working context.\n    *   `ProcessPkaSearchResultsForConceptualModel (pka_result_handles session_model_handle)`: A procedure to process the results of a PKA query and integrate relevant findings into the session conceptual model.\n\nThe PKA is a critical mechanism for the Autologos system's ability to learn and improve, providing a structured and consent-managed way to build a collective intelligence from its operational history.\n\n### **The Evolution Backlog**\n\nThe **Evolution Backlog**, managed via the `sys.evolution_backlog_handle`, is a persistent queue of potential improvements, suggestions, issues, or ideas for evolving the core ALang logic itself. It serves as the system's self-improvement roadmap, capturing insights gained during operation, user feedback specifically tagged for evolution, and findings from the system's internal QA processes.\n\nThe backlog is structured as a list of items, each likely containing:\n\n*   **id:** A unique identifier (`GENERATE_UNIQUE_ID \"EBL\"`).\n*   **title:** A brief summary of the item.\n*   **desc:** A detailed description of the suggestion, issue, or insight.\n*   **source:** Where the item originated (e.g., \"USER_SUGGESTION\", \"SYSTEM_QA_FINDING\", \"TOOL_ERROR_ANALYSIS\").\n*   **status:** The current state of the item (e.g., \"NEW\", \"TRIAGED\", \"ADDRESSED\", \"DEFERRED\", \"REINFORCED\").\n*   **timestamp:** When the item was created or last updated.\n*   **comment_opt:** Optional comments or context added during processing.\n*   **reinforce_flag_opt:** A flag indicating if this item reinforces an existing one, potentially increasing its priority.\n\nProcedures interacting with the backlog include:\n\n*   `LoadEvolutionBacklog (handle_or_path)`: Loads the backlog from its persistent storage at system initialization.\n*   `GetEvolutionBacklogContent ()`: Retrieves the current content of the backlog, likely for display or analysis.\n*   `ProcessAndStoreEvolveSuggestion (suggestionText source)`: Handles incoming suggestions (like those from the `EVOLVE` command). It checks if a similar item already exists using `FIND_SIMILAR_BACKLOG_ITEM`. If so, it updates the existing item (incrementing a reinforcement count or similar). If not, it creates a new backlog item with status \"NEW\".\n*   `FIND_SIMILAR_BACKLOG_ITEM (text)`: A primitive or procedure that uses similarity matching (potentially LLM-assisted or based on embeddings) to find existing backlog items related to new input.\n*   `SelectAIProposedBacklogItems (backlog_handle session_model_handle)`: Used during the System QA cycle to analyze the backlog and the current session's conceptual model (using `PROMPT_TEMPLATE_ANALYZE_BACKLOG_FOR_FOCUS`) to identify high-priority items for the current evolution cycle. This process is LLM-driven and considers the context of recent operations and conceptual understanding. It proposes a set of `item_ids` to focus on.\n*   `UpdateEvolutionBacklogItem (id new_title_opt new_desc_opt new_source_opt new_status_opt new_comment_opt increment_reinforce_flag_opt)`: Updates the properties of a specific backlog item. Used to mark items as \"ADDRESSED\" after a successful evolution cycle or \"REINFORCED\" if a similar suggestion is received.\n*   `UpdateBacklogAfterQA (item_ids)`: A procedure called at the end of a System QA and Evolution Cycle to update the status of the backlog items that were addressed during that cycle.\n\nThe Evolution Backlog is a crucial component for the system's long-term self-improvement, providing a structured way to capture potential enhancements and prioritize them for implementation during System QA cycles.\n\n### **The System QA and Evolution Cycle**\n\nThe **System QA and Evolution Cycle**, orchestrated by the `ExecuteSystemQAAndEvolutionCycle` procedure, is the core mechanism by which the Autologos system reviews its own performance, identifies areas for improvement in its core logic (the ALang directives), and proposes and applies changes. This cycle is triggered periodically or by the `SYSTEM_QA` command.\n\nThe cycle operates through a series of states, managed by the `sys.system_qa_status` variable and contextual information stored in `session.system_qa_context`:\n\n1.  **IDLE / NEW:** The cycle is initiated. Transitions to `SELECTING_BACKLOG_FOCUS`.\n2.  **SELECTING_BACKLOG_FOCUS:** The system analyzes the Evolution Backlog and the current session's Conceptual Model using `SelectAIProposedBacklogItems` to determine which backlog items (suggestions, issues) should be the focus of this evolution cycle. It proposes a set of item IDs. Transitions to `AWAITING_FOCUS_APPROVAL`.\n3.  **AWAITING_FOCUS_APPROVAL:** The system presents the proposed backlog items to the user for approval. The state pauses (`ALANG_STATUS_PAUSE_FOR_USER_INPUT`) until the user responds with `OK` (approving the AI's selection) or provides input (potentially selecting different items or providing feedback).\n4.  **AWAITING_USER_PRIORITY:** If the user did not approve the AI's focus, this state waits for the user to manually select backlog items or provide other instructions via the `INPUT` command. Transitions to `PERFORMING_QA` if items are selected, or back to `IDLE` if no items are selected.\n5.  **PERFORMING_QA:** The core of the cycle. The system performs multi-stage QA on its own core logic (the ALang directives, obtained via `GET_ALANG_CORE_DIRECTIVES_HANDLE`), focusing on the selected backlog items and the current session's context. This involves several QA stages (`QA_Stage_1_SelfCritique`, `QA_Stage_2_Divergent`, etc., although only `PerformSystemQA` and `ProposeDirectiveChanges` are explicitly shown interacting with directives/changes). The `PerformSystemQA` procedure iteratively runs QA checks and attempts to `ProposeDirectiveChanges` based on the findings. If substantive issues are found and changes are proposed, the cycle transitions to `PROPOSING_VERSION`. If QA passes without proposing changes after multiple iterations, it might transition directly to `FINALIZING` or `IDLE`.\n6.  **PROPOSING_VERSION:** Based on the QA findings and proposed directive changes, the system determines if a core logic version increment is necessary using `PROPOSE_CORE_LOGIC_VERSION_INCREMENT`. It prepares a summary of the changes. Transitions to `AWAITING_VERSION_APPROVAL`.\n7.  **AWAITING_VERSION_APPROVAL:** The system presents the proposed core logic changes and version increment to the user for approval. The state pauses (`ALANG_STATUS_PAUSE_FOR_USER_INPUT`) until the user responds with `OK` (approving the changes) or `NO`/`REVISE` (rejecting or requesting revisions).\n8.  **FINALIZING:** If the user approved the changes, the system applies them to the core logic using `APPLY_CORE_LOGIC_CHANGES`. It then updates the status of the addressed backlog items to \"ADDRESSED\" using `UpdateBacklogAfterQA`. Finally, it performs a conceptual analysis of the system evolution using `AnalyzeConceptualModelForΦ` and logs the findings. Transitions back to `IDLE`. If the user rejected the changes, the pending changes are cleared (`CLEAR_PENDING_CORE_LOGIC_CHANGES`), and the system returns to `IDLE`.\n\nThis intricate cycle demonstrates the system's capability for introspection, self-assessment, and guided self-modification, driven by a combination of automated analysis, user feedback captured in the backlog, and explicit user approval steps for critical changes to its core behavior.\n\n### **The Bootstrapping and Operational Flow**\n\nHere is the step-by-step process of how the system would bootstrap and run:\n\n**1. Bootstrapping Sequence:**\n\n*   **Step 1: Orchestrator Start-up:** You launch the main orchestrator program (e.g., `python orchestrator.py`).\n*   **Step 2: Load Core Logic:** The orchestrator reads the `Autologos_Core_Logic_v1.12.alang` file into memory. The ALang Interpreter parses the procedures and symbols.\n*   **Step 3: System Initialization:** The orchestrator triggers the `OnSystemInit` event.\n*   **Step 4: Execute `OnSystemInit`:** The interpreter runs the `OnSystemInit` procedure from the ALang file. This sets the initial system state, creates a session **conceptual model** (initialized as empty), and loads the **persistent knowledge base** and **evolution backlog** from their respective `.json` files using `LoadPersistentKnowledgeBase` and `LoadEvolutionBacklog`.\n*   **Step 5: Await Input:** The system is now bootstrapped, in an `IDLE` state, and waiting for the first user command.\n\n**2. Example Operational Flow:**\n\nLet's say the user wants to start a new project.\n\n1.  **User Input:** The user types `START \"Create a marketing plan for a new coffee shop\"` into the UI.\n2.  **Event Trigger:** The Orchestrator receives this text and triggers the `OnUserInput` event.\n3.  **ALang Execution:** The interpreter executes the `OnUserInput` procedure. This procedure first calls `ProcessUserInputForConceptualModel` to update the session's conceptual model with the user's stated goal and initial context. It then calls `ParseUserCommand` (using an LLM to structure the input based on the conceptual model) and then `DispatchUserCommand`.\n4.  **Command Handling:** `DispatchUserCommand` identifies the `START` command and calls `HandleStartCommand`. This procedure initializes the project state, associating it with the current session and its conceptual model.\n5.  **Phase Execution:** The system then proceeds to the first project phase, `PHASE_IDEA_FORMULATION`, and calls `ExecutePhaseIdeaFormulation`.\n6.  **LLM Generation & QA:** This procedure calls `SAFE_GENERATE_CONTENT`. The underlying Python implementation of this primitive sends a request to an LLM using the `prompt_generate_pattern_ideas.txt` template, potentially enhanced by patterns identified from the conceptual model, which might have been informed by PKA queries (`IdentifyPatternsInContext` can query the PKA). The LLM generates ideas, which are then checked by a follow-up LLM call for quality assurance (`PROMPT_TEMPLATE_META_COGNITIVE_QA`). The results of this generation and QA are then processed by `ProcessGeneratedArtifactForConceptualModel` and `HandleQAIssues`, further updating the conceptual model with the new artifact and any identified issues.\n7.  **Await User Feedback:** The generated ideas are presented to the user, and the system state is set to `AWAIT_OK_REVISE_PHASE_ARTIFACT`, pausing the process until the user types `OK` or `NO \"The ideas are too generic\"`. User feedback is processed by `ProcessUserFeedbackForConceptualModel` to update the conceptual model, informing potential revisions. If the user approves the generated artifact (`OK`), the system might then initiate a process to promote this artifact (or derived knowledge) to the PKA via `HandlePromoteToPkaCommand`, which involves creating a draft, requesting user consent, and storing the approved item.\n\nThis cycle of **Input -> ALang Logic (interacting with Conceptual Model & PKA) -> LLM/Tool Call -> State Change -> Output** continues, allowing the system to manage complex, multi-step processes autonomously while remaining directed by user feedback and its own internal logic, all while building a richer understanding within the session's conceptual model and contributing to the long-term knowledge stored in the PKA. The **Evolution Backlog** and **System QA and Evolution Cycle** provide the meta-level capability for the system to observe its own performance, capture potential improvements, and periodically update its core logic to become more effective over time.\n--- END FILE: _25157155013.md ---\n```",
    "linesAdded": 48,
    "linesRemoved": 4
  }
]